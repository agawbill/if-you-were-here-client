{"ast":null,"code":"var _jsxFileName = \"/home/anthony/Desktop/if-you-were-here/client/src/containers/MessageForm/MessageForm.js\";\nimport React, { useState, useReducer, useEffect, useCallback } from \"react\";\nimport styles from \"./MessageForm.module.css\";\nimport Modal from \"../../components/UI/Modal/Modal\";\nimport Identity from \"../../components/Identity/Identity\";\nimport Who from \"../../components/Who/Who\";\nimport FormMessage from \"../../components/FormMessage/FormMessage\";\nimport Summary from \"../../components/Summary/Summary\";\nimport FormSpinner from \"../../components/UI/Spinners/FormSpinner/FormSpinner\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { submitMessage, submitMessageReset } from \"../../store/actions\";\nconst initialState = {\n  identity: {\n    identityId: null,\n    identityName: null\n  },\n  who: {\n    whoId: null,\n    whoName: null\n  },\n  message: \" \"\n};\n\nconst formReducer = (formState, action) => {\n  switch (action.type) {\n    case \"identity\":\n      return { ...formState,\n        identity: { ...formState.identity,\n          ...action.value\n        }\n      };\n\n    case \"who\":\n      return { ...formState,\n        who: { ...formState.who,\n          ...action.value\n        }\n      };\n\n    case \"message\":\n      console.log(\"form that action\", action.value);\n      return { ...formState,\n        message: action.value\n      };\n\n    case \"reset\":\n      return { ...initialState\n      };\n\n    case \"submit\":\n      return { ...formState\n      };\n\n    default:\n      break;\n  }\n};\n\nconst MessageForm = () => {\n  const [formState, dispatchForm] = useReducer(formReducer, initialState);\n  const [open, setOpen] = useState(false);\n  const [sectionIndex, setSectionIndex] = useState(0);\n  const messageSuccess = useSelector(state => state.message.messageSuccess);\n  const messageError = useSelector(state => state.message.error);\n  const messageLoading = useSelector(state => state.message.loading);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (messageSuccess) {\n      dispatchForm({\n        type: \"reset\"\n      });\n      dispatch(submitMessageReset());\n    }\n  }, [messageSuccess, dispatch]);\n\n  const openHandler = () => setOpen(oldState => !oldState);\n\n  const switchHandler = (type, name, formValue) => {\n    if (type === \"next\" && sectionIndex === sections.length - 1) {\n      setSectionIndex(prevIndex => prevIndex);\n      dispatchForm({\n        type: name,\n        value: formValue\n      });\n    } else if (type === \"next\") {\n      setSectionIndex(prevIndex => prevIndex + 1);\n      dispatchForm({\n        type: name,\n        value: formValue\n      });\n    } else if (type === \"prev\") {\n      setSectionIndex(prevIndex => prevIndex - 1);\n      dispatchForm({\n        type: name,\n        value: formValue\n      });\n    } else if (type === \"submit\") {\n      dispatchForm({\n        type: name\n      });\n      const body = {\n        identity: formState.identity.identityId,\n        who: formState.who.whoId,\n        message: formState.message\n      };\n      dispatch(submitMessage(body));\n      setSectionIndex(0);\n    }\n  };\n\n  const sections = [React.createElement(Identity, {\n    switchHandler: switchHandler,\n    identityValue: formState.identity,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }), React.createElement(Who, {\n    switchHandler: switchHandler,\n    whoValue: formState.who,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }), React.createElement(FormMessage, {\n    switchHandler: switchHandler,\n    messageValue: formState.message,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }), React.createElement(Summary, {\n    switchHandler: switchHandler,\n    messageValue: formState.message,\n    whoValue: formState.who,\n    identityValue: formState.identity,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  })];\n  let messageFormBody = sections[sectionIndex];\n\n  if (messageLoading) {\n    messageFormBody = React.createElement(FormSpinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    });\n  } else if (messageError) {\n    messageFormBody = messageError;\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(Modal, {\n    open: open,\n    openHandler: openHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, messageFormBody), React.createElement(\"div\", {\n    className: styles.TextBox,\n    onClick: () => openHandler(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, \"Enter Here \", React.createElement(\"span\", {\n    className: styles.TypeWriter,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, \"|\")));\n};\n\nexport default MessageForm;","map":{"version":3,"sources":["/home/anthony/Desktop/if-you-were-here/client/src/containers/MessageForm/MessageForm.js"],"names":["React","useState","useReducer","useEffect","useCallback","styles","Modal","Identity","Who","FormMessage","Summary","FormSpinner","useDispatch","useSelector","submitMessage","submitMessageReset","initialState","identity","identityId","identityName","who","whoId","whoName","message","formReducer","formState","action","type","value","console","log","MessageForm","dispatchForm","open","setOpen","sectionIndex","setSectionIndex","messageSuccess","state","messageError","error","messageLoading","loading","dispatch","openHandler","oldState","switchHandler","name","formValue","sections","length","prevIndex","body","messageFormBody","TextBox","TypeWriter"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,EAAiDC,WAAjD,QAAoE,OAApE;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,KAAP,MAAkB,iCAAlB;AACA,OAAOC,QAAP,MAAqB,oCAArB;AACA,OAAOC,GAAP,MAAgB,0BAAhB;AACA,OAAOC,WAAP,MAAwB,0CAAxB;AACA,OAAOC,OAAP,MAAoB,kCAApB;AACA,OAAOC,WAAP,MAAwB,sDAAxB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,aAAT,EAAwBC,kBAAxB,QAAkD,qBAAlD;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE;AAAEC,IAAAA,UAAU,EAAE,IAAd;AAAoBC,IAAAA,YAAY,EAAE;AAAlC,GADS;AAEnBC,EAAAA,GAAG,EAAE;AAAEC,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,OAAO,EAAE;AAAxB,GAFc;AAGnBC,EAAAA,OAAO,EAAE;AAHU,CAArB;;AAMA,MAAMC,WAAW,GAAG,CAACC,SAAD,EAAYC,MAAZ,KAAuB;AACzC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,UAAL;AACE,aAAO,EACL,GAAGF,SADE;AAELR,QAAAA,QAAQ,EAAE,EACR,GAAGQ,SAAS,CAACR,QADL;AAER,aAAGS,MAAM,CAACE;AAFF;AAFL,OAAP;;AAOF,SAAK,KAAL;AACE,aAAO,EACL,GAAGH,SADE;AAELL,QAAAA,GAAG,EAAE,EACH,GAAGK,SAAS,CAACL,GADV;AAEH,aAAGM,MAAM,CAACE;AAFP;AAFA,OAAP;;AAOF,SAAK,SAAL;AACEC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCJ,MAAM,CAACE,KAAvC;AAEA,aAAO,EACL,GAAGH,SADE;AAELF,QAAAA,OAAO,EAAEG,MAAM,CAACE;AAFX,OAAP;;AAIF,SAAK,OAAL;AACE,aAAO,EACL,GAAGZ;AADE,OAAP;;AAGF,SAAK,QAAL;AACE,aAAO,EACL,GAAGS;AADE,OAAP;;AAGF;AACE;AAjCJ;AAmCD,CApCD;;AAsCA,MAAMM,WAAW,GAAG,MAAM;AACxB,QAAM,CAACN,SAAD,EAAYO,YAAZ,IAA4B9B,UAAU,CAACsB,WAAD,EAAcR,YAAd,CAA5C;AACA,QAAM,CAACiB,IAAD,EAAOC,OAAP,IAAkBjC,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM,CAACkC,YAAD,EAAeC,eAAf,IAAkCnC,QAAQ,CAAC,CAAD,CAAhD;AACA,QAAMoC,cAAc,GAAGxB,WAAW,CAAEyB,KAAD,IAAWA,KAAK,CAACf,OAAN,CAAcc,cAA1B,CAAlC;AACA,QAAME,YAAY,GAAG1B,WAAW,CAAEyB,KAAD,IAAWA,KAAK,CAACf,OAAN,CAAciB,KAA1B,CAAhC;AACA,QAAMC,cAAc,GAAG5B,WAAW,CAAEyB,KAAD,IAAWA,KAAK,CAACf,OAAN,CAAcmB,OAA1B,CAAlC;AACA,QAAMC,QAAQ,GAAG/B,WAAW,EAA5B;AAEAT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIkC,cAAJ,EAAoB;AAClBL,MAAAA,YAAY,CAAC;AAAEL,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAZ;AACAgB,MAAAA,QAAQ,CAAC5B,kBAAkB,EAAnB,CAAR;AACD;AACF,GALQ,EAKN,CAACsB,cAAD,EAAiBM,QAAjB,CALM,CAAT;;AAOA,QAAMC,WAAW,GAAG,MAAMV,OAAO,CAAEW,QAAD,IAAc,CAACA,QAAhB,CAAjC;;AAEA,QAAMC,aAAa,GAAG,CAACnB,IAAD,EAAOoB,IAAP,EAAaC,SAAb,KAA2B;AAC/C,QAAIrB,IAAI,KAAK,MAAT,IAAmBQ,YAAY,KAAKc,QAAQ,CAACC,MAAT,GAAkB,CAA1D,EAA6D;AAC3Dd,MAAAA,eAAe,CAAEe,SAAD,IAAeA,SAAhB,CAAf;AACAnB,MAAAA,YAAY,CAAC;AAAEL,QAAAA,IAAI,EAAEoB,IAAR;AAAcnB,QAAAA,KAAK,EAAEoB;AAArB,OAAD,CAAZ;AACD,KAHD,MAGO,IAAIrB,IAAI,KAAK,MAAb,EAAqB;AAC1BS,MAAAA,eAAe,CAAEe,SAAD,IAAeA,SAAS,GAAG,CAA5B,CAAf;AACAnB,MAAAA,YAAY,CAAC;AAAEL,QAAAA,IAAI,EAAEoB,IAAR;AAAcnB,QAAAA,KAAK,EAAEoB;AAArB,OAAD,CAAZ;AACD,KAHM,MAGA,IAAIrB,IAAI,KAAK,MAAb,EAAqB;AAC1BS,MAAAA,eAAe,CAAEe,SAAD,IAAeA,SAAS,GAAG,CAA5B,CAAf;AACAnB,MAAAA,YAAY,CAAC;AAAEL,QAAAA,IAAI,EAAEoB,IAAR;AAAcnB,QAAAA,KAAK,EAAEoB;AAArB,OAAD,CAAZ;AACD,KAHM,MAGA,IAAIrB,IAAI,KAAK,QAAb,EAAuB;AAC5BK,MAAAA,YAAY,CAAC;AAAEL,QAAAA,IAAI,EAAEoB;AAAR,OAAD,CAAZ;AACA,YAAMK,IAAI,GAAG;AACXnC,QAAAA,QAAQ,EAAEQ,SAAS,CAACR,QAAV,CAAmBC,UADlB;AAEXE,QAAAA,GAAG,EAAEK,SAAS,CAACL,GAAV,CAAcC,KAFR;AAGXE,QAAAA,OAAO,EAAEE,SAAS,CAACF;AAHR,OAAb;AAKAoB,MAAAA,QAAQ,CAAC7B,aAAa,CAACsC,IAAD,CAAd,CAAR;AACAhB,MAAAA,eAAe,CAAC,CAAD,CAAf;AACD;AACF,GApBD;;AAsBA,QAAMa,QAAQ,GAAG,CACf,oBAAC,QAAD;AACE,IAAA,aAAa,EAAEH,aADjB;AAEE,IAAA,aAAa,EAAErB,SAAS,CAACR,QAF3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADe,EAKf,oBAAC,GAAD;AAAK,IAAA,aAAa,EAAE6B,aAApB;AAAmC,IAAA,QAAQ,EAAErB,SAAS,CAACL,GAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALe,EAMf,oBAAC,WAAD;AACE,IAAA,aAAa,EAAE0B,aADjB;AAEE,IAAA,YAAY,EAAErB,SAAS,CAACF,OAF1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANe,EAUf,oBAAC,OAAD;AACE,IAAA,aAAa,EAAEuB,aADjB;AAEE,IAAA,YAAY,EAAErB,SAAS,CAACF,OAF1B;AAGE,IAAA,QAAQ,EAAEE,SAAS,CAACL,GAHtB;AAIE,IAAA,aAAa,EAAEK,SAAS,CAACR,QAJ3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVe,CAAjB;AAkBA,MAAIoC,eAAe,GAAGJ,QAAQ,CAACd,YAAD,CAA9B;;AAEA,MAAIM,cAAJ,EAAoB;AAClBY,IAAAA,eAAe,GAAG,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAlB;AACD,GAFD,MAEO,IAAId,YAAJ,EAAkB;AACvBc,IAAAA,eAAe,GAAGd,YAAlB;AACD;;AAED,SACE,0CACE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAEN,IAAb;AAAmB,IAAA,WAAW,EAAEW,WAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGS,eADH,CADF,EAIE;AAAK,IAAA,SAAS,EAAEhD,MAAM,CAACiD,OAAvB;AAAgC,IAAA,OAAO,EAAE,MAAMV,WAAW,EAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACa;AAAM,IAAA,SAAS,EAAEvC,MAAM,CAACkD,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADb,CAJF,CADF;AAUD,CA5ED;;AA8EA,eAAexB,WAAf","sourcesContent":["import React, { useState, useReducer, useEffect, useCallback } from \"react\";\nimport styles from \"./MessageForm.module.css\";\nimport Modal from \"../../components/UI/Modal/Modal\";\nimport Identity from \"../../components/Identity/Identity\";\nimport Who from \"../../components/Who/Who\";\nimport FormMessage from \"../../components/FormMessage/FormMessage\";\nimport Summary from \"../../components/Summary/Summary\";\nimport FormSpinner from \"../../components/UI/Spinners/FormSpinner/FormSpinner\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { submitMessage, submitMessageReset } from \"../../store/actions\";\n\nconst initialState = {\n  identity: { identityId: null, identityName: null },\n  who: { whoId: null, whoName: null },\n  message: \" \",\n};\n\nconst formReducer = (formState, action) => {\n  switch (action.type) {\n    case \"identity\":\n      return {\n        ...formState,\n        identity: {\n          ...formState.identity,\n          ...action.value,\n        },\n      };\n    case \"who\":\n      return {\n        ...formState,\n        who: {\n          ...formState.who,\n          ...action.value,\n        },\n      };\n    case \"message\":\n      console.log(\"form that action\", action.value);\n\n      return {\n        ...formState,\n        message: action.value,\n      };\n    case \"reset\":\n      return {\n        ...initialState,\n      };\n    case \"submit\":\n      return {\n        ...formState,\n      };\n    default:\n      break;\n  }\n};\n\nconst MessageForm = () => {\n  const [formState, dispatchForm] = useReducer(formReducer, initialState);\n  const [open, setOpen] = useState(false);\n  const [sectionIndex, setSectionIndex] = useState(0);\n  const messageSuccess = useSelector((state) => state.message.messageSuccess);\n  const messageError = useSelector((state) => state.message.error);\n  const messageLoading = useSelector((state) => state.message.loading);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (messageSuccess) {\n      dispatchForm({ type: \"reset\" });\n      dispatch(submitMessageReset());\n    }\n  }, [messageSuccess, dispatch]);\n\n  const openHandler = () => setOpen((oldState) => !oldState);\n\n  const switchHandler = (type, name, formValue) => {\n    if (type === \"next\" && sectionIndex === sections.length - 1) {\n      setSectionIndex((prevIndex) => prevIndex);\n      dispatchForm({ type: name, value: formValue });\n    } else if (type === \"next\") {\n      setSectionIndex((prevIndex) => prevIndex + 1);\n      dispatchForm({ type: name, value: formValue });\n    } else if (type === \"prev\") {\n      setSectionIndex((prevIndex) => prevIndex - 1);\n      dispatchForm({ type: name, value: formValue });\n    } else if (type === \"submit\") {\n      dispatchForm({ type: name });\n      const body = {\n        identity: formState.identity.identityId,\n        who: formState.who.whoId,\n        message: formState.message,\n      };\n      dispatch(submitMessage(body));\n      setSectionIndex(0);\n    }\n  };\n\n  const sections = [\n    <Identity\n      switchHandler={switchHandler}\n      identityValue={formState.identity}\n    />,\n    <Who switchHandler={switchHandler} whoValue={formState.who} />,\n    <FormMessage\n      switchHandler={switchHandler}\n      messageValue={formState.message}\n    />,\n    <Summary\n      switchHandler={switchHandler}\n      messageValue={formState.message}\n      whoValue={formState.who}\n      identityValue={formState.identity}\n    />,\n  ];\n\n  let messageFormBody = sections[sectionIndex];\n\n  if (messageLoading) {\n    messageFormBody = <FormSpinner />;\n  } else if (messageError) {\n    messageFormBody = messageError;\n  }\n\n  return (\n    <>\n      <Modal open={open} openHandler={openHandler}>\n        {messageFormBody}\n      </Modal>\n      <div className={styles.TextBox} onClick={() => openHandler()}>\n        Enter Here <span className={styles.TypeWriter}>|</span>\n      </div>\n    </>\n  );\n};\n\nexport default MessageForm;\n"]},"metadata":{},"sourceType":"module"}