{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module basic-styles/attributecommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n/**\n * An extension of the base {@link module:core/command~Command} class, which provides utilities for a command\n * that toggles a single attribute on a text or an element.\n *\n * `AttributeCommand` uses {@link module:engine/model/document~Document#selection}\n * to decide which nodes (if any) should be changed, and applies or removes the attribute from them.\n *\n * The command checks the {@link module:engine/model/model~Model#schema} to decide if it can be enabled\n * for the current selection and to which nodes the attribute can be applied.\n *\n * @extends module:core/command~Command\n */\n\nexport default class AttributeCommand extends Command {\n  /**\n   * @param {module:core/editor/editor~Editor} editor\n   * @param {String} attributeKey Attribute that will be set by the command.\n   */\n  constructor(editor, attributeKey) {\n    super(editor);\n    /**\n     * The attribute that will be set by the command.\n     *\n     * @readonly\n     * @member {String}\n     */\n\n    this.attributeKey = attributeKey;\n    /**\n     * Flag indicating whether the command is active. The command is active when the\n     * {@link module:engine/model/selection~Selection#hasAttribute selection has the attribute} which means that:\n     *\n     * * If the selection is not empty &ndash; That the attribute is set on the first node in the selection that allows this attribute.\n     * * If the selection is empty &ndash; That the selection has the attribute itself (which means that newly typed\n     * text will have this attribute, too).\n     *\n     * @observable\n     * @readonly\n     * @member {Boolean} #value\n     */\n  }\n  /**\n   * Updates the command's {@link #value} and {@link #isEnabled} based on the current selection.\n   */\n\n\n  refresh() {\n    const model = this.editor.model;\n    const doc = model.document;\n    this.value = this._getValueFromFirstAllowedNode();\n    this.isEnabled = model.schema.checkAttributeInSelection(doc.selection, this.attributeKey);\n  }\n  /**\n   * Executes the command &mdash; applies the attribute to the selection or removes it from the selection.\n   *\n   * If the command is active (`value == true`), it will remove attributes. Otherwise, it will set attributes.\n   *\n   * The execution result differs, depending on the {@link module:engine/model/document~Document#selection}:\n   *\n   * * If the selection is on a range, the command applies the attribute to all nodes in that range\n   * (if they are allowed to have this attribute by the {@link module:engine/model/schema~Schema schema}).\n   * * If the selection is collapsed in a non-empty node, the command applies the attribute to the\n   * {@link module:engine/model/document~Document#selection} itself (note that typed characters copy attributes from the selection).\n   * * If the selection is collapsed in an empty node, the command applies the attribute to the parent node of the selection (note\n   * that the selection inherits all attributes from a node if it is in an empty node).\n   *\n   * @fires execute\n   * @param {Object} [options] Command options.\n   * @param {Boolean} [options.forceValue] If set, it will force the command behavior. If `true`, the command will apply the attribute,\n   * otherwise the command will remove the attribute.\n   * If not set, the command will look for its current value to decide what it should do.\n   */\n\n\n  execute(options = {}) {\n    const model = this.editor.model;\n    const doc = model.document;\n    const selection = doc.selection;\n    const value = options.forceValue === undefined ? !this.value : options.forceValue;\n    model.change(writer => {\n      if (selection.isCollapsed) {\n        if (value) {\n          writer.setSelectionAttribute(this.attributeKey, true);\n        } else {\n          writer.removeSelectionAttribute(this.attributeKey);\n        }\n      } else {\n        const ranges = model.schema.getValidRanges(selection.getRanges(), this.attributeKey);\n\n        for (const range of ranges) {\n          if (value) {\n            writer.setAttribute(this.attributeKey, value, range);\n          } else {\n            writer.removeAttribute(this.attributeKey, range);\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Checks the attribute value of the first node in the selection that allows the attribute.\n   * For the collapsed selection returns the selection attribute.\n   *\n   * @private\n   * @returns {Boolean} The attribute value.\n   */\n\n\n  _getValueFromFirstAllowedNode() {\n    const model = this.editor.model;\n    const schema = model.schema;\n    const selection = model.document.selection;\n\n    if (selection.isCollapsed) {\n      return selection.hasAttribute(this.attributeKey);\n    }\n\n    for (const range of selection.getRanges()) {\n      for (const item of range.getItems()) {\n        if (schema.checkAttribute(item, this.attributeKey)) {\n          return item.hasAttribute(this.attributeKey);\n        }\n      }\n    }\n\n    return false;\n  }\n\n}","map":{"version":3,"sources":["/home/anthony/Desktop/if-you-were-here/node_modules/@ckeditor/ckeditor5-basic-styles/src/attributecommand.js"],"names":["Command","AttributeCommand","constructor","editor","attributeKey","refresh","model","doc","document","value","_getValueFromFirstAllowedNode","isEnabled","schema","checkAttributeInSelection","selection","execute","options","forceValue","undefined","change","writer","isCollapsed","setSelectionAttribute","removeSelectionAttribute","ranges","getValidRanges","getRanges","range","setAttribute","removeAttribute","hasAttribute","item","getItems","checkAttribute"],"mappings":"AAAA;;;;;AAKA;;;AAIA,OAAOA,OAAP,MAAoB,sCAApB;AAEA;;;;;;;;;;;;;AAYA,eAAe,MAAMC,gBAAN,SAA+BD,OAA/B,CAAuC;AACrD;;;;AAIAE,EAAAA,WAAW,CAAEC,MAAF,EAAUC,YAAV,EAAyB;AACnC,UAAOD,MAAP;AAEA;;;;;;;AAMA,SAAKC,YAAL,GAAoBA,YAApB;AAEA;;;;;;;;;;;;AAYA;AAED;;;;;AAGAC,EAAAA,OAAO,GAAG;AACT,UAAMC,KAAK,GAAG,KAAKH,MAAL,CAAYG,KAA1B;AACA,UAAMC,GAAG,GAAGD,KAAK,CAACE,QAAlB;AAEA,SAAKC,KAAL,GAAa,KAAKC,6BAAL,EAAb;AACA,SAAKC,SAAL,GAAiBL,KAAK,CAACM,MAAN,CAAaC,yBAAb,CAAwCN,GAAG,CAACO,SAA5C,EAAuD,KAAKV,YAA5D,CAAjB;AACA;AAED;;;;;;;;;;;;;;;;;;;;;;AAoBAW,EAAAA,OAAO,CAAEC,OAAO,GAAG,EAAZ,EAAiB;AACvB,UAAMV,KAAK,GAAG,KAAKH,MAAL,CAAYG,KAA1B;AACA,UAAMC,GAAG,GAAGD,KAAK,CAACE,QAAlB;AACA,UAAMM,SAAS,GAAGP,GAAG,CAACO,SAAtB;AACA,UAAML,KAAK,GAAKO,OAAO,CAACC,UAAR,KAAuBC,SAAzB,GAAuC,CAAC,KAAKT,KAA7C,GAAqDO,OAAO,CAACC,UAA3E;AAEAX,IAAAA,KAAK,CAACa,MAAN,CAAcC,MAAM,IAAI;AACvB,UAAKN,SAAS,CAACO,WAAf,EAA6B;AAC5B,YAAKZ,KAAL,EAAa;AACZW,UAAAA,MAAM,CAACE,qBAAP,CAA8B,KAAKlB,YAAnC,EAAiD,IAAjD;AACA,SAFD,MAEO;AACNgB,UAAAA,MAAM,CAACG,wBAAP,CAAiC,KAAKnB,YAAtC;AACA;AACD,OAND,MAMO;AACN,cAAMoB,MAAM,GAAGlB,KAAK,CAACM,MAAN,CAAaa,cAAb,CAA6BX,SAAS,CAACY,SAAV,EAA7B,EAAoD,KAAKtB,YAAzD,CAAf;;AAEA,aAAM,MAAMuB,KAAZ,IAAqBH,MAArB,EAA8B;AAC7B,cAAKf,KAAL,EAAa;AACZW,YAAAA,MAAM,CAACQ,YAAP,CAAqB,KAAKxB,YAA1B,EAAwCK,KAAxC,EAA+CkB,KAA/C;AACA,WAFD,MAEO;AACNP,YAAAA,MAAM,CAACS,eAAP,CAAwB,KAAKzB,YAA7B,EAA2CuB,KAA3C;AACA;AACD;AACD;AACD,KAlBD;AAmBA;AAED;;;;;;;;;AAOAjB,EAAAA,6BAA6B,GAAG;AAC/B,UAAMJ,KAAK,GAAG,KAAKH,MAAL,CAAYG,KAA1B;AACA,UAAMM,MAAM,GAAGN,KAAK,CAACM,MAArB;AACA,UAAME,SAAS,GAAGR,KAAK,CAACE,QAAN,CAAeM,SAAjC;;AAEA,QAAKA,SAAS,CAACO,WAAf,EAA6B;AAC5B,aAAOP,SAAS,CAACgB,YAAV,CAAwB,KAAK1B,YAA7B,CAAP;AACA;;AAED,SAAM,MAAMuB,KAAZ,IAAqBb,SAAS,CAACY,SAAV,EAArB,EAA6C;AAC5C,WAAM,MAAMK,IAAZ,IAAoBJ,KAAK,CAACK,QAAN,EAApB,EAAuC;AACtC,YAAKpB,MAAM,CAACqB,cAAP,CAAuBF,IAAvB,EAA6B,KAAK3B,YAAlC,CAAL,EAAwD;AACvD,iBAAO2B,IAAI,CAACD,YAAL,CAAmB,KAAK1B,YAAxB,CAAP;AACA;AACD;AACD;;AAED,WAAO,KAAP;AACA;;AAjHoD","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module basic-styles/attributecommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n\n/**\n * An extension of the base {@link module:core/command~Command} class, which provides utilities for a command\n * that toggles a single attribute on a text or an element.\n *\n * `AttributeCommand` uses {@link module:engine/model/document~Document#selection}\n * to decide which nodes (if any) should be changed, and applies or removes the attribute from them.\n *\n * The command checks the {@link module:engine/model/model~Model#schema} to decide if it can be enabled\n * for the current selection and to which nodes the attribute can be applied.\n *\n * @extends module:core/command~Command\n */\nexport default class AttributeCommand extends Command {\n\t/**\n\t * @param {module:core/editor/editor~Editor} editor\n\t * @param {String} attributeKey Attribute that will be set by the command.\n\t */\n\tconstructor( editor, attributeKey ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The attribute that will be set by the command.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.attributeKey = attributeKey;\n\n\t\t/**\n\t\t * Flag indicating whether the command is active. The command is active when the\n\t\t * {@link module:engine/model/selection~Selection#hasAttribute selection has the attribute} which means that:\n\t\t *\n\t\t * * If the selection is not empty &ndash; That the attribute is set on the first node in the selection that allows this attribute.\n\t\t * * If the selection is empty &ndash; That the selection has the attribute itself (which means that newly typed\n\t\t * text will have this attribute, too).\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member {Boolean} #value\n\t\t */\n\t}\n\n\t/**\n\t * Updates the command's {@link #value} and {@link #isEnabled} based on the current selection.\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\n\t\tthis.value = this._getValueFromFirstAllowedNode();\n\t\tthis.isEnabled = model.schema.checkAttributeInSelection( doc.selection, this.attributeKey );\n\t}\n\n\t/**\n\t * Executes the command &mdash; applies the attribute to the selection or removes it from the selection.\n\t *\n\t * If the command is active (`value == true`), it will remove attributes. Otherwise, it will set attributes.\n\t *\n\t * The execution result differs, depending on the {@link module:engine/model/document~Document#selection}:\n\t *\n\t * * If the selection is on a range, the command applies the attribute to all nodes in that range\n\t * (if they are allowed to have this attribute by the {@link module:engine/model/schema~Schema schema}).\n\t * * If the selection is collapsed in a non-empty node, the command applies the attribute to the\n\t * {@link module:engine/model/document~Document#selection} itself (note that typed characters copy attributes from the selection).\n\t * * If the selection is collapsed in an empty node, the command applies the attribute to the parent node of the selection (note\n\t * that the selection inherits all attributes from a node if it is in an empty node).\n\t *\n\t * @fires execute\n\t * @param {Object} [options] Command options.\n\t * @param {Boolean} [options.forceValue] If set, it will force the command behavior. If `true`, the command will apply the attribute,\n\t * otherwise the command will remove the attribute.\n\t * If not set, the command will look for its current value to decide what it should do.\n\t */\n\texecute( options = {} ) {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst selection = doc.selection;\n\t\tconst value = ( options.forceValue === undefined ) ? !this.value : options.forceValue;\n\n\t\tmodel.change( writer => {\n\t\t\tif ( selection.isCollapsed ) {\n\t\t\t\tif ( value ) {\n\t\t\t\t\twriter.setSelectionAttribute( this.attributeKey, true );\n\t\t\t\t} else {\n\t\t\t\t\twriter.removeSelectionAttribute( this.attributeKey );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst ranges = model.schema.getValidRanges( selection.getRanges(), this.attributeKey );\n\n\t\t\t\tfor ( const range of ranges ) {\n\t\t\t\t\tif ( value ) {\n\t\t\t\t\t\twriter.setAttribute( this.attributeKey, value, range );\n\t\t\t\t\t} else {\n\t\t\t\t\t\twriter.removeAttribute( this.attributeKey, range );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Checks the attribute value of the first node in the selection that allows the attribute.\n\t * For the collapsed selection returns the selection attribute.\n\t *\n\t * @private\n\t * @returns {Boolean} The attribute value.\n\t */\n\t_getValueFromFirstAllowedNode() {\n\t\tconst model = this.editor.model;\n\t\tconst schema = model.schema;\n\t\tconst selection = model.document.selection;\n\n\t\tif ( selection.isCollapsed ) {\n\t\t\treturn selection.hasAttribute( this.attributeKey );\n\t\t}\n\n\t\tfor ( const range of selection.getRanges() ) {\n\t\t\tfor ( const item of range.getItems() ) {\n\t\t\t\tif ( schema.checkAttribute( item, this.attributeKey ) ) {\n\t\t\t\t\treturn item.hasAttribute( this.attributeKey );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}