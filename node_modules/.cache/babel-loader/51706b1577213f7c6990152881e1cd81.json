{"ast":null,"code":"import * as actionTypes from \"../actions/actionTypes\";\nconst initialState = {\n  posts: [],\n  currentPost: null,\n  filteredPosts: [],\n  filters: {\n    who: null,\n    identity: null\n  },\n  sort: null,\n  success: false,\n  loading: false,\n  error: null\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SUBMIT_POST_START:\n      return { ...state,\n        loading: true,\n        error: null\n      };\n\n    case actionTypes.SUBMIT_POST_SUCCESS:\n      return { ...state,\n        posts: [action.post, ...state.posts],\n        success: true,\n        loading: true\n      };\n\n    case actionTypes.SUBMIT_POST_FAIL:\n      return { ...state,\n        loading: false,\n        error: action.error\n      };\n\n    case actionTypes.SUBMIT_POST_RESET:\n      return { ...state,\n        loading: false,\n        error: null,\n        success: false\n      };\n\n    case actionTypes.FILTER_POSTS_START:\n      return { ...state,\n        loading: true,\n        error: null\n      };\n\n    case actionTypes.FILTER_POSTS_FAIL:\n      return { ...state,\n        loading: false,\n        error: action.error\n      };\n\n    case actionTypes.FILTER_POSTS_ADD:\n      return { ...state,\n        filters: { ...state.filters,\n          [action.name]: action.filter\n        }\n      };\n\n    case actionTypes.FILTER_POSTS_REMOVE:\n      return { ...state,\n        filters: { ...state.filters,\n          [action.name]: null\n        }\n      };\n\n    case actionTypes.FILTER_POSTS:\n      const {\n        who,\n        identity\n      } = state.filters;\n      const postsCopy = [...state.posts];\n      const newFilteredPosts = who && identity ? postsCopy.filter(post => post.who === who && post.identity === identity) : postsCopy.filter(post => post.who === who || post.identity === identity);\n      return { ...state,\n        filteredPosts: [...newFilteredPosts],\n        loading: false,\n        error: null\n      };\n\n    case actionTypes.FILTER_RESET:\n      return { ...state,\n        filteredPosts: [],\n        loading: false,\n        error: null\n      };\n\n    case actionTypes.SORT_POSTS_START:\n      return { ...state,\n        loading: true,\n        error: null\n      };\n\n    case actionTypes.SORT_POSTS_FAIL:\n      return { ...state,\n        loading: false,\n        error: action.error\n      };\n\n    case actionTypes.SORT_POSTS_ADD:\n      return { ...state,\n        sort: { ...state.sort,\n          [action.name]: action.filter\n        }\n      };\n\n    case actionTypes.SORT_POSTS_REMOVE:\n      return { ...state,\n        sort: { ...state.sort,\n          [action.name]: false\n        }\n      };\n\n    case actionTypes.SORT_POSTS:\n      const {\n        newest,\n        oldest\n      } = state.sort;\n      const filteredCopy = state.filteredPosts.length > 0 ? [...state.filteredPosts] : [...state.posts]; // const sortedPosts =\n      //   who && identity\n      //     ? postsCopy.filter(\n      //         post => post.who === who && post.identity === identity\n      //       )\n      //     : postsCopy.filter(\n      //         post => post.who === who || post.identity === identity\n      //       );\n\n      return { ...state,\n        // filteredPosts: [...newFilteredPosts],\n        loading: false,\n        error: null\n      };\n\n    case actionTypes.SORT_RESET:\n      return { ...state,\n        filteredPosts: [],\n        loading: false,\n        error: null\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/anthony/Desktop/if-you-were-here/src/store/reducers/posts.js"],"names":["actionTypes","initialState","posts","currentPost","filteredPosts","filters","who","identity","sort","success","loading","error","reducer","state","action","type","SUBMIT_POST_START","SUBMIT_POST_SUCCESS","post","SUBMIT_POST_FAIL","SUBMIT_POST_RESET","FILTER_POSTS_START","FILTER_POSTS_FAIL","FILTER_POSTS_ADD","name","filter","FILTER_POSTS_REMOVE","FILTER_POSTS","postsCopy","newFilteredPosts","FILTER_RESET","SORT_POSTS_START","SORT_POSTS_FAIL","SORT_POSTS_ADD","SORT_POSTS_REMOVE","SORT_POSTS","newest","oldest","filteredCopy","length","SORT_RESET"],"mappings":"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","sourcesContent":["import * as actionTypes from \"../actions/actionTypes\";\n\nconst initialState = {\n  posts: [],\n  currentPost: null,\n  filteredPosts: [],\n  filters: { who: null, identity: null },\n  sort: null,\n  success: false,\n  loading: false,\n  error: null\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SUBMIT_POST_START:\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case actionTypes.SUBMIT_POST_SUCCESS:\n      return {\n        ...state,\n        posts: [action.post, ...state.posts],\n        success: true,\n        loading: true\n      };\n    case actionTypes.SUBMIT_POST_FAIL:\n      return {\n        ...state,\n        loading: false,\n        error: action.error\n      };\n    case actionTypes.SUBMIT_POST_RESET:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n        success: false\n      };\n    case actionTypes.FILTER_POSTS_START:\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case actionTypes.FILTER_POSTS_FAIL:\n      return {\n        ...state,\n        loading: false,\n        error: action.error\n      };\n    case actionTypes.FILTER_POSTS_ADD:\n      return {\n        ...state,\n        filters: {\n          ...state.filters,\n          [action.name]: action.filter\n        }\n      };\n    case actionTypes.FILTER_POSTS_REMOVE:\n      return {\n        ...state,\n        filters: {\n          ...state.filters,\n          [action.name]: null\n        }\n      };\n    case actionTypes.FILTER_POSTS:\n      const { who, identity } = state.filters;\n      const postsCopy = [...state.posts];\n      const newFilteredPosts =\n        who && identity\n          ? postsCopy.filter(\n              post => post.who === who && post.identity === identity\n            )\n          : postsCopy.filter(\n              post => post.who === who || post.identity === identity\n            );\n      return {\n        ...state,\n        filteredPosts: [...newFilteredPosts],\n        loading: false,\n        error: null\n      };\n    case actionTypes.FILTER_RESET:\n      return {\n        ...state,\n        filteredPosts: [],\n        loading: false,\n        error: null\n      };\n    case actionTypes.SORT_POSTS_START:\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case actionTypes.SORT_POSTS_FAIL:\n      return {\n        ...state,\n        loading: false,\n        error: action.error\n      };\n    case actionTypes.SORT_POSTS_ADD:\n      return {\n        ...state,\n        sort: {\n          ...state.sort,\n          [action.name]: action.filter\n        }\n      };\n    case actionTypes.SORT_POSTS_REMOVE:\n      return {\n        ...state,\n        sort: {\n          ...state.sort,\n          [action.name]: false\n        }\n      };\n    case actionTypes.SORT_POSTS:\n      const { newest, oldest } = state.sort;\n      const filteredCopy =\n        state.filteredPosts.length > 0\n          ? [...state.filteredPosts]\n          : [...state.posts];\n      // const sortedPosts =\n      //   who && identity\n      //     ? postsCopy.filter(\n      //         post => post.who === who && post.identity === identity\n      //       )\n      //     : postsCopy.filter(\n      //         post => post.who === who || post.identity === identity\n      //       );\n      return {\n        ...state,\n        // filteredPosts: [...newFilteredPosts],\n        loading: false,\n        error: null\n      };\n    case actionTypes.SORT_RESET:\n      return {\n        ...state,\n        filteredPosts: [],\n        loading: false,\n        error: null\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}