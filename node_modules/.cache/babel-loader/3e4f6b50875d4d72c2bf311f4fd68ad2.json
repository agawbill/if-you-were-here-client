{"ast":null,"code":"import * as actionTypes from \"./actionTypes\";\nexport const fetchMessages = () => {\n  return async dispatch => {\n    try {\n      dispatch(submitMessageStart());\n      const response = await fetch(\"api/messages\", {\n        method: \"GET\",\n        mode: \"cors\",\n        cache: \"no-cache\",\n        credentials: \"same-origin\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const data = await response.json();\n      dispatch(fetchMessagesSuccess(data));\n    } catch (err) {\n      dispatch(fetchMessagesFail(err));\n    }\n  };\n};\nexport const fetchMessagesSuccess = messages => {\n  return {\n    type: actionTypes.FETCH_MESSAGES_SUCCESS,\n    messages\n  };\n};\nexport const fetchMessagesFail = messages => {\n  return {\n    type: actionTypes.FETCH_MESSAGES_SUCCESS,\n    messages\n  };\n};\nexport const submitMessage = message => {\n  return async dispatch => {\n    try {\n      dispatch(submitMessageStart());\n      const response = await fetch(\"api/messages\", {\n        method: \"POST\",\n        mode: \"cors\",\n        cache: \"no-cache\",\n        credentials: \"same-origin\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(message)\n      });\n      const data = await response.json();\n      dispatch(submitMessageSuccess(data));\n    } catch (err) {\n      dispatch(submitMessageFail(err));\n    }\n  };\n};\nexport const submitMessageStart = () => {\n  return {\n    type: actionTypes.SUBMIT_MESSAGE_START\n  };\n};\nexport const submitMessageSuccess = message => {\n  return {\n    type: actionTypes.SUBMIT_MESSAGE_SUCCESS,\n    message\n  };\n};\nexport const submitMessageFail = error => {\n  return {\n    type: actionTypes.SUBMIT_MESSAGE_FAIL,\n    error: error.message\n  };\n};\nexport const submitMessageReset = () => {\n  return {\n    type: actionTypes.SUBMIT_MESSAGE_RESET\n  };\n};\nexport const fetchMessage = messageId => {\n  return async dispatch => {\n    try {\n      dispatch(fetchMessageStart());\n      const response = await fetch(`api/messages/${messageId}`, {\n        method: \"GET\",\n        mode: \"cors\",\n        cache: \"no-cache\",\n        credentials: \"same-origin\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const data = await response.json();\n      console.log(data);\n      dispatch(fetchMessageSuccess(data));\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchMessageFail(err));\n    }\n  };\n};\nexport const fetchMessageStart = () => {\n  return {\n    type: actionTypes.FETCH_MESSAGE_START\n  };\n};\nexport const fetchMessageSuccess = message => {\n  return {\n    type: actionTypes.FETCH_MESSAGE_START,\n    message\n  };\n};\nexport const fetchMessageFail = error => {\n  return {\n    type: actionTypes.FETCH_MESSAGE_FAIL,\n    error\n  };\n};\nexport const resetMessage = () => {\n  return {\n    type: actionTypes.RESET_MESSAGE\n  };\n};","map":{"version":3,"sources":["/home/anthony/Desktop/if-you-were-here/client/src/store/actions/messages.js"],"names":["actionTypes","fetchMessages","dispatch","submitMessageStart","response","fetch","method","mode","cache","credentials","headers","data","json","fetchMessagesSuccess","err","fetchMessagesFail","messages","type","FETCH_MESSAGES_SUCCESS","submitMessage","message","body","JSON","stringify","submitMessageSuccess","submitMessageFail","SUBMIT_MESSAGE_START","SUBMIT_MESSAGE_SUCCESS","error","SUBMIT_MESSAGE_FAIL","submitMessageReset","SUBMIT_MESSAGE_RESET","fetchMessage","messageId","fetchMessageStart","console","log","fetchMessageSuccess","fetchMessageFail","FETCH_MESSAGE_START","FETCH_MESSAGE_FAIL","resetMessage","RESET_MESSAGE"],"mappings":"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","sourcesContent":["import * as actionTypes from \"./actionTypes\";\n\nexport const fetchMessages = () => {\n  return async (dispatch) => {\n    try {\n      dispatch(submitMessageStart());\n      const response = await fetch(\"api/messages\", {\n        method: \"GET\",\n        mode: \"cors\",\n        cache: \"no-cache\",\n        credentials: \"same-origin\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      const data = await response.json();\n      dispatch(fetchMessagesSuccess(data));\n    } catch (err) {\n      dispatch(fetchMessagesFail(err));\n    }\n  };\n};\n\nexport const fetchMessagesSuccess = (messages) => {\n  return {\n    type: actionTypes.FETCH_MESSAGES_SUCCESS,\n    messages,\n  };\n};\n\nexport const fetchMessagesFail = (messages) => {\n  return {\n    type: actionTypes.FETCH_MESSAGES_SUCCESS,\n    messages,\n  };\n};\n\nexport const submitMessage = (message) => {\n  return async (dispatch) => {\n    try {\n      dispatch(submitMessageStart());\n      const response = await fetch(\"api/messages\", {\n        method: \"POST\",\n        mode: \"cors\",\n        cache: \"no-cache\",\n        credentials: \"same-origin\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(message),\n      });\n      const data = await response.json();\n      dispatch(submitMessageSuccess(data));\n    } catch (err) {\n      dispatch(submitMessageFail(err));\n    }\n  };\n};\n\nexport const submitMessageStart = () => {\n  return {\n    type: actionTypes.SUBMIT_MESSAGE_START,\n  };\n};\n\nexport const submitMessageSuccess = (message) => {\n  return {\n    type: actionTypes.SUBMIT_MESSAGE_SUCCESS,\n    message,\n  };\n};\n\nexport const submitMessageFail = (error) => {\n  return {\n    type: actionTypes.SUBMIT_MESSAGE_FAIL,\n    error: error.message,\n  };\n};\n\nexport const submitMessageReset = () => {\n  return {\n    type: actionTypes.SUBMIT_MESSAGE_RESET,\n  };\n};\n\nexport const fetchMessage = (messageId) => {\n  return async (dispatch) => {\n    try {\n      dispatch(fetchMessageStart());\n      const response = await fetch(`api/messages/${messageId}`, {\n        method: \"GET\",\n        mode: \"cors\",\n        cache: \"no-cache\",\n        credentials: \"same-origin\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      const data = await response.json();\n      console.log(data);\n      dispatch(fetchMessageSuccess(data));\n    } catch (err) {\n      console.log(err);\n\n      dispatch(fetchMessageFail(err));\n    }\n  };\n};\n\nexport const fetchMessageStart = () => {\n  return {\n    type: actionTypes.FETCH_MESSAGE_START,\n  };\n};\n\nexport const fetchMessageSuccess = (message) => {\n  return {\n    type: actionTypes.FETCH_MESSAGE_START,\n    message,\n  };\n};\n\nexport const fetchMessageFail = (error) => {\n  return {\n    type: actionTypes.FETCH_MESSAGE_FAIL,\n    error,\n  };\n};\n\nexport const resetMessage = () => {\n  return {\n    type: actionTypes.RESET_MESSAGE,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}