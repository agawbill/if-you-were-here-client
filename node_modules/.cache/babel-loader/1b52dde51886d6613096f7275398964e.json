{"ast":null,"code":"var _jsxFileName = \"/home/anthony/Desktop/if-you-were-here/client/src/components/FullMessage/FullMessage.js\";\nimport React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport parse from \"html-react-parser\";\nimport styles from \"./FullMessage.module.css\";\nimport { fetchMessage, resetMessage } from \"../../store/actions\";\nimport { useParams, withRouter } from \"react-router-dom\";\nimport Spinner from \"../UI/Spinners/FormSpinner/FormSpinner\";\nimport withErrorHandler from \"../../hoc/withErrorHandler\";\n\nconst FullMessage = props => {\n  const currentMessage = useSelector(state => state.message.currentMessage);\n  const setSuccess = useSelector(state => state.message.setSuccess);\n  const message = currentMessage ? currentMessage : props.history.location.passedMessage;\n  const dispatch = useDispatch();\n  const {\n    id\n  } = useParams();\n  console.log(message);\n  useEffect(() => {\n    const passedMessage = props.history.location.passedMessage;\n    console.log(\"current messages\", currentMessage);\n    console.log(\"current messages\", message); // if (setSuccess === false) {\n    //   dispatch(resetMessage());\n    //   props.history.push(\"/\");\n    // }\n\n    if (!passedMessage && setSuccess === null) {\n      console.log(\"set success\", setSuccess);\n      console.log(\"inside messages\", currentMessage);\n      console.log(\"it's here\");\n      dispatch(fetchMessage(id));\n    }\n\n    return () => setSuccess === false ? dispatch(resetMessage()) : null;\n  }, [message]);\n  let messageBody = React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  });\n\n  if (message) {\n    const date = new Date(message.createdAt).toDateString();\n    messageBody = React.createElement(React.Fragment, null, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \"To my\", \" \", React.createElement(\"span\", {\n      className: styles.MessageAttribute,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, message.who.name)), \",\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: styles.MessageDate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, date)), React.createElement(\"span\", {\n      className: styles.MessageMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, parse(message.message)), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"From your\", \" \", React.createElement(\"span\", {\n      className: styles.MessageAttribute,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, message.identity.name))));\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, messageBody);\n};\n\nexport default withErrorHandler(withRouter(FullMessage));","map":{"version":3,"sources":["/home/anthony/Desktop/if-you-were-here/client/src/components/FullMessage/FullMessage.js"],"names":["React","useEffect","useSelector","useDispatch","parse","styles","fetchMessage","resetMessage","useParams","withRouter","Spinner","withErrorHandler","FullMessage","props","currentMessage","state","message","setSuccess","history","location","passedMessage","dispatch","id","console","log","messageBody","date","Date","createdAt","toDateString","MessageAttribute","who","name","MessageDate","MessageMessage","identity"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport parse from \"html-react-parser\";\nimport styles from \"./FullMessage.module.css\";\nimport { fetchMessage, resetMessage } from \"../../store/actions\";\nimport { useParams, withRouter } from \"react-router-dom\";\nimport Spinner from \"../UI/Spinners/FormSpinner/FormSpinner\";\nimport withErrorHandler from \"../../hoc/withErrorHandler\";\n\nconst FullMessage = (props) => {\n  const currentMessage = useSelector((state) => state.message.currentMessage);\n  const setSuccess = useSelector((state) => state.message.setSuccess);\n  const message = currentMessage\n    ? currentMessage\n    : props.history.location.passedMessage;\n  const dispatch = useDispatch();\n  const { id } = useParams();\n\n  console.log(message);\n\n  useEffect(() => {\n    const passedMessage = props.history.location.passedMessage;\n\n    console.log(\"current messages\", currentMessage);\n    console.log(\"current messages\", message);\n\n    // if (setSuccess === false) {\n    //   dispatch(resetMessage());\n    //   props.history.push(\"/\");\n    // }\n\n    if (!passedMessage && setSuccess === null) {\n      console.log(\"set success\", setSuccess);\n\n      console.log(\"inside messages\", currentMessage);\n\n      console.log(\"it's here\");\n\n      dispatch(fetchMessage(id));\n    }\n    return () => (setSuccess === false ? dispatch(resetMessage()) : null);\n  }, [message]);\n\n  let messageBody = <Spinner />;\n\n  if (message) {\n    const date = new Date(message.createdAt).toDateString();\n    messageBody = (\n      <>\n        <p>\n          <b>\n            To my{\" \"}\n            <span className={styles.MessageAttribute}>{message.who.name}</span>\n          </b>\n          ,\n          <br />\n          <span className={styles.MessageDate}>{date}</span>\n        </p>\n        <span className={styles.MessageMessage}>{parse(message.message)}</span>\n        <p>\n          <b>\n            From your{\" \"}\n            <span className={styles.MessageAttribute}>\n              {message.identity.name}\n            </span>\n          </b>\n        </p>\n      </>\n    );\n  }\n\n  return <div>{messageBody}</div>;\n};\n\nexport default withErrorHandler(withRouter(FullMessage));\n"]},"metadata":{},"sourceType":"module"}