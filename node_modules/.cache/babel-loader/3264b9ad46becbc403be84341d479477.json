{"ast":null,"code":"import _regeneratorRuntime from\"/home/anthony/Desktop/if-you-were-here/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/anthony/Desktop/if-you-were-here/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import*as actionTypes from\"./actionTypes\";export var fetchMessage=function fetchMessage(messageId){return(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var response,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;dispatch(fetchMessageStart());_context.next=4;return fetch(\"/api/messages/\".concat(messageId),{method:\"GET\",mode:\"cors\",cache:\"no-cache\",credentials:\"same-origin\",headers:{\"Content-Type\":\"application/json\"}});case 4:response=_context.sent;_context.next=7;return response.json();case 7:data=_context.sent;if(data.success){_context.next=10;break;}throw new Error();case 10:dispatch(fetchMessageSuccess(data.data));_context.next=16;break;case 13:_context.prev=13;_context.t0=_context[\"catch\"](0);dispatch(fetchMessageFail(\"Either this message doesn't exist or has been deleted.\"));case 16:case\"end\":return _context.stop();}}},_callee,null,[[0,13]]);}));return function(_x){return _ref.apply(this,arguments);};}());};export var fetchMessageStart=function fetchMessageStart(){return{type:actionTypes.FETCH_MESSAGE_START};};export var fetchMessageSuccess=function fetchMessageSuccess(message){return{type:actionTypes.FETCH_MESSAGE_SUCCESS,message:message};};export var fetchMessageFail=function fetchMessageFail(error){return{type:actionTypes.FETCH_MESSAGE_FAIL,error:error};};export var resetMessage=function resetMessage(){return{type:actionTypes.RESET_MESSAGE};};","map":{"version":3,"sources":["/home/anthony/Desktop/if-you-were-here/client/src/store/actions/message.js"],"names":["actionTypes","fetchMessage","messageId","dispatch","fetchMessageStart","fetch","method","mode","cache","credentials","headers","response","json","data","success","Error","fetchMessageSuccess","fetchMessageFail","type","FETCH_MESSAGE_START","message","FETCH_MESSAGE_SUCCESS","error","FETCH_MESSAGE_FAIL","resetMessage","RESET_MESSAGE"],"mappings":"qUAAA,MAAO,GAAKA,CAAAA,WAAZ,KAA6B,eAA7B,CAEA,MAAO,IAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,SAAD,CAAe,CACzC,gGAAO,iBAAOC,QAAP,oJAEHA,QAAQ,CAACC,iBAAiB,EAAlB,CAAR,CAFG,sBAGoBC,CAAAA,KAAK,yBAAkBH,SAAlB,EAA+B,CACzDI,MAAM,CAAE,KADiD,CAEzDC,IAAI,CAAE,MAFmD,CAGzDC,KAAK,CAAE,UAHkD,CAIzDC,WAAW,CAAE,aAJ4C,CAKzDC,OAAO,CAAE,CACP,eAAgB,kBADT,CALgD,CAA/B,CAHzB,QAGGC,QAHH,qCAYgBA,CAAAA,QAAQ,CAACC,IAAT,EAZhB,QAYGC,IAZH,kBAaEA,IAAI,CAACC,OAbP,+BAcK,IAAIC,CAAAA,KAAJ,EAdL,SAgBHZ,QAAQ,CAACa,mBAAmB,CAACH,IAAI,CAACA,IAAN,CAApB,CAAR,CAhBG,iFAkBHV,QAAQ,CACNc,gBAAgB,CACd,wDADc,CADV,CAAR,CAlBG,qEAAP,gEAyBD,CA1BM,CA4BP,MAAO,IAAMb,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,EAAM,CACrC,MAAO,CACLc,IAAI,CAAElB,WAAW,CAACmB,mBADb,CAAP,CAGD,CAJM,CAMP,MAAO,IAAMH,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACI,OAAD,CAAa,CAC9C,MAAO,CACLF,IAAI,CAAElB,WAAW,CAACqB,qBADb,CAELD,OAAO,CAAPA,OAFK,CAAP,CAID,CALM,CAOP,MAAO,IAAMH,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACK,KAAD,CAAW,CACzC,MAAO,CACLJ,IAAI,CAAElB,WAAW,CAACuB,kBADb,CAELD,KAAK,CAALA,KAFK,CAAP,CAID,CALM,CAOP,MAAO,IAAME,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,CAChC,MAAO,CACLN,IAAI,CAAElB,WAAW,CAACyB,aADb,CAAP,CAGD,CAJM","sourcesContent":["import * as actionTypes from \"./actionTypes\";\n\nexport const fetchMessage = (messageId) => {\n  return async (dispatch) => {\n    try {\n      dispatch(fetchMessageStart());\n      const response = await fetch(`/api/messages/${messageId}`, {\n        method: \"GET\",\n        mode: \"cors\",\n        cache: \"no-cache\",\n        credentials: \"same-origin\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      const data = await response.json();\n      if (!data.success) {\n        throw new Error();\n      }\n      dispatch(fetchMessageSuccess(data.data));\n    } catch (err) {\n      dispatch(\n        fetchMessageFail(\n          \"Either this message doesn't exist or has been deleted.\"\n        )\n      );\n    }\n  };\n};\n\nexport const fetchMessageStart = () => {\n  return {\n    type: actionTypes.FETCH_MESSAGE_START,\n  };\n};\n\nexport const fetchMessageSuccess = (message) => {\n  return {\n    type: actionTypes.FETCH_MESSAGE_SUCCESS,\n    message,\n  };\n};\n\nexport const fetchMessageFail = (error) => {\n  return {\n    type: actionTypes.FETCH_MESSAGE_FAIL,\n    error,\n  };\n};\n\nexport const resetMessage = () => {\n  return {\n    type: actionTypes.RESET_MESSAGE,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}