{"ast":null,"code":"var _jsxFileName = \"/home/anthony/Desktop/if-you-were-here/client/src/containers/LoadMoreContainer/LoadMoreContainer.js\";\nimport React, { useState, useEffect } from \"react\";\nimport MessageSnapshot from \"../../components/MessageSnapshot/MessageSnapshot\";\nimport LoadMore from \"../../components/UI/Buttons/LoadMore/LoadMore\"; //in the future, if there were to be more than 1000 posts lets say, I would use the\n//useEffect hook to call the api to load another 500 posts once messageCutoff reached a certain point (like 470)\n// loading 500 posts at a time.\n\nconst LoadMoreContainer = props => {\n  const [messagesCutoff, setMessagesCutoff] = useState(14);\n  const [filteredCutoff, setFilteredCutoff] = useState(14); //calculate how many messages can be loaded that aren't already displayed\n  //if each respective value is greater than 0, the loadmore button should display\n\n  const filteredCalculation = props.filteredMessages.length - filteredCutoff;\n  const messageCalculation = props.messages.length - messagesCutoff;\n  useEffect(() => {\n    const skip = props.messages.messageCalculation;\n  }, []); //calculate the marker (the amount of posts to load... another 14, or if there are less than 14 left to load,\n  //the remaining amount) and set the cutoff\n\n  const loadMoreFilteredMessages = count => {\n    const marker = filteredCalculation >= count ? count : filteredCalculation;\n    setFilteredCutoff(prevState => prevState + marker);\n  };\n\n  const loadMoreMessages = count => {\n    const marker = messageCalculation >= count ? count : messageCalculation;\n    setMessagesCutoff(prevState => prevState + marker);\n  };\n\n  let loadMessages = null;\n  let loadedMessages = null; //display the loadmore for unfiltered messages, or display the loadmore (button and messages) for filtered messages.\n\n  if (props.filteredMessages.length > 14) {\n    loadMessages = React.createElement(LoadMore, {\n      show: filteredCalculation > 0,\n      loadMoreMessages: loadMoreFilteredMessages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    });\n    loadedMessages = props.filteredMessages.slice(14, filteredCutoff).map((message, index) => {\n      return React.createElement(MessageSnapshot, {\n        key: index,\n        entry: message,\n        marker: index + 14,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      });\n    });\n  } else if (props.messages.length > 14 && props.filteredMessages.length === 0) {\n    loadMessages = React.createElement(LoadMore, {\n      show: messageCalculation > 0,\n      loadMoreMessages: loadMoreMessages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    });\n    loadedMessages = props.messages.slice(14, messagesCutoff).map((message, index) => {\n      return React.createElement(MessageSnapshot, {\n        key: index,\n        entry: message,\n        marker: index + 14,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      });\n    });\n  }\n\n  return React.createElement(React.Fragment, null, loadedMessages, loadMessages);\n};\n\nexport default LoadMoreContainer;","map":{"version":3,"sources":["/home/anthony/Desktop/if-you-were-here/client/src/containers/LoadMoreContainer/LoadMoreContainer.js"],"names":["React","useState","useEffect","MessageSnapshot","LoadMore","LoadMoreContainer","props","messagesCutoff","setMessagesCutoff","filteredCutoff","setFilteredCutoff","filteredCalculation","filteredMessages","length","messageCalculation","messages","skip","loadMoreFilteredMessages","count","marker","prevState","loadMoreMessages","loadMessages","loadedMessages","slice","map","message","index"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,eAAP,MAA4B,kDAA5B;AACA,OAAOC,QAAP,MAAqB,+CAArB,C,CAEA;AACA;AACA;;AAEA,MAAMC,iBAAiB,GAAIC,KAAD,IAAW;AACnC,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCP,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACQ,cAAD,EAAiBC,iBAAjB,IAAsCT,QAAQ,CAAC,EAAD,CAApD,CAFmC,CAInC;AACA;;AACA,QAAMU,mBAAmB,GAAGL,KAAK,CAACM,gBAAN,CAAuBC,MAAvB,GAAgCJ,cAA5D;AACA,QAAMK,kBAAkB,GAAGR,KAAK,CAACS,QAAN,CAAeF,MAAf,GAAwBN,cAAnD;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMc,IAAI,GAAGV,KAAK,CAACS,QAAN,CAAeD,kBAA5B;AACD,GAFQ,EAEN,EAFM,CAAT,CATmC,CAanC;AACA;;AACA,QAAMG,wBAAwB,GAAIC,KAAD,IAAW;AAC1C,UAAMC,MAAM,GAAGR,mBAAmB,IAAIO,KAAvB,GAA+BA,KAA/B,GAAuCP,mBAAtD;AACAD,IAAAA,iBAAiB,CAAEU,SAAD,IAAeA,SAAS,GAAGD,MAA5B,CAAjB;AACD,GAHD;;AAKA,QAAME,gBAAgB,GAAIH,KAAD,IAAW;AAClC,UAAMC,MAAM,GAAGL,kBAAkB,IAAII,KAAtB,GAA8BA,KAA9B,GAAsCJ,kBAArD;AACAN,IAAAA,iBAAiB,CAAEY,SAAD,IAAeA,SAAS,GAAGD,MAA5B,CAAjB;AACD,GAHD;;AAKA,MAAIG,YAAY,GAAG,IAAnB;AACA,MAAIC,cAAc,GAAG,IAArB,CA1BmC,CA4BnC;;AACA,MAAIjB,KAAK,CAACM,gBAAN,CAAuBC,MAAvB,GAAgC,EAApC,EAAwC;AACtCS,IAAAA,YAAY,GACV,oBAAC,QAAD;AACE,MAAA,IAAI,EAAEX,mBAAmB,GAAG,CAD9B;AAEE,MAAA,gBAAgB,EAAEM,wBAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAOAM,IAAAA,cAAc,GAAGjB,KAAK,CAACM,gBAAN,CACdY,KADc,CACR,EADQ,EACJf,cADI,EAEdgB,GAFc,CAEV,CAACC,OAAD,EAAUC,KAAV,KAAoB;AACvB,aACE,oBAAC,eAAD;AACE,QAAA,GAAG,EAAEA,KADP;AAEE,QAAA,KAAK,EAAED,OAFT;AAGE,QAAA,MAAM,EAAEC,KAAK,GAAG,EAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAOD,KAVc,CAAjB;AAWD,GAnBD,MAmBO,IACLrB,KAAK,CAACS,QAAN,CAAeF,MAAf,GAAwB,EAAxB,IACAP,KAAK,CAACM,gBAAN,CAAuBC,MAAvB,KAAkC,CAF7B,EAGL;AACAS,IAAAA,YAAY,GACV,oBAAC,QAAD;AACE,MAAA,IAAI,EAAER,kBAAkB,GAAG,CAD7B;AAEE,MAAA,gBAAgB,EAAEO,gBAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAOAE,IAAAA,cAAc,GAAGjB,KAAK,CAACS,QAAN,CACdS,KADc,CACR,EADQ,EACJjB,cADI,EAEdkB,GAFc,CAEV,CAACC,OAAD,EAAUC,KAAV,KAAoB;AACvB,aACE,oBAAC,eAAD;AACE,QAAA,GAAG,EAAEA,KADP;AAEE,QAAA,KAAK,EAAED,OAFT;AAGE,QAAA,MAAM,EAAEC,KAAK,GAAG,EAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAOD,KAVc,CAAjB;AAWD;;AAED,SACE,0CACGJ,cADH,EAEGD,YAFH,CADF;AAMD,CA9ED;;AAgFA,eAAejB,iBAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport MessageSnapshot from \"../../components/MessageSnapshot/MessageSnapshot\";\nimport LoadMore from \"../../components/UI/Buttons/LoadMore/LoadMore\";\n\n//in the future, if there were to be more than 1000 posts lets say, I would use the\n//useEffect hook to call the api to load another 500 posts once messageCutoff reached a certain point (like 470)\n// loading 500 posts at a time.\n\nconst LoadMoreContainer = (props) => {\n  const [messagesCutoff, setMessagesCutoff] = useState(14);\n  const [filteredCutoff, setFilteredCutoff] = useState(14);\n\n  //calculate how many messages can be loaded that aren't already displayed\n  //if each respective value is greater than 0, the loadmore button should display\n  const filteredCalculation = props.filteredMessages.length - filteredCutoff;\n  const messageCalculation = props.messages.length - messagesCutoff;\n\n  useEffect(() => {\n    const skip = props.messages.messageCalculation;\n  }, []);\n\n  //calculate the marker (the amount of posts to load... another 14, or if there are less than 14 left to load,\n  //the remaining amount) and set the cutoff\n  const loadMoreFilteredMessages = (count) => {\n    const marker = filteredCalculation >= count ? count : filteredCalculation;\n    setFilteredCutoff((prevState) => prevState + marker);\n  };\n\n  const loadMoreMessages = (count) => {\n    const marker = messageCalculation >= count ? count : messageCalculation;\n    setMessagesCutoff((prevState) => prevState + marker);\n  };\n\n  let loadMessages = null;\n  let loadedMessages = null;\n\n  //display the loadmore for unfiltered messages, or display the loadmore (button and messages) for filtered messages.\n  if (props.filteredMessages.length > 14) {\n    loadMessages = (\n      <LoadMore\n        show={filteredCalculation > 0}\n        loadMoreMessages={loadMoreFilteredMessages}\n      />\n    );\n\n    loadedMessages = props.filteredMessages\n      .slice(14, filteredCutoff)\n      .map((message, index) => {\n        return (\n          <MessageSnapshot\n            key={index}\n            entry={message}\n            marker={index + 14}\n          ></MessageSnapshot>\n        );\n      });\n  } else if (\n    props.messages.length > 14 &&\n    props.filteredMessages.length === 0\n  ) {\n    loadMessages = (\n      <LoadMore\n        show={messageCalculation > 0}\n        loadMoreMessages={loadMoreMessages}\n      />\n    );\n\n    loadedMessages = props.messages\n      .slice(14, messagesCutoff)\n      .map((message, index) => {\n        return (\n          <MessageSnapshot\n            key={index}\n            entry={message}\n            marker={index + 14}\n          ></MessageSnapshot>\n        );\n      });\n  }\n\n  return (\n    <>\n      {loadedMessages}\n      {loadMessages}\n    </>\n  );\n};\n\nexport default LoadMoreContainer;\n"]},"metadata":{},"sourceType":"module"}