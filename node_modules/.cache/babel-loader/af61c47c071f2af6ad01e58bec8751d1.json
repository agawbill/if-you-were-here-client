{"ast":null,"code":"var _jsxFileName = \"/home/anthony/Desktop/if-you-were-here/src/containers/PostForm/PostForm.js\";\nimport React, { useState, useReducer } from \"react\";\nimport styles from \"./PostForm.module.css\";\nimport Modal from \"../../components/UI/Modal/Modal\";\nimport Identity from \"../../components/Identity/Identity\";\nimport Who from \"../../components/Who/Who\";\nimport Message from \"../../components/Message/Message\";\nconst initialState = {\n  identity: null,\n  who: null,\n  message: null\n};\n\nconst formReducer = (formState, action) => {\n  switch (action.type) {\n    case \"identity\":\n      return { ...formState,\n        identity: action.value\n      };\n\n    case \"who\":\n      return { ...formState,\n        who: action.value\n      };\n\n    case \"message\":\n      return { ...formState,\n        message: action.value\n      };\n\n    case \"reset\":\n      return { ...initialState\n      };\n\n    case \"submit\":\n      return { ...formState\n      };\n\n    default:\n      break;\n  }\n};\n\nconst PostForm = () => {\n  const [formState, dispatchForm] = useReducer(formReducer, initialState);\n  const [open, setOpen] = useState(false);\n  const [sectionIndex, setSectionIndex] = useState(0);\n  const dispatch = useDispatch();\n\n  const openHandler = () => setOpen(oldState => !oldState);\n\n  const switchHandler = (type, name, formValue) => {\n    if (type === \"next\" && sectionIndex === sections.length - 1) {\n      setSectionIndex(prevIndex => prevIndex);\n      dispatchForm({\n        type: name,\n        value: formValue\n      });\n    } else if (type === \"next\") {\n      setSectionIndex(prevIndex => prevIndex + 1);\n      dispatchForm({\n        type: name,\n        value: formValue\n      });\n    } else if (type === \"prev\") {\n      setSectionIndex(prevIndex => prevIndex - 1);\n      dispatchForm({\n        type: name,\n        value: formValue\n      });\n    } else {}\n  };\n\n  const sections = [React.createElement(Identity, {\n    switchHandler: switchHandler,\n    identityValue: formState.identity,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }), React.createElement(Who, {\n    switchHandler: switchHandler,\n    whoValue: formState.who,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), React.createElement(Message, {\n    switchHandler: switchHandler,\n    messageValue: formState.message,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  })];\n  return React.createElement(React.Fragment, null, React.createElement(Modal, {\n    open: open,\n    openHandler: openHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, sections[sectionIndex]), React.createElement(\"div\", {\n    className: styles.TextBox,\n    onClick: () => openHandler(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"Enter Here \", React.createElement(\"span\", {\n    className: styles.TypeWriter,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"|\")));\n};\n\nexport default PostForm;","map":{"version":3,"sources":["/home/anthony/Desktop/if-you-were-here/src/containers/PostForm/PostForm.js"],"names":["React","useState","useReducer","styles","Modal","Identity","Who","Message","initialState","identity","who","message","formReducer","formState","action","type","value","PostForm","dispatchForm","open","setOpen","sectionIndex","setSectionIndex","dispatch","useDispatch","openHandler","oldState","switchHandler","name","formValue","sections","length","prevIndex","TextBox","TypeWriter"],"mappings":"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","sourcesContent":["import React, { useState, useReducer } from \"react\";\nimport styles from \"./PostForm.module.css\";\nimport Modal from \"../../components/UI/Modal/Modal\";\nimport Identity from \"../../components/Identity/Identity\";\nimport Who from \"../../components/Who/Who\";\nimport Message from \"../../components/Message/Message\";\n\nconst initialState = {\n  identity: null,\n  who: null,\n  message: null\n};\n\nconst formReducer = (formState, action) => {\n  switch (action.type) {\n    case \"identity\":\n      return {\n        ...formState,\n        identity: action.value\n      };\n    case \"who\":\n      return {\n        ...formState,\n        who: action.value\n      };\n    case \"message\":\n      return {\n        ...formState,\n        message: action.value\n      };\n    case \"reset\":\n      return {\n        ...initialState\n      };\n    case \"submit\":\n      return {\n        ...formState\n      };\n    default:\n      break;\n  }\n};\n\nconst PostForm = () => {\n  const [formState, dispatchForm] = useReducer(formReducer, initialState);\n  const [open, setOpen] = useState(false);\n  const [sectionIndex, setSectionIndex] = useState(0);\n  const dispatch = useDispatch();\n\n  const openHandler = () => setOpen(oldState => !oldState);\n\n  const switchHandler = (type, name, formValue) => {\n    if (type === \"next\" && sectionIndex === sections.length - 1) {\n      setSectionIndex(prevIndex => prevIndex);\n      dispatchForm({ type: name, value: formValue });\n    } else if (type === \"next\") {\n      setSectionIndex(prevIndex => prevIndex + 1);\n      dispatchForm({ type: name, value: formValue });\n    } else if (type === \"prev\") {\n      setSectionIndex(prevIndex => prevIndex - 1);\n      dispatchForm({ type: name, value: formValue });\n    } else {\n    }\n  };\n\n  const sections = [\n    <Identity\n      switchHandler={switchHandler}\n      identityValue={formState.identity}\n    />,\n    <Who switchHandler={switchHandler} whoValue={formState.who} />,\n    <Message switchHandler={switchHandler} messageValue={formState.message} />\n  ];\n\n  return (\n    <>\n      <Modal open={open} openHandler={openHandler}>\n        {sections[sectionIndex]}\n      </Modal>\n      <div className={styles.TextBox} onClick={() => openHandler()}>\n        Enter Here <span className={styles.TypeWriter}>|</span>\n      </div>\n    </>\n  );\n};\n\nexport default PostForm;\n"]},"metadata":{},"sourceType":"module"}