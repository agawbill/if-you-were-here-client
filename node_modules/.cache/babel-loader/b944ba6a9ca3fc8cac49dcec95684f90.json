{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport updateMutation from './util/updateMutation';\nimport rangeSort from './util/rangeSort';\nvar ENTITY_MAP = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#x27;',\n  '`': '&#x60;',\n  '\\n': '<br/>'\n};\nexport default (function (block) {\n  var blockText = _toConsumableArray(block.text);\n\n  var entities = block.entityRanges.sort(rangeSort);\n  var styles = block.inlineStyleRanges.sort(rangeSort);\n  var resultText = '';\n\n  var _loop = function _loop(index) {\n    var _char = blockText[index];\n\n    if (ENTITY_MAP[_char] !== undefined) {\n      var encoded = ENTITY_MAP[_char];\n\n      var resultIndex = _toConsumableArray(resultText).length;\n\n      resultText += encoded;\n\n      var updateForChar = function updateForChar(mutation) {\n        return updateMutation(mutation, resultIndex, _char.length, encoded.length, 0, 0);\n      };\n\n      entities = entities.map(updateForChar);\n      styles = styles.map(updateForChar);\n    } else {\n      resultText += _char;\n    }\n  };\n\n  for (var index = 0; index < blockText.length; index++) {\n    _loop(index);\n  }\n\n  return Object.assign({}, block, {\n    text: resultText,\n    inlineStyleRanges: styles,\n    entityRanges: entities\n  });\n});","map":{"version":3,"sources":["/home/anthony/Desktop/if-you-were-here/node_modules/draft-convert/esm/encodeBlock.js"],"names":["_toConsumableArray","updateMutation","rangeSort","ENTITY_MAP","block","blockText","text","entities","entityRanges","sort","styles","inlineStyleRanges","resultText","_loop","index","_char","undefined","encoded","resultIndex","length","updateForChar","mutation","map","Object","assign"],"mappings":"AAAA,OAAOA,kBAAP,MAA+B,8CAA/B;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,IAAIC,UAAU,GAAG;AACf,OAAK,OADU;AAEf,OAAK,MAFU;AAGf,OAAK,MAHU;AAIf,OAAK,QAJU;AAKf,OAAK,QALU;AAMf,OAAK,QANU;AAOf,QAAM;AAPS,CAAjB;AASA,gBAAgB,UAAUC,KAAV,EAAiB;AAC/B,MAAIC,SAAS,GAAGL,kBAAkB,CAACI,KAAK,CAACE,IAAP,CAAlC;;AAEA,MAAIC,QAAQ,GAAGH,KAAK,CAACI,YAAN,CAAmBC,IAAnB,CAAwBP,SAAxB,CAAf;AACA,MAAIQ,MAAM,GAAGN,KAAK,CAACO,iBAAN,CAAwBF,IAAxB,CAA6BP,SAA7B,CAAb;AACA,MAAIU,UAAU,GAAG,EAAjB;;AAEA,MAAIC,KAAK,GAAG,SAASA,KAAT,CAAeC,KAAf,EAAsB;AAChC,QAAIC,KAAK,GAAGV,SAAS,CAACS,KAAD,CAArB;;AAEA,QAAIX,UAAU,CAACY,KAAD,CAAV,KAAsBC,SAA1B,EAAqC;AACnC,UAAIC,OAAO,GAAGd,UAAU,CAACY,KAAD,CAAxB;;AAEA,UAAIG,WAAW,GAAGlB,kBAAkB,CAACY,UAAD,CAAlB,CAA+BO,MAAjD;;AAEAP,MAAAA,UAAU,IAAIK,OAAd;;AAEA,UAAIG,aAAa,GAAG,SAASA,aAAT,CAAuBC,QAAvB,EAAiC;AACnD,eAAOpB,cAAc,CAACoB,QAAD,EAAWH,WAAX,EAAwBH,KAAK,CAACI,MAA9B,EAAsCF,OAAO,CAACE,MAA9C,EAAsD,CAAtD,EAAyD,CAAzD,CAArB;AACD,OAFD;;AAIAZ,MAAAA,QAAQ,GAAGA,QAAQ,CAACe,GAAT,CAAaF,aAAb,CAAX;AACAV,MAAAA,MAAM,GAAGA,MAAM,CAACY,GAAP,CAAWF,aAAX,CAAT;AACD,KAbD,MAaO;AACLR,MAAAA,UAAU,IAAIG,KAAd;AACD;AACF,GAnBD;;AAqBA,OAAK,IAAID,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGT,SAAS,CAACc,MAAtC,EAA8CL,KAAK,EAAnD,EAAuD;AACrDD,IAAAA,KAAK,CAACC,KAAD,CAAL;AACD;;AAED,SAAOS,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBpB,KAAlB,EAAyB;AAC9BE,IAAAA,IAAI,EAAEM,UADwB;AAE9BD,IAAAA,iBAAiB,EAAED,MAFW;AAG9BF,IAAAA,YAAY,EAAED;AAHgB,GAAzB,CAAP;AAKD,CArCD","sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport updateMutation from './util/updateMutation';\nimport rangeSort from './util/rangeSort';\nvar ENTITY_MAP = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#x27;',\n  '`': '&#x60;',\n  '\\n': '<br/>'\n};\nexport default (function (block) {\n  var blockText = _toConsumableArray(block.text);\n\n  var entities = block.entityRanges.sort(rangeSort);\n  var styles = block.inlineStyleRanges.sort(rangeSort);\n  var resultText = '';\n\n  var _loop = function _loop(index) {\n    var _char = blockText[index];\n\n    if (ENTITY_MAP[_char] !== undefined) {\n      var encoded = ENTITY_MAP[_char];\n\n      var resultIndex = _toConsumableArray(resultText).length;\n\n      resultText += encoded;\n\n      var updateForChar = function updateForChar(mutation) {\n        return updateMutation(mutation, resultIndex, _char.length, encoded.length, 0, 0);\n      };\n\n      entities = entities.map(updateForChar);\n      styles = styles.map(updateForChar);\n    } else {\n      resultText += _char;\n    }\n  };\n\n  for (var index = 0; index < blockText.length; index++) {\n    _loop(index);\n  }\n\n  return Object.assign({}, block, {\n    text: resultText,\n    inlineStyleRanges: styles,\n    entityRanges: entities\n  });\n});"]},"metadata":{},"sourceType":"module"}