{"ast":null,"code":"var _jsxFileName = \"/home/anthony/Desktop/if-you-were-here/client/src/components/FullMessage/FullMessage.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport parse from \"html-react-parser\";\nimport styles from \"./FullMessage.module.css\";\nimport { fetchMessage, resetMessage } from \"../../store/actions\";\nimport { useParams, withRouter } from \"react-router-dom\";\nimport Spinner from \"../UI/Spinners/FormSpinner/FormSpinner\";\n\nconst FullMessage = props => {\n  const [message, setMessage] = useState(null);\n  const currentMessage = useSelector(state => state.message.currentMessage);\n  const error = useSelector(state => state.message.error);\n  const dispatch = useDispatch();\n  const {\n    id\n  } = useParams();\n  useEffect(() => {\n    const passedMessage = props.history.location.passedMessage;\n\n    if (!passedMessage) {\n      dispatch(fetchMessage(id));\n    } else {\n      setMessage(passedMessage);\n    }\n\n    return () => dispatch(resetMessage());\n  }, []);\n  let messageBody = React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  });\n  console.log(message);\n  console.log(props.location);\n\n  if (message) {\n    const date = new Date(message.createdAt).toDateString();\n    messageBody = React.createElement(React.Fragment, null, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, \"To my\", \" \", React.createElement(\"span\", {\n      className: styles.MessageAttribute,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, message.who.name)), \",\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: styles.MessageDate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, date)), React.createElement(\"span\", {\n      className: styles.MessageMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, parse(message.message)), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"From your\", \" \", React.createElement(\"span\", {\n      className: styles.MessageAttribute,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, message.identity.name))));\n  }\n\n  if (error) {\n    messageBody = React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      style: {\n        color: \"red\",\n        fontWeight: \"bold\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Sorry, an error has occurred and IT has been notified:\"), React.createElement(\"span\", {\n      style: {\n        color: \"white\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \" \", error));\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, messageBody);\n};\n\nexport default withRouter(FullMessage);","map":{"version":3,"sources":["/home/anthony/Desktop/if-you-were-here/client/src/components/FullMessage/FullMessage.js"],"names":["React","useEffect","useState","useSelector","useDispatch","parse","styles","fetchMessage","resetMessage","useParams","withRouter","Spinner","FullMessage","props","message","setMessage","currentMessage","state","error","dispatch","id","passedMessage","history","location","messageBody","console","log","date","Date","createdAt","toDateString","MessageAttribute","who","name","MessageDate","MessageMessage","identity","color","fontWeight"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport parse from \"html-react-parser\";\nimport styles from \"./FullMessage.module.css\";\nimport { fetchMessage, resetMessage } from \"../../store/actions\";\nimport { useParams, withRouter } from \"react-router-dom\";\nimport Spinner from \"../UI/Spinners/FormSpinner/FormSpinner\";\n\nconst FullMessage = (props) => {\n  const [message, setMessage] = useState(null);\n  const currentMessage = useSelector((state) => state.message.currentMessage);\n  const error = useSelector((state) => state.message.error);\n  const dispatch = useDispatch();\n  const { id } = useParams();\n\n  useEffect(() => {\n    const passedMessage = props.history.location.passedMessage;\n    if (!passedMessage) {\n      dispatch(fetchMessage(id));\n    } else {\n      setMessage(passedMessage);\n    }\n    return () => dispatch(resetMessage());\n  }, []);\n\n  let messageBody = <Spinner />;\n\n  console.log(message);\n\n  console.log(props.location);\n  if (message) {\n    const date = new Date(message.createdAt).toDateString();\n    messageBody = (\n      <>\n        <p>\n          <b>\n            To my{\" \"}\n            <span className={styles.MessageAttribute}>{message.who.name}</span>\n          </b>\n          ,\n          <br />\n          <span className={styles.MessageDate}>{date}</span>\n        </p>\n        <span className={styles.MessageMessage}>{parse(message.message)}</span>\n        <p>\n          <b>\n            From your{\" \"}\n            <span className={styles.MessageAttribute}>\n              {message.identity.name}\n            </span>\n          </b>\n        </p>\n      </>\n    );\n  }\n\n  if (error) {\n    messageBody = (\n      <center>\n        <span style={{ color: \"red\", fontWeight: \"bold\" }}>\n          Sorry, an error has occurred and IT has been notified:\n        </span>\n        <span style={{ color: \"white\" }}> {error}</span>\n      </center>\n    );\n  }\n\n  return <div>{messageBody}</div>;\n};\n\nexport default withRouter(FullMessage);\n"]},"metadata":{},"sourceType":"module"}