{"ast":null,"code":"import { useEffect, useReducer } from \"react\";\nimport { fetchMessagesReset, resetMessage, getPersonsReset } from \"../store/actions/index\";\nimport { useSelector, useDispatch } from \"react-redux\";\nconst messagesError = useSelector(state => state.messages.error);\nconst messageError = useSelector(state => state.message.error);\nconst personsError = useSelector(state => state.persons.error);\nconst [errorState, dispatchError] = useReducer(errorReducer, initialState);\nconst initialState = {\n  error: null,\n  customerHandler: null,\n  resetError: null\n};\n\nconst errorReducer = (errorState, action) => {\n  switch (action.type) {\n    case \"persons\":\n      return { ...errorState,\n        error: personsError,\n        customerHandler: action.customerHandler,\n        resetError: getPersonsReset\n      };\n\n    case \"submitMessage\":\n      return { ...errorState,\n        error: messageError,\n        customerHandler: action.customerHandler,\n        resetError: resetMessage\n      };\n\n    case \"message\":\n      return { ...errorState,\n        error: messageError,\n        resetError: resetMessage\n      };\n\n    case \"messages\":\n      return { ...errorState,\n        error: messagesError,\n        resetError: fetchMessagesReset\n      };\n\n    default:\n      break;\n  }\n};\n\nconst useErrorHandler = (error, customerHandler = null) => {\n  let body = null;\n\n  if (messageError) {\n    body = \"bingo bango bongo\";\n  } //   const [hasError, setHasError] = useState(false);\n\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (errorState.error === null) {\n      dispatchError({\n        type: error\n      });\n    }\n  }, [errorState.error]);\n  return body;\n};\n\nexport default useErrorHandler;","map":{"version":3,"sources":["/home/anthony/Desktop/if-you-were-here/client/src/hooks/useErrorHandler/useErrorHandler.js"],"names":["useEffect","useReducer","fetchMessagesReset","resetMessage","getPersonsReset","useSelector","useDispatch","messagesError","state","messages","error","messageError","message","personsError","persons","errorState","dispatchError","errorReducer","initialState","customerHandler","resetError","action","type","useErrorHandler","body","dispatch"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,UAApB,QAAsC,OAAtC;AACA,SACEC,kBADF,EAEEC,YAFF,EAGEC,eAHF,QAIO,wBAJP;AAMA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,MAAMC,aAAa,GAAGF,WAAW,CAAEG,KAAD,IAAWA,KAAK,CAACC,QAAN,CAAeC,KAA3B,CAAjC;AACA,MAAMC,YAAY,GAAGN,WAAW,CAAEG,KAAD,IAAWA,KAAK,CAACI,OAAN,CAAcF,KAA1B,CAAhC;AACA,MAAMG,YAAY,GAAGR,WAAW,CAAEG,KAAD,IAAWA,KAAK,CAACM,OAAN,CAAcJ,KAA1B,CAAhC;AACA,MAAM,CAACK,UAAD,EAAaC,aAAb,IAA8Bf,UAAU,CAACgB,YAAD,EAAeC,YAAf,CAA9C;AAEA,MAAMA,YAAY,GAAG;AACnBR,EAAAA,KAAK,EAAE,IADY;AAEnBS,EAAAA,eAAe,EAAE,IAFE;AAGnBC,EAAAA,UAAU,EAAE;AAHO,CAArB;;AAMA,MAAMH,YAAY,GAAG,CAACF,UAAD,EAAaM,MAAb,KAAwB;AAC3C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,SAAL;AACE,aAAO,EACL,GAAGP,UADE;AAELL,QAAAA,KAAK,EAAEG,YAFF;AAGLM,QAAAA,eAAe,EAAEE,MAAM,CAACF,eAHnB;AAILC,QAAAA,UAAU,EAAEhB;AAJP,OAAP;;AAMF,SAAK,eAAL;AACE,aAAO,EACL,GAAGW,UADE;AAELL,QAAAA,KAAK,EAAEC,YAFF;AAGLQ,QAAAA,eAAe,EAAEE,MAAM,CAACF,eAHnB;AAILC,QAAAA,UAAU,EAAEjB;AAJP,OAAP;;AAMF,SAAK,SAAL;AACE,aAAO,EACL,GAAGY,UADE;AAELL,QAAAA,KAAK,EAAEC,YAFF;AAGLS,QAAAA,UAAU,EAAEjB;AAHP,OAAP;;AAKF,SAAK,UAAL;AACE,aAAO,EACL,GAAGY,UADE;AAELL,QAAAA,KAAK,EAAEH,aAFF;AAGLa,QAAAA,UAAU,EAAElB;AAHP,OAAP;;AAKF;AACE;AA5BJ;AA8BD,CA/BD;;AAiCA,MAAMqB,eAAe,GAAG,CAACb,KAAD,EAAQS,eAAe,GAAG,IAA1B,KAAmC;AACzD,MAAIK,IAAI,GAAG,IAAX;;AAEA,MAAIb,YAAJ,EAAkB;AAChBa,IAAAA,IAAI,GAAG,mBAAP;AACD,GALwD,CAMzD;;;AACA,QAAMC,QAAQ,GAAGnB,WAAW,EAA5B;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIe,UAAU,CAACL,KAAX,KAAqB,IAAzB,EAA+B;AAC7BM,MAAAA,aAAa,CAAC;AAAEM,QAAAA,IAAI,EAAEZ;AAAR,OAAD,CAAb;AACD;AACF,GAJQ,EAIN,CAACK,UAAU,CAACL,KAAZ,CAJM,CAAT;AAMA,SAAOc,IAAP;AACD,CAhBD;;AAkBA,eAAeD,eAAf","sourcesContent":["import { useEffect, useReducer } from \"react\";\nimport {\n  fetchMessagesReset,\n  resetMessage,\n  getPersonsReset,\n} from \"../store/actions/index\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\n\nconst messagesError = useSelector((state) => state.messages.error);\nconst messageError = useSelector((state) => state.message.error);\nconst personsError = useSelector((state) => state.persons.error);\nconst [errorState, dispatchError] = useReducer(errorReducer, initialState);\n\nconst initialState = {\n  error: null,\n  customerHandler: null,\n  resetError: null,\n};\n\nconst errorReducer = (errorState, action) => {\n  switch (action.type) {\n    case \"persons\":\n      return {\n        ...errorState,\n        error: personsError,\n        customerHandler: action.customerHandler,\n        resetError: getPersonsReset,\n      };\n    case \"submitMessage\":\n      return {\n        ...errorState,\n        error: messageError,\n        customerHandler: action.customerHandler,\n        resetError: resetMessage,\n      };\n    case \"message\":\n      return {\n        ...errorState,\n        error: messageError,\n        resetError: resetMessage,\n      };\n    case \"messages\":\n      return {\n        ...errorState,\n        error: messagesError,\n        resetError: fetchMessagesReset,\n      };\n    default:\n      break;\n  }\n};\n\nconst useErrorHandler = (error, customerHandler = null) => {\n  let body = null;\n\n  if (messageError) {\n    body = \"bingo bango bongo\";\n  }\n  //   const [hasError, setHasError] = useState(false);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (errorState.error === null) {\n      dispatchError({ type: error });\n    }\n  }, [errorState.error]);\n\n  return body;\n};\n\nexport default useErrorHandler;\n"]},"metadata":{},"sourceType":"module"}