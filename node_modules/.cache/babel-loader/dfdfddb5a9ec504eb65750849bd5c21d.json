{"ast":null,"code":"import { useEffect, useReducer } from \"react\";\nimport { fetchMessagesReset, resetMessage, getPersonsReset } from \"../../store/actions/index\";\nimport { useSelector, useDispatch } from \"react-redux\";\nconst initialState = {\n  error: null,\n  customerHandler: null,\n  resetError: null\n};\n\nconst errorReducer = (errorState, action) => {\n  switch (action.type) {\n    case \"persons\":\n      return { ...errorState,\n        error: action.error,\n        customerHandler: action.handler,\n        resetError: getPersonsReset\n      };\n\n    case \"submitMessage\":\n      return { ...errorState,\n        error: action.error,\n        customerHandler: action.handler,\n        resetError: resetMessage\n      };\n\n    case \"message\":\n      return { ...errorState,\n        error: action.error,\n        customerHandler: action.handler,\n        resetError: resetMessage\n      };\n\n    case \"messages\":\n      return { ...errorState,\n        error: action.error,\n        customerHandler: action.handler,\n        resetError: fetchMessagesReset\n      };\n\n    default:\n      return initialState;\n  }\n};\n\nconst useErrorHandler = (error, customerHandler = null) => {\n  const [errorState, dispatchError] = useReducer(errorReducer, initialState);\n  const messagesError = useSelector(state => state.messages.error);\n  const messageError = useSelector(state => state.message.error);\n  const personsError = useSelector(state => state.persons.error);\n  const body = customerHandler !== null ? errorState.customerHandler : errorState.error;\n  console.log(errorState.error); //   if (messageError) {\n  //     body = \"bingo bango bongo\";\n  //   }\n  //   const [hasError, setHasError] = useState(false);\n  //   const dispatch = useDispatch();\n\n  useEffect(() => {\n    console.log(error);\n\n    if (error === \"persons\") {\n      dispatchError({\n        type: \"persons\",\n        error: personsError,\n        action: customerHandler\n      });\n    } else if (error === \"messages\") {\n      dispatchError({\n        type: \"messages\",\n        error: messagesError,\n        action: customerHandler\n      });\n    } else if (error === \"message\") {\n      dispatchError({\n        type: \"message\",\n        error: messageError,\n        action: customerHandler\n      });\n    } else if (error === \"submitMessage\") {\n      dispatchError({\n        type: \"submitMessage\",\n        error: messageError,\n        action: customerHandler\n      });\n    }\n  }, [messageError, messagesError, personsError, customerHandler, error]);\n  return body;\n};\n\nexport default useErrorHandler;","map":{"version":3,"sources":["/home/anthony/Desktop/if-you-were-here/client/src/hooks/useErrorHandler/useErrorHandler.js"],"names":["useEffect","useReducer","fetchMessagesReset","resetMessage","getPersonsReset","useSelector","useDispatch","initialState","error","customerHandler","resetError","errorReducer","errorState","action","type","handler","useErrorHandler","dispatchError","messagesError","state","messages","messageError","message","personsError","persons","body","console","log"],"mappings":"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","sourcesContent":["import { useEffect, useReducer } from \"react\";\nimport {\n  fetchMessagesReset,\n  resetMessage,\n  getPersonsReset,\n} from \"../../store/actions/index\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\n\nconst initialState = {\n  error: null,\n  customerHandler: null,\n  resetError: null,\n};\n\nconst errorReducer = (errorState, action) => {\n  switch (action.type) {\n    case \"persons\":\n      return {\n        ...errorState,\n        error: action.error,\n        customerHandler: action.handler,\n        resetError: getPersonsReset,\n      };\n    case \"submitMessage\":\n      return {\n        ...errorState,\n        error: action.error,\n        customerHandler: action.handler,\n        resetError: resetMessage,\n      };\n    case \"message\":\n      return {\n        ...errorState,\n        error: action.error,\n        customerHandler: action.handler,\n        resetError: resetMessage,\n      };\n    case \"messages\":\n      return {\n        ...errorState,\n        error: action.error,\n        customerHandler: action.handler,\n        resetError: fetchMessagesReset,\n      };\n    default:\n      return initialState;\n  }\n};\n\nconst useErrorHandler = (error, customerHandler = null) => {\n  const [errorState, dispatchError] = useReducer(errorReducer, initialState);\n  const messagesError = useSelector((state) => state.messages.error);\n  const messageError = useSelector((state) => state.message.error);\n  const personsError = useSelector((state) => state.persons.error);\n  const body =\n    customerHandler !== null ? errorState.customerHandler : errorState.error;\n\n  console.log(errorState.error);\n\n  //   if (messageError) {\n  //     body = \"bingo bango bongo\";\n  //   }\n  //   const [hasError, setHasError] = useState(false);\n  //   const dispatch = useDispatch();\n\n  useEffect(() => {\n    console.log(error);\n\n    if (error === \"persons\") {\n      dispatchError({\n        type: \"persons\",\n        error: personsError,\n        action: customerHandler,\n      });\n    } else if (error === \"messages\") {\n      dispatchError({\n        type: \"messages\",\n        error: messagesError,\n        action: customerHandler,\n      });\n    } else if (error === \"message\") {\n      dispatchError({\n        type: \"message\",\n        error: messageError,\n        action: customerHandler,\n      });\n    } else if (error === \"submitMessage\") {\n      dispatchError({\n        type: \"submitMessage\",\n        error: messageError,\n        action: customerHandler,\n      });\n    }\n  }, [messageError, messagesError, personsError, customerHandler, error]);\n\n  return body;\n};\n\nexport default useErrorHandler;\n"]},"metadata":{},"sourceType":"module"}