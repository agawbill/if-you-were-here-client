{"ast":null,"code":"/**\n * Copyright (c) 2017-present, Ephox, Inc.\n *\n * This source code is licensed under the Apache 2 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport { eventPropTypes } from './components/EditorPropTypes';\nexport var isFunction = function (x) {\n  return typeof x === 'function';\n};\n\nvar isEventProp = function (name) {\n  return name in eventPropTypes;\n};\n\nvar findEventHandlers = function (props) {\n  return Object.keys(props).filter(isEventProp).filter(function (name) {\n    return isFunction(props[name]);\n  }).map(function (name) {\n    return {\n      handler: props[name],\n      eventName: name.substring(2)\n    };\n  });\n};\n\nexport var bindHandlers = function (editor, props, boundHandlers) {\n  findEventHandlers(props).forEach(function (found) {\n    // Unbind old handler\n    var oldHandler = boundHandlers[found.eventName];\n\n    if (isFunction(oldHandler)) {\n      editor.off(found.eventName, oldHandler);\n    } // Bind new handler\n\n\n    var newHandler = function (e) {\n      return found.handler(e, editor);\n    };\n\n    boundHandlers[found.eventName] = newHandler;\n    editor.on(found.eventName, newHandler);\n  });\n};\nvar unique = 0;\nexport var uuid = function (prefix) {\n  var date = new Date();\n  var time = date.getTime();\n  var random = Math.floor(Math.random() * 1000000000);\n  unique++;\n  return prefix + '_' + random + unique + String(time);\n};\nexport var isTextarea = function (element) {\n  return element !== null && element.tagName.toLowerCase() === 'textarea';\n};\n\nvar normalizePluginArray = function (plugins) {\n  if (typeof plugins === 'undefined' || plugins === '') {\n    return [];\n  }\n\n  return Array.isArray(plugins) ? plugins : plugins.split(' ');\n};\n\nexport var mergePlugins = function (initPlugins, inputPlugins) {\n  return normalizePluginArray(initPlugins).concat(normalizePluginArray(inputPlugins));\n};","map":{"version":3,"sources":["/home/anthony/Desktop/if-you-were-here/node_modules/@tinymce/tinymce-react/lib/es2015/main/ts/Utils.js"],"names":["eventPropTypes","isFunction","x","isEventProp","name","findEventHandlers","props","Object","keys","filter","map","handler","eventName","substring","bindHandlers","editor","boundHandlers","forEach","found","oldHandler","off","newHandler","e","on","unique","uuid","prefix","date","Date","time","getTime","random","Math","floor","String","isTextarea","element","tagName","toLowerCase","normalizePluginArray","plugins","Array","isArray","split","mergePlugins","initPlugins","inputPlugins","concat"],"mappings":"AAAA;;;;;;;AAOA,SAASA,cAAT,QAA+B,8BAA/B;AACA,OAAO,IAAIC,UAAU,GAAG,UAAUC,CAAV,EAAa;AAAE,SAAO,OAAOA,CAAP,KAAa,UAApB;AAAiC,CAAjE;;AACP,IAAIC,WAAW,GAAG,UAAUC,IAAV,EAAgB;AAC9B,SAAOA,IAAI,IAAIJ,cAAf;AACH,CAFD;;AAGA,IAAIK,iBAAiB,GAAG,UAAUC,KAAV,EAAiB;AACrC,SAAOC,MAAM,CAACC,IAAP,CAAYF,KAAZ,EACFG,MADE,CACKN,WADL,EAEFM,MAFE,CAEK,UAAUL,IAAV,EAAgB;AAAE,WAAOH,UAAU,CAACK,KAAK,CAACF,IAAD,CAAN,CAAjB;AAAiC,GAFxD,EAGFM,GAHE,CAGE,UAAUN,IAAV,EAAgB;AAAE,WAAQ;AAC/BO,MAAAA,OAAO,EAAEL,KAAK,CAACF,IAAD,CADiB;AAE/BQ,MAAAA,SAAS,EAAER,IAAI,CAACS,SAAL,CAAe,CAAf;AAFoB,KAAR;AAGtB,GANE,CAAP;AAOH,CARD;;AASA,OAAO,IAAIC,YAAY,GAAG,UAAUC,MAAV,EAAkBT,KAAlB,EAAyBU,aAAzB,EAAwC;AAC9DX,EAAAA,iBAAiB,CAACC,KAAD,CAAjB,CAAyBW,OAAzB,CAAiC,UAAUC,KAAV,EAAiB;AAC9C;AACA,QAAIC,UAAU,GAAGH,aAAa,CAACE,KAAK,CAACN,SAAP,CAA9B;;AACA,QAAIX,UAAU,CAACkB,UAAD,CAAd,EAA4B;AACxBJ,MAAAA,MAAM,CAACK,GAAP,CAAWF,KAAK,CAACN,SAAjB,EAA4BO,UAA5B;AACH,KAL6C,CAM9C;;;AACA,QAAIE,UAAU,GAAG,UAAUC,CAAV,EAAa;AAAE,aAAOJ,KAAK,CAACP,OAAN,CAAcW,CAAd,EAAiBP,MAAjB,CAAP;AAAkC,KAAlE;;AACAC,IAAAA,aAAa,CAACE,KAAK,CAACN,SAAP,CAAb,GAAiCS,UAAjC;AACAN,IAAAA,MAAM,CAACQ,EAAP,CAAUL,KAAK,CAACN,SAAhB,EAA2BS,UAA3B;AACH,GAVD;AAWH,CAZM;AAaP,IAAIG,MAAM,GAAG,CAAb;AACA,OAAO,IAAIC,IAAI,GAAG,UAAUC,MAAV,EAAkB;AAChC,MAAIC,IAAI,GAAG,IAAIC,IAAJ,EAAX;AACA,MAAIC,IAAI,GAAGF,IAAI,CAACG,OAAL,EAAX;AACA,MAAIC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACD,MAAL,KAAgB,UAA3B,CAAb;AACAP,EAAAA,MAAM;AACN,SAAOE,MAAM,GAAG,GAAT,GAAeK,MAAf,GAAwBP,MAAxB,GAAiCU,MAAM,CAACL,IAAD,CAA9C;AACH,CANM;AAOP,OAAO,IAAIM,UAAU,GAAG,UAAUC,OAAV,EAAmB;AACvC,SAAOA,OAAO,KAAK,IAAZ,IAAoBA,OAAO,CAACC,OAAR,CAAgBC,WAAhB,OAAkC,UAA7D;AACH,CAFM;;AAGP,IAAIC,oBAAoB,GAAG,UAAUC,OAAV,EAAmB;AAC1C,MAAI,OAAOA,OAAP,KAAmB,WAAnB,IAAkCA,OAAO,KAAK,EAAlD,EAAsD;AAClD,WAAO,EAAP;AACH;;AACD,SAAOC,KAAK,CAACC,OAAN,CAAcF,OAAd,IAAyBA,OAAzB,GAAmCA,OAAO,CAACG,KAAR,CAAc,GAAd,CAA1C;AACH,CALD;;AAMA,OAAO,IAAIC,YAAY,GAAG,UAAUC,WAAV,EAAuBC,YAAvB,EAAqC;AAC3D,SAAOP,oBAAoB,CAACM,WAAD,CAApB,CAAkCE,MAAlC,CAAyCR,oBAAoB,CAACO,YAAD,CAA7D,CAAP;AACH,CAFM","sourcesContent":["/**\n * Copyright (c) 2017-present, Ephox, Inc.\n *\n * This source code is licensed under the Apache 2 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport { eventPropTypes } from './components/EditorPropTypes';\nexport var isFunction = function (x) { return typeof x === 'function'; };\nvar isEventProp = function (name) {\n    return name in eventPropTypes;\n};\nvar findEventHandlers = function (props) {\n    return Object.keys(props)\n        .filter(isEventProp)\n        .filter(function (name) { return isFunction(props[name]); })\n        .map(function (name) { return ({\n        handler: props[name],\n        eventName: name.substring(2)\n    }); });\n};\nexport var bindHandlers = function (editor, props, boundHandlers) {\n    findEventHandlers(props).forEach(function (found) {\n        // Unbind old handler\n        var oldHandler = boundHandlers[found.eventName];\n        if (isFunction(oldHandler)) {\n            editor.off(found.eventName, oldHandler);\n        }\n        // Bind new handler\n        var newHandler = function (e) { return found.handler(e, editor); };\n        boundHandlers[found.eventName] = newHandler;\n        editor.on(found.eventName, newHandler);\n    });\n};\nvar unique = 0;\nexport var uuid = function (prefix) {\n    var date = new Date();\n    var time = date.getTime();\n    var random = Math.floor(Math.random() * 1000000000);\n    unique++;\n    return prefix + '_' + random + unique + String(time);\n};\nexport var isTextarea = function (element) {\n    return element !== null && element.tagName.toLowerCase() === 'textarea';\n};\nvar normalizePluginArray = function (plugins) {\n    if (typeof plugins === 'undefined' || plugins === '') {\n        return [];\n    }\n    return Array.isArray(plugins) ? plugins : plugins.split(' ');\n};\nexport var mergePlugins = function (initPlugins, inputPlugins) {\n    return normalizePluginArray(initPlugins).concat(normalizePluginArray(inputPlugins));\n};\n"]},"metadata":{},"sourceType":"module"}