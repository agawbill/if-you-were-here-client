{"ast":null,"code":"import React, { useState, useEffect, useReducer } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\"; // import {\n//   fetchMessagesReset,\n//   resetMessage,\n//   getPersonsReset,\n// } from \"../store/actions/index\";\n\nconst initialState = {\n  error: null,\n  resetError: null\n};\n\nconst errorReducer = (errorState, action) => {\n  switch (action.type) {\n    case \"persons\":\n      return { ...errorState\n      };\n\n    case \"submitMessage\":\n      return { ...errorState\n      };\n\n    case \"message\":\n      return { ...errorState\n      };\n\n    case \"messages\":\n      return { ...errorState\n      };\n\n    default:\n      break;\n  }\n};\n\nconst useErrorHandler = error => {\n  const messagesError = useSelector(state => state.messages.error) !== null;\n  const messageError = useSelector(state => state.message.error) !== null;\n  const personsError = useSelector(state => state.persons.error) !== null;\n  const [errorState, dispatchError] = useReducer(errorReducer, initialState);\n  let body = null;\n\n  if (messageError) {\n    body = \"bingo bango bongo\";\n  } //   const [hasError, setHasError] = useState(false);\n\n\n  const dispatch = useDispatch(); //   useEffect(() => {\n  //     if (errorState.error === null) {\n  //       setHasError(true);\n  //       dispatchError({ type: error });\n  //     }\n  //   }, [errorState.error]);\n\n  return body;\n};\n\nexport default useErrorHandler;","map":{"version":3,"sources":["/home/anthony/Desktop/if-you-were-here/client/src/hooks/useErrorHandler/useErrorHandler.js"],"names":["React","useState","useEffect","useReducer","useSelector","useDispatch","initialState","error","resetError","errorReducer","errorState","action","type","useErrorHandler","messagesError","state","messages","messageError","message","personsError","persons","dispatchError","body","dispatch"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC,C,CACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,IADY;AAEnBC,EAAAA,UAAU,EAAE;AAFO,CAArB;;AAKA,MAAMC,YAAY,GAAG,CAACC,UAAD,EAAaC,MAAb,KAAwB;AAC3C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,SAAL;AACE,aAAO,EACL,GAAGF;AADE,OAAP;;AAGF,SAAK,eAAL;AACE,aAAO,EACL,GAAGA;AADE,OAAP;;AAGF,SAAK,SAAL;AACE,aAAO,EACL,GAAGA;AADE,OAAP;;AAGF,SAAK,UAAL;AACE,aAAO,EACL,GAAGA;AADE,OAAP;;AAGF;AACE;AAlBJ;AAoBD,CArBD;;AAuBA,MAAMG,eAAe,GAAIN,KAAD,IAAW;AACjC,QAAMO,aAAa,GAAGV,WAAW,CAAEW,KAAD,IAAWA,KAAK,CAACC,QAAN,CAAeT,KAA3B,CAAX,KAAiD,IAAvE;AACA,QAAMU,YAAY,GAAGb,WAAW,CAAEW,KAAD,IAAWA,KAAK,CAACG,OAAN,CAAcX,KAA1B,CAAX,KAAgD,IAArE;AACA,QAAMY,YAAY,GAAGf,WAAW,CAAEW,KAAD,IAAWA,KAAK,CAACK,OAAN,CAAcb,KAA1B,CAAX,KAAgD,IAArE;AACA,QAAM,CAACG,UAAD,EAAaW,aAAb,IAA8BlB,UAAU,CAACM,YAAD,EAAeH,YAAf,CAA9C;AAEA,MAAIgB,IAAI,GAAG,IAAX;;AAEA,MAAIL,YAAJ,EAAkB;AAChBK,IAAAA,IAAI,GAAG,mBAAP;AACD,GAVgC,CAWjC;;;AACA,QAAMC,QAAQ,GAAGlB,WAAW,EAA5B,CAZiC,CAcjC;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAOiB,IAAP;AACD,CAtBD;;AAwBA,eAAeT,eAAf","sourcesContent":["import React, { useState, useEffect, useReducer } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n// import {\n//   fetchMessagesReset,\n//   resetMessage,\n//   getPersonsReset,\n// } from \"../store/actions/index\";\n\nconst initialState = {\n  error: null,\n  resetError: null,\n};\n\nconst errorReducer = (errorState, action) => {\n  switch (action.type) {\n    case \"persons\":\n      return {\n        ...errorState,\n      };\n    case \"submitMessage\":\n      return {\n        ...errorState,\n      };\n    case \"message\":\n      return {\n        ...errorState,\n      };\n    case \"messages\":\n      return {\n        ...errorState,\n      };\n    default:\n      break;\n  }\n};\n\nconst useErrorHandler = (error) => {\n  const messagesError = useSelector((state) => state.messages.error) !== null;\n  const messageError = useSelector((state) => state.message.error) !== null;\n  const personsError = useSelector((state) => state.persons.error) !== null;\n  const [errorState, dispatchError] = useReducer(errorReducer, initialState);\n\n  let body = null;\n\n  if (messageError) {\n    body = \"bingo bango bongo\";\n  }\n  //   const [hasError, setHasError] = useState(false);\n  const dispatch = useDispatch();\n\n  //   useEffect(() => {\n  //     if (errorState.error === null) {\n  //       setHasError(true);\n  //       dispatchError({ type: error });\n  //     }\n  //   }, [errorState.error]);\n\n  return body;\n};\n\nexport default useErrorHandler;\n"]},"metadata":{},"sourceType":"module"}