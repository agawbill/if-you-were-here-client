{"ast":null,"code":"import * as actionTypes from \"./actionTypes\";\nimport { sortPosts } from \"./index\";\nexport const addFilter = (filter, name, filtered, sort) => {\n  return dispatch => {\n    try {\n      console.log(sort);\n      dispatch(filterPostsStart());\n      dispatch(filterPostsAdd(filter, name));\n      dispatch(filterPosts());\n\n      if (sort) {\n        dispatch(sortPosts(filtered));\n      }\n    } catch (err) {\n      dispatch(filterPostsFail(err));\n    }\n  };\n};\nexport const removeFilter = (filter, name, filtered, sort) => {\n  return dispatch => {\n    try {\n      console.log(sort);\n      dispatch(filterPostsStart());\n      dispatch(filterPostsRemove(filter, name));\n      dispatch(filterPosts());\n\n      if (sort) {\n        dispatch(sortPosts(filtered));\n      }\n    } catch (err) {\n      dispatch(filterPostsFail(err));\n    }\n  };\n}; // export const filterAndSort = sort => {};\n\nexport const filterPostsAdd = (filter, name) => {\n  return {\n    type: actionTypes.FILTER_POSTS_ADD,\n    filter,\n    name\n  };\n};\nexport const filterPostsRemove = (filter, name) => {\n  return {\n    type: actionTypes.FILTER_POSTS_REMOVE,\n    filter,\n    name\n  };\n};\nexport const filterPosts = () => {\n  return {\n    type: actionTypes.FILTER_POSTS\n  };\n};\nexport const filterPostsStart = () => {\n  return {\n    type: actionTypes.FILTER_POSTS_START\n  };\n};\nexport const filterPostsFail = error => {\n  return {\n    type: actionTypes.FILTER_POSTS_FAIL,\n    error\n  };\n};\nexport const filterReset = () => {\n  return {\n    type: actionTypes.FILTER_RESET\n  };\n};","map":{"version":3,"sources":["/home/anthony/Desktop/if-you-were-here/src/store/actions/filterPosts.js"],"names":["actionTypes","sortPosts","addFilter","filter","name","filtered","sort","dispatch","console","log","filterPostsStart","filterPostsAdd","filterPosts","err","filterPostsFail","removeFilter","filterPostsRemove","type","FILTER_POSTS_ADD","FILTER_POSTS_REMOVE","FILTER_POSTS","FILTER_POSTS_START","error","FILTER_POSTS_FAIL","filterReset","FILTER_RESET"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AACA,SAASC,SAAT,QAA0B,SAA1B;AAEA,OAAO,MAAMC,SAAS,GAAG,CAACC,MAAD,EAASC,IAAT,EAAeC,QAAf,EAAyBC,IAAzB,KAAkC;AACzD,SAAOC,QAAQ,IAAI;AACjB,QAAI;AACFC,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AAEAC,MAAAA,QAAQ,CAACG,gBAAgB,EAAjB,CAAR;AACAH,MAAAA,QAAQ,CAACI,cAAc,CAACR,MAAD,EAASC,IAAT,CAAf,CAAR;AACAG,MAAAA,QAAQ,CAACK,WAAW,EAAZ,CAAR;;AACA,UAAIN,IAAJ,EAAU;AACRC,QAAAA,QAAQ,CAACN,SAAS,CAACI,QAAD,CAAV,CAAR;AACD;AACF,KATD,CASE,OAAOQ,GAAP,EAAY;AACZN,MAAAA,QAAQ,CAACO,eAAe,CAACD,GAAD,CAAhB,CAAR;AACD;AACF,GAbD;AAcD,CAfM;AAiBP,OAAO,MAAME,YAAY,GAAG,CAACZ,MAAD,EAASC,IAAT,EAAeC,QAAf,EAAyBC,IAAzB,KAAkC;AAC5D,SAAOC,QAAQ,IAAI;AACjB,QAAI;AACFC,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AAEAC,MAAAA,QAAQ,CAACG,gBAAgB,EAAjB,CAAR;AACAH,MAAAA,QAAQ,CAACS,iBAAiB,CAACb,MAAD,EAASC,IAAT,CAAlB,CAAR;AACAG,MAAAA,QAAQ,CAACK,WAAW,EAAZ,CAAR;;AACA,UAAIN,IAAJ,EAAU;AACRC,QAAAA,QAAQ,CAACN,SAAS,CAACI,QAAD,CAAV,CAAR;AACD;AACF,KATD,CASE,OAAOQ,GAAP,EAAY;AACZN,MAAAA,QAAQ,CAACO,eAAe,CAACD,GAAD,CAAhB,CAAR;AACD;AACF,GAbD;AAcD,CAfM,C,CAiBP;;AAEA,OAAO,MAAMF,cAAc,GAAG,CAACR,MAAD,EAASC,IAAT,KAAkB;AAC9C,SAAO;AACLa,IAAAA,IAAI,EAAEjB,WAAW,CAACkB,gBADb;AAELf,IAAAA,MAFK;AAGLC,IAAAA;AAHK,GAAP;AAKD,CANM;AAQP,OAAO,MAAMY,iBAAiB,GAAG,CAACb,MAAD,EAASC,IAAT,KAAkB;AACjD,SAAO;AACLa,IAAAA,IAAI,EAAEjB,WAAW,CAACmB,mBADb;AAELhB,IAAAA,MAFK;AAGLC,IAAAA;AAHK,GAAP;AAKD,CANM;AAQP,OAAO,MAAMQ,WAAW,GAAG,MAAM;AAC/B,SAAO;AACLK,IAAAA,IAAI,EAAEjB,WAAW,CAACoB;AADb,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMV,gBAAgB,GAAG,MAAM;AACpC,SAAO;AACLO,IAAAA,IAAI,EAAEjB,WAAW,CAACqB;AADb,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMP,eAAe,GAAGQ,KAAK,IAAI;AACtC,SAAO;AACLL,IAAAA,IAAI,EAAEjB,WAAW,CAACuB,iBADb;AAELD,IAAAA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,MAAME,WAAW,GAAG,MAAM;AAC/B,SAAO;AACLP,IAAAA,IAAI,EAAEjB,WAAW,CAACyB;AADb,GAAP;AAGD,CAJM","sourcesContent":["import * as actionTypes from \"./actionTypes\";\nimport { sortPosts } from \"./index\";\n\nexport const addFilter = (filter, name, filtered, sort) => {\n  return dispatch => {\n    try {\n      console.log(sort);\n\n      dispatch(filterPostsStart());\n      dispatch(filterPostsAdd(filter, name));\n      dispatch(filterPosts());\n      if (sort) {\n        dispatch(sortPosts(filtered));\n      }\n    } catch (err) {\n      dispatch(filterPostsFail(err));\n    }\n  };\n};\n\nexport const removeFilter = (filter, name, filtered, sort) => {\n  return dispatch => {\n    try {\n      console.log(sort);\n\n      dispatch(filterPostsStart());\n      dispatch(filterPostsRemove(filter, name));\n      dispatch(filterPosts());\n      if (sort) {\n        dispatch(sortPosts(filtered));\n      }\n    } catch (err) {\n      dispatch(filterPostsFail(err));\n    }\n  };\n};\n\n// export const filterAndSort = sort => {};\n\nexport const filterPostsAdd = (filter, name) => {\n  return {\n    type: actionTypes.FILTER_POSTS_ADD,\n    filter,\n    name\n  };\n};\n\nexport const filterPostsRemove = (filter, name) => {\n  return {\n    type: actionTypes.FILTER_POSTS_REMOVE,\n    filter,\n    name\n  };\n};\n\nexport const filterPosts = () => {\n  return {\n    type: actionTypes.FILTER_POSTS\n  };\n};\n\nexport const filterPostsStart = () => {\n  return {\n    type: actionTypes.FILTER_POSTS_START\n  };\n};\n\nexport const filterPostsFail = error => {\n  return {\n    type: actionTypes.FILTER_POSTS_FAIL,\n    error\n  };\n};\n\nexport const filterReset = () => {\n  return {\n    type: actionTypes.FILTER_RESET\n  };\n};\n"]},"metadata":{},"sourceType":"module"}