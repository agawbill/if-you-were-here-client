{"ast":null,"code":"import * as actionTypes from \"./actionTypes\";\nexport const fetchMessages = () => {\n  return async dispatch => {\n    try {\n      dispatch(submitMessageStart());\n      const response = await fetch(\"api/messages\", {\n        method: \"GET\",\n        mode: \"cors\",\n        cache: \"no-cache\",\n        credentials: \"same-origin\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const data = await response.json();\n      dispatch(fetchMessagesSuccess(data));\n    } catch (err) {\n      dispatch(fetchMessagesFail(err));\n    }\n  };\n};\nexport const findMessage = messageId => {\n  return async dispatch => {\n    try {\n      dispatch(submitMessageStart());\n      const response = await fetch(`api/messages/${messageId}`, {\n        method: \"GET\",\n        mode: \"cors\",\n        cache: \"no-cache\",\n        credentials: \"same-origin\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const data = await response.json();\n      dispatch(findMessageSuccess(data));\n    } catch (err) {\n      dispatch(findMessageFail(err));\n    }\n  };\n};\nexport const fetchMessagesSuccess = messages => {\n  return {\n    type: actionTypes.FETCH_MESSAGE_SUCCESS,\n    messages\n  };\n};\nexport const fetchMessagesFail = messages => {\n  return {\n    type: actionTypes.FETCH_MESSAGE_SUCCESS,\n    messages\n  };\n};\nexport const submitMessage = message => {\n  return async dispatch => {\n    try {\n      dispatch(submitMessageStart());\n      const response = await fetch(\"api/messages\", {\n        method: \"POST\",\n        mode: \"cors\",\n        cache: \"no-cache\",\n        credentials: \"same-origin\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(message)\n      });\n      const data = await response.json();\n      dispatch(submitMessageSuccess(data));\n    } catch (err) {\n      dispatch(submitMessageFail(err));\n    }\n  };\n};\nexport const submitMessageStart = () => {\n  return {\n    type: actionTypes.SUBMIT_MESSAGE_START\n  };\n};\nexport const submitMessageSuccess = message => {\n  return {\n    type: actionTypes.SUBMIT_MESSAGE_SUCCESS,\n    message\n  };\n};\nexport const submitMessageFail = error => {\n  return {\n    type: actionTypes.SUBMIT_MESSAGE_FAIL,\n    error: error.message\n  };\n};\nexport const submitMessageReset = () => {\n  return {\n    type: actionTypes.SUBMIT_MESSAGE_RESET\n  };\n};\nexport const setMessage = messageId => {\n  return {\n    type: actionTypes.FIND_MESSAGE,\n    messageId\n  };\n};\nexport const resetMessage = () => {\n  return {\n    type: actionTypes.RESET_MESSAGE\n  };\n};","map":{"version":3,"sources":["/home/anthony/Desktop/if-you-were-here/client/src/store/actions/messages.js"],"names":["actionTypes","fetchMessages","dispatch","submitMessageStart","response","fetch","method","mode","cache","credentials","headers","data","json","fetchMessagesSuccess","err","fetchMessagesFail","findMessage","messageId","findMessageSuccess","findMessageFail","messages","type","FETCH_MESSAGE_SUCCESS","submitMessage","message","body","JSON","stringify","submitMessageSuccess","submitMessageFail","SUBMIT_MESSAGE_START","SUBMIT_MESSAGE_SUCCESS","error","SUBMIT_MESSAGE_FAIL","submitMessageReset","SUBMIT_MESSAGE_RESET","setMessage","FIND_MESSAGE","resetMessage","RESET_MESSAGE"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAM;AACjC,SAAO,MAAOC,QAAP,IAAoB;AACzB,QAAI;AACFA,MAAAA,QAAQ,CAACC,kBAAkB,EAAnB,CAAR;AACA,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,cAAD,EAAiB;AAC3CC,QAAAA,MAAM,EAAE,KADmC;AAE3CC,QAAAA,IAAI,EAAE,MAFqC;AAG3CC,QAAAA,KAAK,EAAE,UAHoC;AAI3CC,QAAAA,WAAW,EAAE,aAJ8B;AAK3CC,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT;AALkC,OAAjB,CAA5B;AASA,YAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAT,EAAnB;AACAV,MAAAA,QAAQ,CAACW,oBAAoB,CAACF,IAAD,CAArB,CAAR;AACD,KAbD,CAaE,OAAOG,GAAP,EAAY;AACZZ,MAAAA,QAAQ,CAACa,iBAAiB,CAACD,GAAD,CAAlB,CAAR;AACD;AACF,GAjBD;AAkBD,CAnBM;AAqBP,OAAO,MAAME,WAAW,GAAIC,SAAD,IAAe;AACxC,SAAO,MAAOf,QAAP,IAAoB;AACzB,QAAI;AACFA,MAAAA,QAAQ,CAACC,kBAAkB,EAAnB,CAAR;AACA,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,gBAAeY,SAAU,EAA3B,EAA8B;AACxDX,QAAAA,MAAM,EAAE,KADgD;AAExDC,QAAAA,IAAI,EAAE,MAFkD;AAGxDC,QAAAA,KAAK,EAAE,UAHiD;AAIxDC,QAAAA,WAAW,EAAE,aAJ2C;AAKxDC,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT;AAL+C,OAA9B,CAA5B;AASA,YAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAT,EAAnB;AACAV,MAAAA,QAAQ,CAACgB,kBAAkB,CAACP,IAAD,CAAnB,CAAR;AACD,KAbD,CAaE,OAAOG,GAAP,EAAY;AACZZ,MAAAA,QAAQ,CAACiB,eAAe,CAACL,GAAD,CAAhB,CAAR;AACD;AACF,GAjBD;AAkBD,CAnBM;AAqBP,OAAO,MAAMD,oBAAoB,GAAIO,QAAD,IAAc;AAChD,SAAO;AACLC,IAAAA,IAAI,EAAErB,WAAW,CAACsB,qBADb;AAELF,IAAAA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,MAAML,iBAAiB,GAAIK,QAAD,IAAc;AAC7C,SAAO;AACLC,IAAAA,IAAI,EAAErB,WAAW,CAACsB,qBADb;AAELF,IAAAA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,MAAMG,aAAa,GAAIC,OAAD,IAAa;AACxC,SAAO,MAAOtB,QAAP,IAAoB;AACzB,QAAI;AACFA,MAAAA,QAAQ,CAACC,kBAAkB,EAAnB,CAAR;AACA,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,cAAD,EAAiB;AAC3CC,QAAAA,MAAM,EAAE,MADmC;AAE3CC,QAAAA,IAAI,EAAE,MAFqC;AAG3CC,QAAAA,KAAK,EAAE,UAHoC;AAI3CC,QAAAA,WAAW,EAAE,aAJ8B;AAK3CC,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SALkC;AAQ3Ce,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeH,OAAf;AARqC,OAAjB,CAA5B;AAUA,YAAMb,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAT,EAAnB;AACAV,MAAAA,QAAQ,CAAC0B,oBAAoB,CAACjB,IAAD,CAArB,CAAR;AACD,KAdD,CAcE,OAAOG,GAAP,EAAY;AACZZ,MAAAA,QAAQ,CAAC2B,iBAAiB,CAACf,GAAD,CAAlB,CAAR;AACD;AACF,GAlBD;AAmBD,CApBM;AAsBP,OAAO,MAAMX,kBAAkB,GAAG,MAAM;AACtC,SAAO;AACLkB,IAAAA,IAAI,EAAErB,WAAW,CAAC8B;AADb,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMF,oBAAoB,GAAIJ,OAAD,IAAa;AAC/C,SAAO;AACLH,IAAAA,IAAI,EAAErB,WAAW,CAAC+B,sBADb;AAELP,IAAAA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,MAAMK,iBAAiB,GAAIG,KAAD,IAAW;AAC1C,SAAO;AACLX,IAAAA,IAAI,EAAErB,WAAW,CAACiC,mBADb;AAELD,IAAAA,KAAK,EAAEA,KAAK,CAACR;AAFR,GAAP;AAID,CALM;AAOP,OAAO,MAAMU,kBAAkB,GAAG,MAAM;AACtC,SAAO;AACLb,IAAAA,IAAI,EAAErB,WAAW,CAACmC;AADb,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMC,UAAU,GAAInB,SAAD,IAAe;AACvC,SAAO;AACLI,IAAAA,IAAI,EAAErB,WAAW,CAACqC,YADb;AAELpB,IAAAA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,MAAMqB,YAAY,GAAG,MAAM;AAChC,SAAO;AACLjB,IAAAA,IAAI,EAAErB,WAAW,CAACuC;AADb,GAAP;AAGD,CAJM","sourcesContent":["import * as actionTypes from \"./actionTypes\";\n\nexport const fetchMessages = () => {\n  return async (dispatch) => {\n    try {\n      dispatch(submitMessageStart());\n      const response = await fetch(\"api/messages\", {\n        method: \"GET\",\n        mode: \"cors\",\n        cache: \"no-cache\",\n        credentials: \"same-origin\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      const data = await response.json();\n      dispatch(fetchMessagesSuccess(data));\n    } catch (err) {\n      dispatch(fetchMessagesFail(err));\n    }\n  };\n};\n\nexport const findMessage = (messageId) => {\n  return async (dispatch) => {\n    try {\n      dispatch(submitMessageStart());\n      const response = await fetch(`api/messages/${messageId}`, {\n        method: \"GET\",\n        mode: \"cors\",\n        cache: \"no-cache\",\n        credentials: \"same-origin\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      const data = await response.json();\n      dispatch(findMessageSuccess(data));\n    } catch (err) {\n      dispatch(findMessageFail(err));\n    }\n  };\n};\n\nexport const fetchMessagesSuccess = (messages) => {\n  return {\n    type: actionTypes.FETCH_MESSAGE_SUCCESS,\n    messages,\n  };\n};\n\nexport const fetchMessagesFail = (messages) => {\n  return {\n    type: actionTypes.FETCH_MESSAGE_SUCCESS,\n    messages,\n  };\n};\n\nexport const submitMessage = (message) => {\n  return async (dispatch) => {\n    try {\n      dispatch(submitMessageStart());\n      const response = await fetch(\"api/messages\", {\n        method: \"POST\",\n        mode: \"cors\",\n        cache: \"no-cache\",\n        credentials: \"same-origin\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(message),\n      });\n      const data = await response.json();\n      dispatch(submitMessageSuccess(data));\n    } catch (err) {\n      dispatch(submitMessageFail(err));\n    }\n  };\n};\n\nexport const submitMessageStart = () => {\n  return {\n    type: actionTypes.SUBMIT_MESSAGE_START,\n  };\n};\n\nexport const submitMessageSuccess = (message) => {\n  return {\n    type: actionTypes.SUBMIT_MESSAGE_SUCCESS,\n    message,\n  };\n};\n\nexport const submitMessageFail = (error) => {\n  return {\n    type: actionTypes.SUBMIT_MESSAGE_FAIL,\n    error: error.message,\n  };\n};\n\nexport const submitMessageReset = () => {\n  return {\n    type: actionTypes.SUBMIT_MESSAGE_RESET,\n  };\n};\n\nexport const setMessage = (messageId) => {\n  return {\n    type: actionTypes.FIND_MESSAGE,\n    messageId,\n  };\n};\n\nexport const resetMessage = () => {\n  return {\n    type: actionTypes.RESET_MESSAGE,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}