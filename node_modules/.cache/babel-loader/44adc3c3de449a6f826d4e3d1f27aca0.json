{"ast":null,"code":"var _jsxFileName = \"/home/anthony/Desktop/if-you-were-here/src/components/Message/Message.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Button from \"../UI/Buttons/Button/Button\";\nimport styles from \"./Message.module.css\";\nimport Form from \"react-bootstrap/Form\";\nimport CKEditor from \"@ckeditor/ckeditor5-react\";\nimport ClassicEditor from \"@ckeditor/ckeditor5-build-classic\";\nimport Essentials from \"@ckeditor/ckeditor5-essentials/src/essentials\";\nimport Paragraph from \"@ckeditor/ckeditor5-paragraph/src/paragraph\";\nimport Bold from \"@ckeditor/ckeditor5-basic-styles/src/bold\";\nimport Italic from \"@ckeditor/ckeditor5-basic-styles/src/italic\";\nimport Heading from \"@ckeditor/ckeditor5-heading/src/heading\"; // import { Editor } from \"@tinymce/tinymce-react\";\n\nconst Message = props => {\n  const [messageAnswer, setMessageAnswer] = useState(\"\");\n  console.log(messageAnswer); // const handleEditorChange = (content, editor) => {\n  //   setMessageAnswer(content);\n  //   console.log(\"Content was updated:\", content);\n  // };\n\n  const onChangeEditor = (event, editor) => {\n    const data = editor.getData();\n    console.log({\n      event,\n      editor,\n      data\n    });\n  };\n\n  useEffect(() => setMessageAnswer(props.messageValue), [props.messageValue]);\n  return React.createElement(React.Fragment, null, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"My message ...\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(CKEditor, {\n    editor: ClassicEditor,\n    data: \"<p>Hello from CKEditor 5!</p>\",\n    config: {\n      plugins: [Essentials, Paragraph, Bold, Italic, Heading],\n      toolbar: [\"heading\", \"|\", \"bold\", \"italic\", \"|\", \"undo\", \"redo\"]\n    },\n    onInit: editor => {\n      // You can store the \"editor\" and use when it is needed.\n      console.log(\"Editor is ready to use!\", editor);\n    },\n    onChange: onChangeEditor // onBlur={(event, editor) => {\n    //   console.log(\"Blur.\", editor);\n    // }}\n    // onFocus={(event, editor) => {\n    //   console.log(\"Focus.\", editor);\n    // }}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }), React.createElement(Button, {\n    type: \"prev\",\n    switchHandler: props.switchHandler,\n    name: \"message\",\n    formValue: messageAnswer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), React.createElement(Button, {\n    type: \"next\",\n    switchHandler: props.switchHandler,\n    name: \"message\",\n    validated: messageAnswer !== \"\" && messageAnswer.trim().indexOf(\" \") !== -1,\n    formValue: messageAnswer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  })));\n};\n\nexport default Message;","map":{"version":3,"sources":["/home/anthony/Desktop/if-you-were-here/src/components/Message/Message.js"],"names":["React","useState","useEffect","Button","styles","Form","CKEditor","ClassicEditor","Essentials","Paragraph","Bold","Italic","Heading","Message","props","messageAnswer","setMessageAnswer","console","log","onChangeEditor","event","editor","data","getData","messageValue","plugins","toolbar","switchHandler","trim","indexOf"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,OAAOC,aAAP,MAA0B,mCAA1B;AACA,OAAOC,UAAP,MAAuB,+CAAvB;AACA,OAAOC,SAAP,MAAsB,6CAAtB;AACA,OAAOC,IAAP,MAAiB,2CAAjB;AACA,OAAOC,MAAP,MAAmB,6CAAnB;AACA,OAAOC,OAAP,MAAoB,yCAApB,C,CACA;;AAEA,MAAMC,OAAO,GAAGC,KAAK,IAAI;AACvB,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCf,QAAQ,CAAC,EAAD,CAAlD;AACAgB,EAAAA,OAAO,CAACC,GAAR,CAAYH,aAAZ,EAFuB,CAIvB;AACA;AACA;AACA;;AAEA,QAAMI,cAAc,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxC,UAAMC,IAAI,GAAGD,MAAM,CAACE,OAAP,EAAb;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAY;AAAEE,MAAAA,KAAF;AAASC,MAAAA,MAAT;AAAiBC,MAAAA;AAAjB,KAAZ;AACD,GAHD;;AAKApB,EAAAA,SAAS,CAAC,MAAMc,gBAAgB,CAACF,KAAK,CAACU,YAAP,CAAvB,EAA6C,CAACV,KAAK,CAACU,YAAP,CAA7C,CAAT;AAEA,SACE,0CACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,QAAD;AACE,IAAA,MAAM,EAAEjB,aADV;AAEE,IAAA,IAAI,EAAC,+BAFP;AAGE,IAAA,MAAM,EAAE;AACNkB,MAAAA,OAAO,EAAE,CAACjB,UAAD,EAAaC,SAAb,EAAwBC,IAAxB,EAA8BC,MAA9B,EAAsCC,OAAtC,CADH;AAENc,MAAAA,OAAO,EAAE,CAAC,SAAD,EAAY,GAAZ,EAAiB,MAAjB,EAAyB,QAAzB,EAAmC,GAAnC,EAAwC,MAAxC,EAAgD,MAAhD;AAFH,KAHV;AAOE,IAAA,MAAM,EAAEL,MAAM,IAAI;AAChB;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCG,MAAvC;AACD,KAVH;AAWE,IAAA,QAAQ,EAAEF,cAXZ,CAYE;AACA;AACA;AACA;AACA;AACA;AAjBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAiDE,oBAAC,MAAD;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,aAAa,EAAEL,KAAK,CAACa,aAFvB;AAGE,IAAA,IAAI,EAAC,SAHP;AAIE,IAAA,SAAS,EAAEZ,aAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjDF,EAuDE,oBAAC,MAAD;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,aAAa,EAAED,KAAK,CAACa,aAFvB;AAGE,IAAA,IAAI,EAAC,SAHP;AAIE,IAAA,SAAS,EACPZ,aAAa,KAAK,EAAlB,IAAwBA,aAAa,CAACa,IAAd,GAAqBC,OAArB,CAA6B,GAA7B,MAAsC,CAAC,CALnE;AAOE,IAAA,SAAS,EAAEd,aAPb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAvDF,CAFF,CADF;AAsED,CAtFD;;AAwFA,eAAeF,OAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Button from \"../UI/Buttons/Button/Button\";\nimport styles from \"./Message.module.css\";\nimport Form from \"react-bootstrap/Form\";\nimport CKEditor from \"@ckeditor/ckeditor5-react\";\nimport ClassicEditor from \"@ckeditor/ckeditor5-build-classic\";\nimport Essentials from \"@ckeditor/ckeditor5-essentials/src/essentials\";\nimport Paragraph from \"@ckeditor/ckeditor5-paragraph/src/paragraph\";\nimport Bold from \"@ckeditor/ckeditor5-basic-styles/src/bold\";\nimport Italic from \"@ckeditor/ckeditor5-basic-styles/src/italic\";\nimport Heading from \"@ckeditor/ckeditor5-heading/src/heading\";\n// import { Editor } from \"@tinymce/tinymce-react\";\n\nconst Message = props => {\n  const [messageAnswer, setMessageAnswer] = useState(\"\");\n  console.log(messageAnswer);\n\n  // const handleEditorChange = (content, editor) => {\n  //   setMessageAnswer(content);\n  //   console.log(\"Content was updated:\", content);\n  // };\n\n  const onChangeEditor = (event, editor) => {\n    const data = editor.getData();\n    console.log({ event, editor, data });\n  };\n\n  useEffect(() => setMessageAnswer(props.messageValue), [props.messageValue]);\n\n  return (\n    <>\n      <h3>My message ...</h3>\n      <div>\n        <CKEditor\n          editor={ClassicEditor}\n          data=\"<p>Hello from CKEditor 5!</p>\"\n          config={{\n            plugins: [Essentials, Paragraph, Bold, Italic, Heading],\n            toolbar: [\"heading\", \"|\", \"bold\", \"italic\", \"|\", \"undo\", \"redo\"]\n          }}\n          onInit={editor => {\n            // You can store the \"editor\" and use when it is needed.\n            console.log(\"Editor is ready to use!\", editor);\n          }}\n          onChange={onChangeEditor}\n          // onBlur={(event, editor) => {\n          //   console.log(\"Blur.\", editor);\n          // }}\n          // onFocus={(event, editor) => {\n          //   console.log(\"Focus.\", editor);\n          // }}\n        />\n        {/* <Editor\n          apiKey=\"ulzlzwd1vwer6c373nxfqmeq3tejpex1ximmhkpuw91l8dlb\"\n          // tagName={styles.MessageContent}\n          value={messageAnswer}\n          init={{\n            height: 500,\n            menubar: false,\n            plugins: [\n              \"advlist autolink lists link image charmap print preview anchor\",\n              \"searchreplace visualblocks code fullscreen\",\n              \"insertdatetime media table paste code help wordcount\"\n            ],\n            toolbar:\n              \"undo redo | bold italic backcolor | \\\n             bullist numlist outdent indent |\"\n          }}\n          onEditorChange={handleEditorChange}\n        /> */}\n        {/* <Form>\n          <Form.Group controlId=\"MessageContent\">\n            <Form.Control\n              onChange={event => setMessageAnswer(event.target.value)}\n              as=\"textarea\"\n              rows=\"10\"\n              className={styles.MessageContent}\n              value={messageAnswer}\n            />\n          </Form.Group>\n        </Form> */}\n        <Button\n          type=\"prev\"\n          switchHandler={props.switchHandler}\n          name=\"message\"\n          formValue={messageAnswer}\n        />\n        <Button\n          type=\"next\"\n          switchHandler={props.switchHandler}\n          name=\"message\"\n          validated={\n            messageAnswer !== \"\" && messageAnswer.trim().indexOf(\" \") !== -1\n          }\n          formValue={messageAnswer}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default Message;\n"]},"metadata":{},"sourceType":"module"}