{"ast":null,"code":"var _jsxFileName = \"/home/anthony/Desktop/if-you-were-here/client/src/components/FullMessage/FullMessage.js\";\nimport React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport parse from \"html-react-parser\";\nimport styles from \"./FullMessage.module.css\";\nimport { fetchMessage, resetMessage } from \"../../store/actions\";\nimport { useParams, withRouter } from \"react-router-dom\";\nimport Spinner from \"../UI/Spinners/FormSpinner/FormSpinner\";\n\nconst FullMessage = props => {\n  const currentMessage = useSelector(state => state.message.currentMessage);\n  const setSuccess = useSelector(state => state.message.setSuccess);\n  const message = currentMessage ? currentMessage : props.history.location.passedMessage;\n  const dispatch = useDispatch();\n  const {\n    id\n  } = useParams();\n  useEffect(() => {\n    const passedMessage = props.history.location.passedMessage;\n\n    if (setSuccess === false) {\n      dispatch(resetMessage());\n      props.history.push(\"/\");\n    }\n\n    if (!passedMessage) {\n      dispatch(fetchMessage(id));\n    }\n\n    return () => passedMessage ? null : dispatch(resetMessage());\n  }, [dispatch, props.history, id]);\n  let messageBody = React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }); // const date = new Date(message.createdAt).toDateString();\n\n  if (message) {\n    messageBody = React.createElement(React.Fragment, null, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"To my\", \" \", React.createElement(\"span\", {\n      className: styles.MessageAttribute,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, message.who.name)), \",\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: styles.MessageDate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, date)), React.createElement(\"span\", {\n      className: styles.MessageMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, parse(message.message)), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"From your\", \" \", React.createElement(\"span\", {\n      className: styles.MessageAttribute,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, message.identity.name))));\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, messageBody);\n};\n\nexport default withRouter(FullMessage);","map":{"version":3,"sources":["/home/anthony/Desktop/if-you-were-here/client/src/components/FullMessage/FullMessage.js"],"names":["React","useEffect","useSelector","useDispatch","parse","styles","fetchMessage","resetMessage","useParams","withRouter","Spinner","FullMessage","props","currentMessage","state","message","setSuccess","history","location","passedMessage","dispatch","id","push","messageBody","MessageAttribute","who","name","MessageDate","date","MessageMessage","identity"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,YAAT,EAAuBC,YAAvB,QAA2C,qBAA3C;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,kBAAtC;AACA,OAAOC,OAAP,MAAoB,wCAApB;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAC7B,QAAMC,cAAc,GAAGX,WAAW,CAAEY,KAAD,IAAWA,KAAK,CAACC,OAAN,CAAcF,cAA1B,CAAlC;AACA,QAAMG,UAAU,GAAGd,WAAW,CAAEY,KAAD,IAAWA,KAAK,CAACC,OAAN,CAAcC,UAA1B,CAA9B;AACA,QAAMD,OAAO,GAAGF,cAAc,GAC1BA,cAD0B,GAE1BD,KAAK,CAACK,OAAN,CAAcC,QAAd,CAAuBC,aAF3B;AAGA,QAAMC,QAAQ,GAAGjB,WAAW,EAA5B;AACA,QAAM;AAAEkB,IAAAA;AAAF,MAASb,SAAS,EAAxB;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMkB,aAAa,GAAGP,KAAK,CAACK,OAAN,CAAcC,QAAd,CAAuBC,aAA7C;;AACA,QAAIH,UAAU,KAAK,KAAnB,EAA0B;AACxBI,MAAAA,QAAQ,CAACb,YAAY,EAAb,CAAR;AACAK,MAAAA,KAAK,CAACK,OAAN,CAAcK,IAAd,CAAmB,GAAnB;AACD;;AAED,QAAI,CAACH,aAAL,EAAoB;AAClBC,MAAAA,QAAQ,CAACd,YAAY,CAACe,EAAD,CAAb,CAAR;AACD;;AAED,WAAO,MAAOF,aAAa,GAAG,IAAH,GAAUC,QAAQ,CAACb,YAAY,EAAb,CAA7C;AACD,GAZQ,EAYN,CAACa,QAAD,EAAWR,KAAK,CAACK,OAAjB,EAA0BI,EAA1B,CAZM,CAAT;AAcA,MAAIE,WAAW,GAAG,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAlB,CAvB6B,CAyB7B;;AAEA,MAAIR,OAAJ,EAAa;AACXQ,IAAAA,WAAW,GACT,0CACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACQ,GADR,EAEE;AAAM,MAAA,SAAS,EAAElB,MAAM,CAACmB,gBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA2CT,OAAO,CAACU,GAAR,CAAYC,IAAvD,CAFF,CADF,OAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,EAOE;AAAM,MAAA,SAAS,EAAErB,MAAM,CAACsB,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAsCC,IAAtC,CAPF,CADF,EAUE;AAAM,MAAA,SAAS,EAAEvB,MAAM,CAACwB,cAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAyCzB,KAAK,CAACW,OAAO,CAACA,OAAT,CAA9C,CAVF,EAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACY,GADZ,EAEE;AAAM,MAAA,SAAS,EAAEV,MAAM,CAACmB,gBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGT,OAAO,CAACe,QAAR,CAAiBJ,IADpB,CAFF,CADF,CAXF,CADF;AAsBD;;AAED,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMH,WAAN,CAAP;AACD,CArDD;;AAuDA,eAAed,UAAU,CAACE,WAAD,CAAzB","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport parse from \"html-react-parser\";\nimport styles from \"./FullMessage.module.css\";\nimport { fetchMessage, resetMessage } from \"../../store/actions\";\nimport { useParams, withRouter } from \"react-router-dom\";\nimport Spinner from \"../UI/Spinners/FormSpinner/FormSpinner\";\n\nconst FullMessage = (props) => {\n  const currentMessage = useSelector((state) => state.message.currentMessage);\n  const setSuccess = useSelector((state) => state.message.setSuccess);\n  const message = currentMessage\n    ? currentMessage\n    : props.history.location.passedMessage;\n  const dispatch = useDispatch();\n  const { id } = useParams();\n\n  useEffect(() => {\n    const passedMessage = props.history.location.passedMessage;\n    if (setSuccess === false) {\n      dispatch(resetMessage());\n      props.history.push(\"/\");\n    }\n\n    if (!passedMessage) {\n      dispatch(fetchMessage(id));\n    }\n\n    return () => (passedMessage ? null : dispatch(resetMessage()));\n  }, [dispatch, props.history, id]);\n\n  let messageBody = <Spinner />;\n\n  // const date = new Date(message.createdAt).toDateString();\n\n  if (message) {\n    messageBody = (\n      <>\n        <p>\n          <b>\n            To my{\" \"}\n            <span className={styles.MessageAttribute}>{message.who.name}</span>\n          </b>\n          ,\n          <br />\n          <span className={styles.MessageDate}>{date}</span>\n        </p>\n        <span className={styles.MessageMessage}>{parse(message.message)}</span>\n        <p>\n          <b>\n            From your{\" \"}\n            <span className={styles.MessageAttribute}>\n              {message.identity.name}\n            </span>\n          </b>\n        </p>\n      </>\n    );\n  }\n\n  return <div>{messageBody}</div>;\n};\n\nexport default withRouter(FullMessage);\n"]},"metadata":{},"sourceType":"module"}