{"ast":null,"code":"var _jsxFileName = \"/home/anthony/Desktop/if-you-were-here/client/src/hoc/withErrorHandler.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nexport let interceptor;\n\nconst withErrorHandler = WrappedComponent => {\n  return props => {\n    const [error, setError] = useState(false);\n    const [errorMessage, setErrorMessage] = useState(\"\");\n\n    interceptor = response => {\n      setError(true);\n      setErrorMessage(`${response}`);\n    };\n\n    let body = React.createElement(WrappedComponent, Object.assign({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }));\n\n    if (error) {\n      body = React.createElement(React.Fragment, null, errorMessage);\n    }\n\n    return body;\n  };\n};\n\nexport default withErrorHandler;","map":{"version":3,"sources":["/home/anthony/Desktop/if-you-were-here/client/src/hoc/withErrorHandler.js"],"names":["React","useState","useEffect","useSelector","interceptor","withErrorHandler","WrappedComponent","props","error","setError","errorMessage","setErrorMessage","response","body"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAO,IAAIC,WAAJ;;AAEP,MAAMC,gBAAgB,GAAIC,gBAAD,IAAsB;AAC7C,SAAQC,KAAD,IAAW;AAChB,UAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,KAAD,CAAlC;AACA,UAAM,CAACS,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAAC,EAAD,CAAhD;;AAEAG,IAAAA,WAAW,GAAIQ,QAAD,IAAc;AAC1BH,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACAE,MAAAA,eAAe,CAAE,GAAEC,QAAS,EAAb,CAAf;AACD,KAHD;;AAKA,QAAIC,IAAI,GAAG,oBAAC,gBAAD,oBAAsBN,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAX;;AAEA,QAAIC,KAAJ,EAAW;AACTK,MAAAA,IAAI,GAAG,0CAAGH,YAAH,CAAP;AACD;;AAED,WAAOG,IAAP;AACD,GAhBD;AAiBD,CAlBD;;AAoBA,eAAeR,gBAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nexport let interceptor;\n\nconst withErrorHandler = (WrappedComponent) => {\n  return (props) => {\n    const [error, setError] = useState(false);\n    const [errorMessage, setErrorMessage] = useState(\"\");\n\n    interceptor = (response) => {\n      setError(true);\n      setErrorMessage(`${response}`);\n    };\n\n    let body = <WrappedComponent {...props} />;\n\n    if (error) {\n      body = <>{errorMessage}</>;\n    }\n\n    return body;\n  };\n};\n\nexport default withErrorHandler;\n"]},"metadata":{},"sourceType":"module"}