{"ast":null,"code":"import _slicedToArray from\"/home/anthony/Desktop/if-you-were-here/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import MessageSnapshot from\"../../components/MessageSnapshot/MessageSnapshot\";import LoadMore from\"../../components/UI/Buttons/LoadMore/LoadMore\";//in the future, if there were to be more than 1000 posts lets say, I would load 500 posts at a time (via the api), and use the\n//useEffect hook to call the api to load another 500 posts once messageCutoff reached a certain point (like 470)\n//to maximize efficiency and speed\nvar LoadMoreContainer=function LoadMoreContainer(props){var _useState=useState(14),_useState2=_slicedToArray(_useState,2),messagesCutoff=_useState2[0],setMessagesCutoff=_useState2[1];var _useState3=useState(14),_useState4=_slicedToArray(_useState3,2),filteredCutoff=_useState4[0],setFilteredCutoff=_useState4[1];//calculate how many messages can be loaded that aren't already displayed\n//if each respective value is greater than 0, the loadmore button should display\nvar filteredCalculation=props.filteredMessages.length-filteredCutoff;var messageCalculation=props.messages.length-messagesCutoff;//calculate the marker (the amount of posts to load... another 14, or if there are less than 14 left to load,\n//the remaining amount) and set the cutoff\nvar loadMoreFilteredMessages=function loadMoreFilteredMessages(count){var marker=filteredCalculation>=count?count:filteredCalculation;setFilteredCutoff(function(prevState){return prevState+marker;});};var loadMoreMessages=function loadMoreMessages(count){var marker=messageCalculation>=count?count:messageCalculation;setMessagesCutoff(function(prevState){return prevState+marker;});};var loadMessages=null;var loadedMessages=null;//display the loadmore for unfiltered messages, or display the loadmore (button and messages) for filtered messages.\nif(props.filteredMessages.length>14){loadMessages=React.createElement(LoadMore,{show:filteredCalculation>0,loadMoreMessages:loadMoreFilteredMessages});loadedMessages=props.filteredMessages.slice(14,filteredCutoff).map(function(message,index){return React.createElement(MessageSnapshot,{key:index,entry:message,marker:index+14});});}else if(props.messages.length>14&&!props.filtered){loadMessages=React.createElement(LoadMore,{show:messageCalculation>0,loadMoreMessages:loadMoreMessages});loadedMessages=props.messages.slice(14,messagesCutoff).map(function(message,index){return React.createElement(MessageSnapshot,{key:index,entry:message,marker:index+14});});}return React.createElement(React.Fragment,null,loadedMessages,loadMessages);};export default LoadMoreContainer;","map":{"version":3,"sources":["/home/anthony/Desktop/if-you-were-here/client/src/containers/LoadMoreContainer/LoadMoreContainer.js"],"names":["React","useState","MessageSnapshot","LoadMore","LoadMoreContainer","props","messagesCutoff","setMessagesCutoff","filteredCutoff","setFilteredCutoff","filteredCalculation","filteredMessages","length","messageCalculation","messages","loadMoreFilteredMessages","count","marker","prevState","loadMoreMessages","loadMessages","loadedMessages","slice","map","message","index","filtered"],"mappings":"oKAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,MAAOC,CAAAA,eAAP,KAA4B,kDAA5B,CACA,MAAOC,CAAAA,QAAP,KAAqB,+CAArB,CAEA;AACA;AACA;AAEA,GAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,KAAD,CAAW,eACSJ,QAAQ,CAAC,EAAD,CADjB,wCAC5BK,cAD4B,eACZC,iBADY,8BAESN,QAAQ,CAAC,EAAD,CAFjB,yCAE5BO,cAF4B,eAEZC,iBAFY,eAInC;AACA;AACA,GAAMC,CAAAA,mBAAmB,CAAGL,KAAK,CAACM,gBAAN,CAAuBC,MAAvB,CAAgCJ,cAA5D,CACA,GAAMK,CAAAA,kBAAkB,CAAGR,KAAK,CAACS,QAAN,CAAeF,MAAf,CAAwBN,cAAnD,CAEA;AACA;AACA,GAAMS,CAAAA,wBAAwB,CAAG,QAA3BA,CAAAA,wBAA2B,CAACC,KAAD,CAAW,CAC1C,GAAMC,CAAAA,MAAM,CAAGP,mBAAmB,EAAIM,KAAvB,CAA+BA,KAA/B,CAAuCN,mBAAtD,CACAD,iBAAiB,CAAC,SAACS,SAAD,QAAeA,CAAAA,SAAS,CAAGD,MAA3B,EAAD,CAAjB,CACD,CAHD,CAKA,GAAME,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACH,KAAD,CAAW,CAClC,GAAMC,CAAAA,MAAM,CAAGJ,kBAAkB,EAAIG,KAAtB,CAA8BA,KAA9B,CAAsCH,kBAArD,CACAN,iBAAiB,CAAC,SAACW,SAAD,QAAeA,CAAAA,SAAS,CAAGD,MAA3B,EAAD,CAAjB,CACD,CAHD,CAKA,GAAIG,CAAAA,YAAY,CAAG,IAAnB,CACA,GAAIC,CAAAA,cAAc,CAAG,IAArB,CAEA;AACA,GAAIhB,KAAK,CAACM,gBAAN,CAAuBC,MAAvB,CAAgC,EAApC,CAAwC,CACtCQ,YAAY,CACV,oBAAC,QAAD,EACE,IAAI,CAAEV,mBAAmB,CAAG,CAD9B,CAEE,gBAAgB,CAAEK,wBAFpB,EADF,CAOAM,cAAc,CAAGhB,KAAK,CAACM,gBAAN,CACdW,KADc,CACR,EADQ,CACJd,cADI,EAEde,GAFc,CAEV,SAACC,OAAD,CAAUC,KAAV,CAAoB,CACvB,MACE,qBAAC,eAAD,EACE,GAAG,CAAEA,KADP,CAEE,KAAK,CAAED,OAFT,CAGE,MAAM,CAAEC,KAAK,CAAG,EAHlB,EADF,CAOD,CAVc,CAAjB,CAWD,CAnBD,IAmBO,IAAIpB,KAAK,CAACS,QAAN,CAAeF,MAAf,CAAwB,EAAxB,EAA8B,CAACP,KAAK,CAACqB,QAAzC,CAAmD,CACxDN,YAAY,CACV,oBAAC,QAAD,EACE,IAAI,CAAEP,kBAAkB,CAAG,CAD7B,CAEE,gBAAgB,CAAEM,gBAFpB,EADF,CAOAE,cAAc,CAAGhB,KAAK,CAACS,QAAN,CACdQ,KADc,CACR,EADQ,CACJhB,cADI,EAEdiB,GAFc,CAEV,SAACC,OAAD,CAAUC,KAAV,CAAoB,CACvB,MACE,qBAAC,eAAD,EACE,GAAG,CAAEA,KADP,CAEE,KAAK,CAAED,OAFT,CAGE,MAAM,CAAEC,KAAK,CAAG,EAHlB,EADF,CAOD,CAVc,CAAjB,CAWD,CAED,MACE,yCACGJ,cADH,CAEGD,YAFH,CADF,CAMD,CAvED,CAyEA,cAAehB,CAAAA,iBAAf","sourcesContent":["import React, { useState } from \"react\";\nimport MessageSnapshot from \"../../components/MessageSnapshot/MessageSnapshot\";\nimport LoadMore from \"../../components/UI/Buttons/LoadMore/LoadMore\";\n\n//in the future, if there were to be more than 1000 posts lets say, I would load 500 posts at a time (via the api), and use the\n//useEffect hook to call the api to load another 500 posts once messageCutoff reached a certain point (like 470)\n//to maximize efficiency and speed\n\nconst LoadMoreContainer = (props) => {\n  const [messagesCutoff, setMessagesCutoff] = useState(14);\n  const [filteredCutoff, setFilteredCutoff] = useState(14);\n\n  //calculate how many messages can be loaded that aren't already displayed\n  //if each respective value is greater than 0, the loadmore button should display\n  const filteredCalculation = props.filteredMessages.length - filteredCutoff;\n  const messageCalculation = props.messages.length - messagesCutoff;\n\n  //calculate the marker (the amount of posts to load... another 14, or if there are less than 14 left to load,\n  //the remaining amount) and set the cutoff\n  const loadMoreFilteredMessages = (count) => {\n    const marker = filteredCalculation >= count ? count : filteredCalculation;\n    setFilteredCutoff((prevState) => prevState + marker);\n  };\n\n  const loadMoreMessages = (count) => {\n    const marker = messageCalculation >= count ? count : messageCalculation;\n    setMessagesCutoff((prevState) => prevState + marker);\n  };\n\n  let loadMessages = null;\n  let loadedMessages = null;\n\n  //display the loadmore for unfiltered messages, or display the loadmore (button and messages) for filtered messages.\n  if (props.filteredMessages.length > 14) {\n    loadMessages = (\n      <LoadMore\n        show={filteredCalculation > 0}\n        loadMoreMessages={loadMoreFilteredMessages}\n      />\n    );\n\n    loadedMessages = props.filteredMessages\n      .slice(14, filteredCutoff)\n      .map((message, index) => {\n        return (\n          <MessageSnapshot\n            key={index}\n            entry={message}\n            marker={index + 14}\n          ></MessageSnapshot>\n        );\n      });\n  } else if (props.messages.length > 14 && !props.filtered) {\n    loadMessages = (\n      <LoadMore\n        show={messageCalculation > 0}\n        loadMoreMessages={loadMoreMessages}\n      />\n    );\n\n    loadedMessages = props.messages\n      .slice(14, messagesCutoff)\n      .map((message, index) => {\n        return (\n          <MessageSnapshot\n            key={index}\n            entry={message}\n            marker={index + 14}\n          ></MessageSnapshot>\n        );\n      });\n  }\n\n  return (\n    <>\n      {loadedMessages}\n      {loadMessages}\n    </>\n  );\n};\n\nexport default LoadMoreContainer;\n"]},"metadata":{},"sourceType":"module"}