{"ast":null,"code":"import * as actionTypes from \"./actionTypes\";\nimport { sortMessages } from \"./index\";\nexport const addFilter = (filter, name, filtered, sort) => {\n  return dispatch => {\n    try {\n      dispatch(filterMessagesStart());\n      dispatch(filterMessagesAdd(filter, name));\n      dispatch(filterMessages());\n\n      if (sort) {\n        dispatch(sortMessages(filtered));\n      }\n    } catch (err) {\n      dispatch(filterMessagesFail(err));\n    }\n  };\n};\nexport const removeFilter = (filter, name, filtered, sort) => {\n  return dispatch => {\n    try {\n      dispatch(filterMessagesStart());\n      dispatch(filterMessagesRemove(filter, name));\n      dispatch(filterMessages());\n\n      if (sort) {\n        dispatch(sortMessages(filtered));\n      }\n    } catch (err) {\n      dispatch(filterMessagesFail(err));\n    }\n  };\n};\nexport const filterMessagesAdd = (filter, name) => {\n  return {\n    type: actionTypes.FILTER_MESSAGES_ADD,\n    filter,\n    name\n  };\n};\nexport const filterMessagesRemove = (filter, name) => {\n  return {\n    type: actionTypes.FILTER_MESSAGES_REMOVE,\n    filter,\n    name\n  };\n};\nexport const filterMessages = () => {\n  return {\n    type: actionTypes.FILTER_MESSAGES\n  };\n};\nexport const filterMessagesStart = () => {\n  return {\n    type: actionTypes.FILTER_MESSAGES_START\n  };\n};\nexport const filterMessagesFail = error => {\n  return {\n    type: actionTypes.FILTER_MESSAGES_FAIL,\n    error\n  };\n};\nexport const filterReset = () => {\n  return {\n    type: actionTypes.FILTER_RESET\n  };\n};","map":{"version":3,"sources":["/home/anthony/Desktop/if-you-were-here/client/src/store/actions/filterMessages.js"],"names":["actionTypes","sortMessages","addFilter","filter","name","filtered","sort","dispatch","filterMessagesStart","filterMessagesAdd","filterMessages","err","filterMessagesFail","removeFilter","filterMessagesRemove","type","FILTER_MESSAGES_ADD","FILTER_MESSAGES_REMOVE","FILTER_MESSAGES","FILTER_MESSAGES_START","error","FILTER_MESSAGES_FAIL","filterReset","FILTER_RESET"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AACA,SAASC,YAAT,QAA6B,SAA7B;AAEA,OAAO,MAAMC,SAAS,GAAG,CAACC,MAAD,EAASC,IAAT,EAAeC,QAAf,EAAyBC,IAAzB,KAAkC;AACzD,SAAOC,QAAQ,IAAI;AACjB,QAAI;AACFA,MAAAA,QAAQ,CAACC,mBAAmB,EAApB,CAAR;AACAD,MAAAA,QAAQ,CAACE,iBAAiB,CAACN,MAAD,EAASC,IAAT,CAAlB,CAAR;AACAG,MAAAA,QAAQ,CAACG,cAAc,EAAf,CAAR;;AACA,UAAIJ,IAAJ,EAAU;AACRC,QAAAA,QAAQ,CAACN,YAAY,CAACI,QAAD,CAAb,CAAR;AACD;AACF,KAPD,CAOE,OAAOM,GAAP,EAAY;AACZJ,MAAAA,QAAQ,CAACK,kBAAkB,CAACD,GAAD,CAAnB,CAAR;AACD;AACF,GAXD;AAYD,CAbM;AAeP,OAAO,MAAME,YAAY,GAAG,CAACV,MAAD,EAASC,IAAT,EAAeC,QAAf,EAAyBC,IAAzB,KAAkC;AAC5D,SAAOC,QAAQ,IAAI;AACjB,QAAI;AACFA,MAAAA,QAAQ,CAACC,mBAAmB,EAApB,CAAR;AACAD,MAAAA,QAAQ,CAACO,oBAAoB,CAACX,MAAD,EAASC,IAAT,CAArB,CAAR;AACAG,MAAAA,QAAQ,CAACG,cAAc,EAAf,CAAR;;AACA,UAAIJ,IAAJ,EAAU;AACRC,QAAAA,QAAQ,CAACN,YAAY,CAACI,QAAD,CAAb,CAAR;AACD;AACF,KAPD,CAOE,OAAOM,GAAP,EAAY;AACZJ,MAAAA,QAAQ,CAACK,kBAAkB,CAACD,GAAD,CAAnB,CAAR;AACD;AACF,GAXD;AAYD,CAbM;AAeP,OAAO,MAAMF,iBAAiB,GAAG,CAACN,MAAD,EAASC,IAAT,KAAkB;AACjD,SAAO;AACLW,IAAAA,IAAI,EAAEf,WAAW,CAACgB,mBADb;AAELb,IAAAA,MAFK;AAGLC,IAAAA;AAHK,GAAP;AAKD,CANM;AAQP,OAAO,MAAMU,oBAAoB,GAAG,CAACX,MAAD,EAASC,IAAT,KAAkB;AACpD,SAAO;AACLW,IAAAA,IAAI,EAAEf,WAAW,CAACiB,sBADb;AAELd,IAAAA,MAFK;AAGLC,IAAAA;AAHK,GAAP;AAKD,CANM;AAQP,OAAO,MAAMM,cAAc,GAAG,MAAM;AAClC,SAAO;AACLK,IAAAA,IAAI,EAAEf,WAAW,CAACkB;AADb,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMV,mBAAmB,GAAG,MAAM;AACvC,SAAO;AACLO,IAAAA,IAAI,EAAEf,WAAW,CAACmB;AADb,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMP,kBAAkB,GAAGQ,KAAK,IAAI;AACzC,SAAO;AACLL,IAAAA,IAAI,EAAEf,WAAW,CAACqB,oBADb;AAELD,IAAAA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,MAAME,WAAW,GAAG,MAAM;AAC/B,SAAO;AACLP,IAAAA,IAAI,EAAEf,WAAW,CAACuB;AADb,GAAP;AAGD,CAJM","sourcesContent":["import * as actionTypes from \"./actionTypes\";\nimport { sortMessages } from \"./index\";\n\nexport const addFilter = (filter, name, filtered, sort) => {\n  return dispatch => {\n    try {\n      dispatch(filterMessagesStart());\n      dispatch(filterMessagesAdd(filter, name));\n      dispatch(filterMessages());\n      if (sort) {\n        dispatch(sortMessages(filtered));\n      }\n    } catch (err) {\n      dispatch(filterMessagesFail(err));\n    }\n  };\n};\n\nexport const removeFilter = (filter, name, filtered, sort) => {\n  return dispatch => {\n    try {\n      dispatch(filterMessagesStart());\n      dispatch(filterMessagesRemove(filter, name));\n      dispatch(filterMessages());\n      if (sort) {\n        dispatch(sortMessages(filtered));\n      }\n    } catch (err) {\n      dispatch(filterMessagesFail(err));\n    }\n  };\n};\n\nexport const filterMessagesAdd = (filter, name) => {\n  return {\n    type: actionTypes.FILTER_MESSAGES_ADD,\n    filter,\n    name\n  };\n};\n\nexport const filterMessagesRemove = (filter, name) => {\n  return {\n    type: actionTypes.FILTER_MESSAGES_REMOVE,\n    filter,\n    name\n  };\n};\n\nexport const filterMessages = () => {\n  return {\n    type: actionTypes.FILTER_MESSAGES\n  };\n};\n\nexport const filterMessagesStart = () => {\n  return {\n    type: actionTypes.FILTER_MESSAGES_START\n  };\n};\n\nexport const filterMessagesFail = error => {\n  return {\n    type: actionTypes.FILTER_MESSAGES_FAIL,\n    error\n  };\n};\n\nexport const filterReset = () => {\n  return {\n    type: actionTypes.FILTER_RESET\n  };\n};\n"]},"metadata":{},"sourceType":"module"}