{"ast":null,"code":"var _jsxFileName = \"/home/anthony/Desktop/if-you-were-here/src/containers/PostForm/PostForm.js\";\nimport React, { useState, useReducer, useEffect } from \"react\";\nimport styles from \"./PostForm.module.css\";\nimport Modal from \"../../components/UI/Modal/Modal\";\nimport Identity from \"../../components/Identity/Identity\";\nimport Who from \"../../components/Who/Who\";\nimport Message from \"../../components/Message/Message\";\nimport FormSpinner from \"../../components/UI/Spinners/FormSpinner/FormSpinner\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { submitPost, submitPostReset } from \"../../store/actions\";\nconst initialState = {\n  identity: null,\n  who: null,\n  message: null\n};\n\nconst formReducer = (formState, action) => {\n  switch (action.type) {\n    case \"identity\":\n      return { ...formState,\n        identity: action.value\n      };\n\n    case \"who\":\n      return { ...formState,\n        who: action.value\n      };\n\n    case \"message\":\n      return { ...formState,\n        message: action.value\n      };\n\n    case \"reset\":\n      return { ...initialState\n      };\n\n    case \"submit\":\n      return { ...formState\n      };\n\n    default:\n      break;\n  }\n};\n\nconst PostForm = () => {\n  const [formState, dispatchForm] = useReducer(formReducer, initialState);\n  const [open, setOpen] = useState(false);\n  const [sectionIndex, setSectionIndex] = useState(0);\n  const postSuccess = useSelector(state => state.success);\n  const postError = useSelector(state => state.error);\n  const postLoading = useSelector(state => state.loading);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (postSuccess) {\n      dispatchForm({\n        type: \"reset\"\n      });\n      dispatch(submitPostReset());\n    }\n  }, [postSuccess, dispatch]);\n\n  const openHandler = () => setOpen(oldState => !oldState);\n\n  const switchHandler = (type, name, formValue) => {\n    if (type === \"next\" && sectionIndex === sections.length - 1) {\n      setSectionIndex(prevIndex => prevIndex);\n      dispatchForm({\n        type: name,\n        value: formValue\n      });\n    } else if (type === \"next\") {\n      setSectionIndex(prevIndex => prevIndex + 1);\n      dispatchForm({\n        type: name,\n        value: formValue\n      });\n    } else if (type === \"prev\") {\n      setSectionIndex(prevIndex => prevIndex - 1);\n      dispatchForm({\n        type: name,\n        value: formValue\n      });\n    } else {\n      dispatchForm({\n        type: name,\n        value: formValue\n      });\n      const body = {\n        identity: formState.identity,\n        who: formState.who,\n        message: formValue\n      };\n      dispatch(submitPost(body));\n      setSectionIndex(0);\n    }\n  };\n\n  const sections = [React.createElement(Identity, {\n    switchHandler: switchHandler,\n    identityValue: formState.identity,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }), React.createElement(Who, {\n    switchHandler: switchHandler,\n    whoValue: formState.who,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }), React.createElement(Message, {\n    switchHandler: switchHandler,\n    messageValue: formState.message,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  })];\n  let postFormBody = React.createElement(React.Fragment, null, React.createElement(Modal, {\n    open: open,\n    openHandler: openHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, sections[sectionIndex]), React.createElement(\"div\", {\n    className: styles.TextBox,\n    onClick: () => openHandler(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, \"Enter Here \", React.createElement(\"span\", {\n    className: styles.TypeWriter,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, \"|\")));\n\n  if (postLoading) {\n    postFormBody = React.createElement(FormSpinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    });\n  } else if (postError) {}\n\n  return React.createElement(React.Fragment, null, postFormBody);\n};\n\nexport default PostForm;","map":{"version":3,"sources":["/home/anthony/Desktop/if-you-were-here/src/containers/PostForm/PostForm.js"],"names":["React","useState","useReducer","useEffect","styles","Modal","Identity","Who","Message","FormSpinner","useDispatch","useSelector","submitPost","submitPostReset","initialState","identity","who","message","formReducer","formState","action","type","value","PostForm","dispatchForm","open","setOpen","sectionIndex","setSectionIndex","postSuccess","state","success","postError","error","postLoading","loading","dispatch","openHandler","oldState","switchHandler","name","formValue","sections","length","prevIndex","body","postFormBody","TextBox","TypeWriter"],"mappings":"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","sourcesContent":["import React, { useState, useReducer, useEffect } from \"react\";\nimport styles from \"./PostForm.module.css\";\nimport Modal from \"../../components/UI/Modal/Modal\";\nimport Identity from \"../../components/Identity/Identity\";\nimport Who from \"../../components/Who/Who\";\nimport Message from \"../../components/Message/Message\";\nimport FormSpinner from \"../../components/UI/Spinners/FormSpinner/FormSpinner\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { submitPost, submitPostReset } from \"../../store/actions\";\n\nconst initialState = {\n  identity: null,\n  who: null,\n  message: null\n};\n\nconst formReducer = (formState, action) => {\n  switch (action.type) {\n    case \"identity\":\n      return {\n        ...formState,\n        identity: action.value\n      };\n    case \"who\":\n      return {\n        ...formState,\n        who: action.value\n      };\n    case \"message\":\n      return {\n        ...formState,\n        message: action.value\n      };\n    case \"reset\":\n      return {\n        ...initialState\n      };\n    case \"submit\":\n      return {\n        ...formState\n      };\n    default:\n      break;\n  }\n};\n\nconst PostForm = () => {\n  const [formState, dispatchForm] = useReducer(formReducer, initialState);\n  const [open, setOpen] = useState(false);\n  const [sectionIndex, setSectionIndex] = useState(0);\n  const postSuccess = useSelector(state => state.success);\n  const postError = useSelector(state => state.error);\n  const postLoading = useSelector(state => state.loading);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (postSuccess) {\n      dispatchForm({ type: \"reset\" });\n      dispatch(submitPostReset());\n    }\n  }, [postSuccess, dispatch]);\n\n  const openHandler = () => setOpen(oldState => !oldState);\n\n  const switchHandler = (type, name, formValue) => {\n    if (type === \"next\" && sectionIndex === sections.length - 1) {\n      setSectionIndex(prevIndex => prevIndex);\n      dispatchForm({ type: name, value: formValue });\n    } else if (type === \"next\") {\n      setSectionIndex(prevIndex => prevIndex + 1);\n      dispatchForm({ type: name, value: formValue });\n    } else if (type === \"prev\") {\n      setSectionIndex(prevIndex => prevIndex - 1);\n      dispatchForm({ type: name, value: formValue });\n    } else {\n      dispatchForm({ type: name, value: formValue });\n      const body = {\n        identity: formState.identity,\n        who: formState.who,\n        message: formValue\n      };\n      dispatch(submitPost(body));\n      setSectionIndex(0);\n    }\n  };\n\n  const sections = [\n    <Identity\n      switchHandler={switchHandler}\n      identityValue={formState.identity}\n    />,\n    <Who switchHandler={switchHandler} whoValue={formState.who} />,\n    <Message switchHandler={switchHandler} messageValue={formState.message} />\n  ];\n\n  let postFormBody = (\n    <>\n      <Modal open={open} openHandler={openHandler}>\n        {sections[sectionIndex]}\n      </Modal>\n      <div className={styles.TextBox} onClick={() => openHandler()}>\n        Enter Here <span className={styles.TypeWriter}>|</span>\n      </div>\n    </>\n  );\n\n  if (postLoading) {\n    postFormBody = <FormSpinner />;\n  } else if (postError) {\n  }\n\n  return <>{postFormBody}</>;\n};\n\nexport default PostForm;\n"]},"metadata":{},"sourceType":"module"}