{"ast":null,"code":"var _jsxFileName = \"/home/anthony/Desktop/if-you-were-here/src/components/FilterOptions/FilterOption/FilterOption.js\";\nimport React, { useState, useEffect } from \"react\";\nimport styles from \"./FilterOption.module.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addFilter, removeFilter } from \"../../../store/actions\";\n\nconst FilterOption = props => {\n  const [selected, setSelected] = useState(false);\n  const {\n    who,\n    identity\n  } = useSelector(state => state.filters);\n  const sort = useSelector(state => state.sort);\n  const dispatch = useDispatch();\n  const {\n    filter,\n    filterHandler,\n    filterSelected,\n    name\n  } = props;\n\n  const selectHandler = (filter, name) => {\n    // if (filterSelected && filter !== filterSelected) {\n    // if (filterSelected && filter !== filterSelected) {\n    //   // return;\n    //     setSelected(prevState => !prevState);\n    // filterHandler(filter, name);\n    // }\n    setSelected(prevState => !prevState);\n    filterHandler(filter, name);\n  };\n\n  useEffect(() => {\n    if (filter !== filterSelected) {\n      setSelected(false);\n    } //we need to check to see if the content is filtered-- to determine which array of posts to sort\n    //(the filtered ones, or unfiltered). this is because a sortPosts action is embeded in the filterPosts action\n    // filtered value will get passed to that sortPosts action function\n\n\n    const filtered = who !== null && identity !== null;\n\n    if (!selected && (who || identity)) {\n      dispatch(removeFilter(filter, name, filtered, sort));\n    } else if (selected) {\n      dispatch(addFilter(filter, name, true, sort));\n    }\n  }, []);\n  return React.createElement(\"div\", {\n    className: selected ? styles.FilterOptionSelected : styles.FilterOption,\n    onClick: () => selectHandler(filter, name),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, props.filter);\n};\n\nexport default FilterOption;","map":{"version":3,"sources":["/home/anthony/Desktop/if-you-were-here/src/components/FilterOptions/FilterOption/FilterOption.js"],"names":["React","useState","useEffect","styles","useDispatch","useSelector","addFilter","removeFilter","FilterOption","props","selected","setSelected","who","identity","state","filters","sort","dispatch","filter","filterHandler","filterSelected","name","selectHandler","prevState","filtered","FilterOptionSelected"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,SAAT,EAAoBC,YAApB,QAAwC,wBAAxC;;AAEA,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAC5B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM;AAAEW,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAoBR,WAAW,CAACS,KAAK,IAAIA,KAAK,CAACC,OAAhB,CAArC;AACA,QAAMC,IAAI,GAAGX,WAAW,CAACS,KAAK,IAAIA,KAAK,CAACE,IAAhB,CAAxB;AACA,QAAMC,QAAQ,GAAGb,WAAW,EAA5B;AACA,QAAM;AAAEc,IAAAA,MAAF;AAAUC,IAAAA,aAAV;AAAyBC,IAAAA,cAAzB;AAAyCC,IAAAA;AAAzC,MAAkDZ,KAAxD;;AACA,QAAMa,aAAa,GAAG,CAACJ,MAAD,EAASG,IAAT,KAAkB;AACtC;AACA;AACA;AACA;AACA;AACA;AACAV,IAAAA,WAAW,CAACY,SAAS,IAAI,CAACA,SAAf,CAAX;AACAJ,IAAAA,aAAa,CAACD,MAAD,EAASG,IAAT,CAAb;AACD,GATD;;AAWAnB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgB,MAAM,KAAKE,cAAf,EAA+B;AAC7BT,MAAAA,WAAW,CAAC,KAAD,CAAX;AACD,KAHa,CAId;AACA;AACA;;;AACA,UAAMa,QAAQ,GAAGZ,GAAG,KAAK,IAAR,IAAgBC,QAAQ,KAAK,IAA9C;;AACA,QAAI,CAACH,QAAD,KAAcE,GAAG,IAAIC,QAArB,CAAJ,EAAoC;AAClCI,MAAAA,QAAQ,CAACV,YAAY,CAACW,MAAD,EAASG,IAAT,EAAeG,QAAf,EAAyBR,IAAzB,CAAb,CAAR;AACD,KAFD,MAEO,IAAIN,QAAJ,EAAc;AACnBO,MAAAA,QAAQ,CAACX,SAAS,CAACY,MAAD,EAASG,IAAT,EAAe,IAAf,EAAqBL,IAArB,CAAV,CAAR;AACD;AACF,GAbQ,EAaN,EAbM,CAAT;AAeA,SACE;AACE,IAAA,SAAS,EAAEN,QAAQ,GAAGP,MAAM,CAACsB,oBAAV,GAAiCtB,MAAM,CAACK,YAD7D;AAEE,IAAA,OAAO,EAAE,MAAMc,aAAa,CAACJ,MAAD,EAASG,IAAT,CAF9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGZ,KAAK,CAACS,MAJT,CADF;AAQD,CAxCD;;AA0CA,eAAeV,YAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport styles from \"./FilterOption.module.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addFilter, removeFilter } from \"../../../store/actions\";\n\nconst FilterOption = props => {\n  const [selected, setSelected] = useState(false);\n  const { who, identity } = useSelector(state => state.filters);\n  const sort = useSelector(state => state.sort);\n  const dispatch = useDispatch();\n  const { filter, filterHandler, filterSelected, name } = props;\n  const selectHandler = (filter, name) => {\n    // if (filterSelected && filter !== filterSelected) {\n    // if (filterSelected && filter !== filterSelected) {\n    //   // return;\n    //     setSelected(prevState => !prevState);\n    // filterHandler(filter, name);\n    // }\n    setSelected(prevState => !prevState);\n    filterHandler(filter, name);\n  };\n\n  useEffect(() => {\n    if (filter !== filterSelected) {\n      setSelected(false);\n    }\n    //we need to check to see if the content is filtered-- to determine which array of posts to sort\n    //(the filtered ones, or unfiltered). this is because a sortPosts action is embeded in the filterPosts action\n    // filtered value will get passed to that sortPosts action function\n    const filtered = who !== null && identity !== null;\n    if (!selected && (who || identity)) {\n      dispatch(removeFilter(filter, name, filtered, sort));\n    } else if (selected) {\n      dispatch(addFilter(filter, name, true, sort));\n    }\n  }, []);\n\n  return (\n    <div\n      className={selected ? styles.FilterOptionSelected : styles.FilterOption}\n      onClick={() => selectHandler(filter, name)}\n    >\n      {props.filter}\n    </div>\n  );\n};\n\nexport default FilterOption;\n"]},"metadata":{},"sourceType":"module"}