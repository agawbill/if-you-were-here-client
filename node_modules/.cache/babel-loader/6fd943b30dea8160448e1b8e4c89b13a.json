{"ast":null,"code":"import * as actionTypes from \"./actionTypes\";\nexport const fetchMessages = () => {\n  return async dispatch => {\n    try {\n      dispatch(submitMessageStart());\n      const response = await fetch(\"api/messages\", {\n        method: \"GET\",\n        mode: \"cors\",\n        cache: \"no-cache\",\n        credentials: \"same-origin\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const data = await response.json();\n      dispatch(fetchMessagesSuccess(data));\n    } catch (err) {\n      dispatch(fetchMessagesFail(err));\n    }\n  };\n};\nexport const findMessage = messageId => {\n  return async dispatch => {\n    try {\n      dispatch(findMessageStart());\n      const response = await fetch(`api/messages/${messageId}`, {\n        method: \"GET\",\n        mode: \"cors\",\n        cache: \"no-cache\",\n        credentials: \"same-origin\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const data = await response.json();\n      dispatch(findMessageSuccess(data));\n    } catch (err) {\n      dispatch(findMessageFail(err));\n    }\n  };\n};\nexport const findMessageStart = () => {\n  return {\n    type: actionTypes.FIND_MESSAGE_START\n  };\n};\nexport const findMessageSuccess = message => {\n  return {\n    type: actionTypes.FIND_MESSAGE_START,\n    message\n  };\n};\nexport const findMessageFail = messages => {\n  return {\n    type: actionTypes.FETCH_MESSAGE_SUCCESS,\n    messages\n  };\n};\nexport const fetchMessagesSuccess = messages => {\n  return {\n    type: actionTypes.FETCH_MESSAGE_SUCCESS,\n    messages\n  };\n};\nexport const fetchMessagesFail = messages => {\n  return {\n    type: actionTypes.FETCH_MESSAGE_SUCCESS,\n    messages\n  };\n};\nexport const submitMessage = message => {\n  return async dispatch => {\n    try {\n      dispatch(submitMessageStart());\n      const response = await fetch(\"api/messages\", {\n        method: \"POST\",\n        mode: \"cors\",\n        cache: \"no-cache\",\n        credentials: \"same-origin\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(message)\n      });\n      const data = await response.json();\n      dispatch(submitMessageSuccess(data));\n    } catch (err) {\n      dispatch(submitMessageFail(err));\n    }\n  };\n};\nexport const submitMessageStart = () => {\n  return {\n    type: actionTypes.SUBMIT_MESSAGE_START\n  };\n};\nexport const submitMessageSuccess = message => {\n  return {\n    type: actionTypes.SUBMIT_MESSAGE_SUCCESS,\n    message\n  };\n};\nexport const submitMessageFail = error => {\n  return {\n    type: actionTypes.SUBMIT_MESSAGE_FAIL,\n    error: error.message\n  };\n};\nexport const submitMessageReset = () => {\n  return {\n    type: actionTypes.SUBMIT_MESSAGE_RESET\n  };\n};\nexport const setMessage = messageId => {\n  return {\n    type: actionTypes.FIND_MESSAGE,\n    messageId\n  };\n};\nexport const resetMessage = () => {\n  return {\n    type: actionTypes.RESET_MESSAGE\n  };\n};","map":{"version":3,"sources":["/home/anthony/Desktop/if-you-were-here/client/src/store/actions/messages.js"],"names":["actionTypes","fetchMessages","dispatch","submitMessageStart","response","fetch","method","mode","cache","credentials","headers","data","json","fetchMessagesSuccess","err","fetchMessagesFail","findMessage","messageId","findMessageStart","findMessageSuccess","findMessageFail","type","FIND_MESSAGE_START","message","messages","FETCH_MESSAGE_SUCCESS","submitMessage","body","JSON","stringify","submitMessageSuccess","submitMessageFail","SUBMIT_MESSAGE_START","SUBMIT_MESSAGE_SUCCESS","error","SUBMIT_MESSAGE_FAIL","submitMessageReset","SUBMIT_MESSAGE_RESET","setMessage","FIND_MESSAGE","resetMessage","RESET_MESSAGE"],"mappings":"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","sourcesContent":["import * as actionTypes from \"./actionTypes\";\n\nexport const fetchMessages = () => {\n  return async (dispatch) => {\n    try {\n      dispatch(submitMessageStart());\n      const response = await fetch(\"api/messages\", {\n        method: \"GET\",\n        mode: \"cors\",\n        cache: \"no-cache\",\n        credentials: \"same-origin\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      const data = await response.json();\n      dispatch(fetchMessagesSuccess(data));\n    } catch (err) {\n      dispatch(fetchMessagesFail(err));\n    }\n  };\n};\n\nexport const findMessage = (messageId) => {\n  return async (dispatch) => {\n    try {\n      dispatch(findMessageStart());\n      const response = await fetch(`api/messages/${messageId}`, {\n        method: \"GET\",\n        mode: \"cors\",\n        cache: \"no-cache\",\n        credentials: \"same-origin\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      const data = await response.json();\n      dispatch(findMessageSuccess(data));\n    } catch (err) {\n      dispatch(findMessageFail(err));\n    }\n  };\n};\n\nexport const findMessageStart = () => {\n  return {\n    type: actionTypes.FIND_MESSAGE_START,\n  };\n};\n\nexport const findMessageSuccess = (message) => {\n  return {\n    type: actionTypes.FIND_MESSAGE_START,\n    message,\n  };\n};\n\nexport const findMessageFail = (messages) => {\n  return {\n    type: actionTypes.FETCH_MESSAGE_SUCCESS,\n    messages,\n  };\n};\n\nexport const fetchMessagesSuccess = (messages) => {\n  return {\n    type: actionTypes.FETCH_MESSAGE_SUCCESS,\n    messages,\n  };\n};\n\nexport const fetchMessagesFail = (messages) => {\n  return {\n    type: actionTypes.FETCH_MESSAGE_SUCCESS,\n    messages,\n  };\n};\n\nexport const submitMessage = (message) => {\n  return async (dispatch) => {\n    try {\n      dispatch(submitMessageStart());\n      const response = await fetch(\"api/messages\", {\n        method: \"POST\",\n        mode: \"cors\",\n        cache: \"no-cache\",\n        credentials: \"same-origin\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(message),\n      });\n      const data = await response.json();\n      dispatch(submitMessageSuccess(data));\n    } catch (err) {\n      dispatch(submitMessageFail(err));\n    }\n  };\n};\n\nexport const submitMessageStart = () => {\n  return {\n    type: actionTypes.SUBMIT_MESSAGE_START,\n  };\n};\n\nexport const submitMessageSuccess = (message) => {\n  return {\n    type: actionTypes.SUBMIT_MESSAGE_SUCCESS,\n    message,\n  };\n};\n\nexport const submitMessageFail = (error) => {\n  return {\n    type: actionTypes.SUBMIT_MESSAGE_FAIL,\n    error: error.message,\n  };\n};\n\nexport const submitMessageReset = () => {\n  return {\n    type: actionTypes.SUBMIT_MESSAGE_RESET,\n  };\n};\n\nexport const setMessage = (messageId) => {\n  return {\n    type: actionTypes.FIND_MESSAGE,\n    messageId,\n  };\n};\n\nexport const resetMessage = () => {\n  return {\n    type: actionTypes.RESET_MESSAGE,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}