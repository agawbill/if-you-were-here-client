{"ast":null,"code":"import { useEffect, useReducer } from \"react\";\nimport { fetchMessagesReset, resetMessage, getPersonsReset } from \"../store/actions/index\";\nimport { useSelector, useDispatch } from \"react-redux\";\nconst messagesError = useSelector(state => state.messages.error);\nconst messageError = useSelector(state => state.message.error);\nconst personsError = useSelector(state => state.persons.error);\nconst initialState = {\n  error: null,\n  customerHandler: null,\n  resetError: null\n};\n\nconst errorReducer = (errorState, action) => {\n  switch (action.type) {\n    case \"persons\":\n      return { ...errorState,\n        error: personsError,\n        customerHandler: action.customerHandler,\n        resetError: getPersonsReset\n      };\n\n    case \"submitMessage\":\n      return { ...errorState,\n        error: messageError,\n        customerHandler: action.customerHandler,\n        resetError: resetMessage\n      };\n\n    case \"message\":\n      return { ...errorState,\n        error: messageError,\n        customerHandler: action.customerHandler,\n        resetError: resetMessage\n      };\n\n    case \"messages\":\n      return { ...errorState,\n        error: messagesError,\n        customerHandler: action.customerHandler,\n        resetError: fetchMessagesReset\n      };\n\n    default:\n      return initialState;\n  }\n};\n\nconst useErrorHandler = (error, customerHandler = null) => {\n  const [errorState, dispatchError] = useReducer(errorReducer, initialState);\n  const body = customerHandler !== null ? customerHandler : error; //   if (messageError) {\n  //     body = \"bingo bango bongo\";\n  //   }\n  //   const [hasError, setHasError] = useState(false);\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (errorState.error === null) {\n      dispatchError({\n        type: error\n      });\n    }\n  }, [errorState.error]);\n  return {\n    body\n  };\n};\n\nexport default useErrorHandler;","map":{"version":3,"sources":["/home/anthony/Desktop/if-you-were-here/client/src/hooks/useErrorHandler/useErrorHandler.js"],"names":["useEffect","useReducer","fetchMessagesReset","resetMessage","getPersonsReset","useSelector","useDispatch","messagesError","state","messages","error","messageError","message","personsError","persons","initialState","customerHandler","resetError","errorReducer","errorState","action","type","useErrorHandler","dispatchError","body","dispatch"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,UAApB,QAAsC,OAAtC;AACA,SACEC,kBADF,EAEEC,YAFF,EAGEC,eAHF,QAIO,wBAJP;AAMA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,MAAMC,aAAa,GAAGF,WAAW,CAAEG,KAAD,IAAWA,KAAK,CAACC,QAAN,CAAeC,KAA3B,CAAjC;AACA,MAAMC,YAAY,GAAGN,WAAW,CAAEG,KAAD,IAAWA,KAAK,CAACI,OAAN,CAAcF,KAA1B,CAAhC;AACA,MAAMG,YAAY,GAAGR,WAAW,CAAEG,KAAD,IAAWA,KAAK,CAACM,OAAN,CAAcJ,KAA1B,CAAhC;AAEA,MAAMK,YAAY,GAAG;AACnBL,EAAAA,KAAK,EAAE,IADY;AAEnBM,EAAAA,eAAe,EAAE,IAFE;AAGnBC,EAAAA,UAAU,EAAE;AAHO,CAArB;;AAMA,MAAMC,YAAY,GAAG,CAACC,UAAD,EAAaC,MAAb,KAAwB;AAC3C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,SAAL;AACE,aAAO,EACL,GAAGF,UADE;AAELT,QAAAA,KAAK,EAAEG,YAFF;AAGLG,QAAAA,eAAe,EAAEI,MAAM,CAACJ,eAHnB;AAILC,QAAAA,UAAU,EAAEb;AAJP,OAAP;;AAMF,SAAK,eAAL;AACE,aAAO,EACL,GAAGe,UADE;AAELT,QAAAA,KAAK,EAAEC,YAFF;AAGLK,QAAAA,eAAe,EAAEI,MAAM,CAACJ,eAHnB;AAILC,QAAAA,UAAU,EAAEd;AAJP,OAAP;;AAMF,SAAK,SAAL;AACE,aAAO,EACL,GAAGgB,UADE;AAELT,QAAAA,KAAK,EAAEC,YAFF;AAGLK,QAAAA,eAAe,EAAEI,MAAM,CAACJ,eAHnB;AAILC,QAAAA,UAAU,EAAEd;AAJP,OAAP;;AAMF,SAAK,UAAL;AACE,aAAO,EACL,GAAGgB,UADE;AAELT,QAAAA,KAAK,EAAEH,aAFF;AAGLS,QAAAA,eAAe,EAAEI,MAAM,CAACJ,eAHnB;AAILC,QAAAA,UAAU,EAAEf;AAJP,OAAP;;AAMF;AACE,aAAOa,YAAP;AA9BJ;AAgCD,CAjCD;;AAmCA,MAAMO,eAAe,GAAG,CAACZ,KAAD,EAAQM,eAAe,GAAG,IAA1B,KAAmC;AACzD,QAAM,CAACG,UAAD,EAAaI,aAAb,IAA8BtB,UAAU,CAACiB,YAAD,EAAeH,YAAf,CAA9C;AAEA,QAAMS,IAAI,GAAGR,eAAe,KAAK,IAApB,GAA2BA,eAA3B,GAA6CN,KAA1D,CAHyD,CAKzD;AACA;AACA;AACA;;AACA,QAAMe,QAAQ,GAAGnB,WAAW,EAA5B;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAImB,UAAU,CAACT,KAAX,KAAqB,IAAzB,EAA+B;AAC7Ba,MAAAA,aAAa,CAAC;AAAEF,QAAAA,IAAI,EAAEX;AAAR,OAAD,CAAb;AACD;AACF,GAJQ,EAIN,CAACS,UAAU,CAACT,KAAZ,CAJM,CAAT;AAMA,SAAO;AAAEc,IAAAA;AAAF,GAAP;AACD,CAlBD;;AAoBA,eAAeF,eAAf","sourcesContent":["import { useEffect, useReducer } from \"react\";\nimport {\n  fetchMessagesReset,\n  resetMessage,\n  getPersonsReset,\n} from \"../store/actions/index\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\n\nconst messagesError = useSelector((state) => state.messages.error);\nconst messageError = useSelector((state) => state.message.error);\nconst personsError = useSelector((state) => state.persons.error);\n\nconst initialState = {\n  error: null,\n  customerHandler: null,\n  resetError: null,\n};\n\nconst errorReducer = (errorState, action) => {\n  switch (action.type) {\n    case \"persons\":\n      return {\n        ...errorState,\n        error: personsError,\n        customerHandler: action.customerHandler,\n        resetError: getPersonsReset,\n      };\n    case \"submitMessage\":\n      return {\n        ...errorState,\n        error: messageError,\n        customerHandler: action.customerHandler,\n        resetError: resetMessage,\n      };\n    case \"message\":\n      return {\n        ...errorState,\n        error: messageError,\n        customerHandler: action.customerHandler,\n        resetError: resetMessage,\n      };\n    case \"messages\":\n      return {\n        ...errorState,\n        error: messagesError,\n        customerHandler: action.customerHandler,\n        resetError: fetchMessagesReset,\n      };\n    default:\n      return initialState;\n  }\n};\n\nconst useErrorHandler = (error, customerHandler = null) => {\n  const [errorState, dispatchError] = useReducer(errorReducer, initialState);\n\n  const body = customerHandler !== null ? customerHandler : error;\n\n  //   if (messageError) {\n  //     body = \"bingo bango bongo\";\n  //   }\n  //   const [hasError, setHasError] = useState(false);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (errorState.error === null) {\n      dispatchError({ type: error });\n    }\n  }, [errorState.error]);\n\n  return { body };\n};\n\nexport default useErrorHandler;\n"]},"metadata":{},"sourceType":"module"}