{"ast":null,"code":"import * as actionTypes from \"../actions/actionTypes\";\nconst initialState = {\n  posts: [],\n  currentPost: null,\n  filteredPosts: [],\n  filters: [],\n  success: false,\n  loading: false,\n  error: null\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SUBMIT_POST_START:\n      return { ...state,\n        loading: true\n      };\n\n    case actionTypes.SUBMIT_POST_SUCCESS:\n      return { ...state,\n        posts: [action.post, ...state.posts],\n        success: true,\n        loading: true\n      };\n\n    case actionTypes.SUBMIT_POST_FAIL:\n      return { ...state,\n        loading: false,\n        error: action.error\n      };\n\n    case actionTypes.SUBMIT_POST_RESET:\n      return { ...state,\n        loading: false,\n        error: false,\n        success: false\n      };\n\n    case actionTypes.ADD_FILTER:\n      return { ...state,\n        filters: [action.filter, ...state.filters],\n        loading: true\n      };\n\n    case actionTypes.REMOVE_FILTER:\n      return { ...state,\n        filters: [action.filter, ...state.filters],\n        loading: true\n      };\n\n    case actionTypes.FILTER_POSTS_WHO:\n      let whoFiltered = state.filteredPosts.length > 0 ? [...state.filteredPosts] : [...state.posts];\n      state.filters.forEach(item => {\n        whoFiltered = state.whoFiltered.filter(post => post === item);\n      });\n      return { ...state,\n        filteredPosts: [...whoFiltered],\n        loading: false,\n        error: false\n      };\n\n    case actionTypes.FILTER_POSTS_IDENTITY:\n      let identityFiltered = state.filteredPosts.length > 0 ? [...state.filteredPosts] : [...state.posts];\n      state.filters.forEach(item => {\n        identityFiltered = state.identityFiltered.filter(post => post === item);\n      });\n      return { ...state,\n        filteredPosts: [...identityFiltered],\n        loading: false,\n        error: false\n      };\n\n    case actionTypes.FILTER_POSTS_DATE:\n      let dateFiltered = [...state.posts];\n      state.filters.forEach(item => {\n        dateFiltered = state.dateFiltered.filter(post => post === item);\n      });\n      return { ...state,\n        filteredPosts: [...dateFiltered],\n        loading: false,\n        error: false\n      };\n\n    case actionTypes.FILTER_RESET:\n      return { ...state,\n        filteredPosts: [],\n        loading: false,\n        error: false,\n        success: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/anthony/Desktop/if-you-were-here/src/store/reducers/posts.js"],"names":["actionTypes","initialState","posts","currentPost","filteredPosts","filters","success","loading","error","reducer","state","action","type","SUBMIT_POST_START","SUBMIT_POST_SUCCESS","post","SUBMIT_POST_FAIL","SUBMIT_POST_RESET","ADD_FILTER","filter","REMOVE_FILTER","FILTER_POSTS_WHO","whoFiltered","length","forEach","item","FILTER_POSTS_IDENTITY","identityFiltered","FILTER_POSTS_DATE","dateFiltered","FILTER_RESET"],"mappings":"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","sourcesContent":["import * as actionTypes from \"../actions/actionTypes\";\n\nconst initialState = {\n  posts: [],\n  currentPost: null,\n  filteredPosts: [],\n  filters: [],\n  success: false,\n  loading: false,\n  error: null\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SUBMIT_POST_START:\n      return {\n        ...state,\n        loading: true\n      };\n    case actionTypes.SUBMIT_POST_SUCCESS:\n      return {\n        ...state,\n        posts: [action.post, ...state.posts],\n        success: true,\n        loading: true\n      };\n    case actionTypes.SUBMIT_POST_FAIL:\n      return {\n        ...state,\n        loading: false,\n        error: action.error\n      };\n    case actionTypes.SUBMIT_POST_RESET:\n      return {\n        ...state,\n        loading: false,\n        error: false,\n        success: false\n      };\n    case actionTypes.ADD_FILTER:\n      return {\n        ...state,\n        filters: [action.filter, ...state.filters],\n        loading: true\n      };\n    case actionTypes.REMOVE_FILTER:\n      return {\n        ...state,\n        filters: [action.filter, ...state.filters],\n        loading: true\n      };\n    case actionTypes.FILTER_POSTS_WHO:\n      let whoFiltered =\n        state.filteredPosts.length > 0\n          ? [...state.filteredPosts]\n          : [...state.posts];\n      state.filters.forEach(item => {\n        whoFiltered = state.whoFiltered.filter(post => post === item);\n      });\n      return {\n        ...state,\n        filteredPosts: [...whoFiltered],\n        loading: false,\n        error: false\n      };\n    case actionTypes.FILTER_POSTS_IDENTITY:\n      let identityFiltered =\n        state.filteredPosts.length > 0\n          ? [...state.filteredPosts]\n          : [...state.posts];\n      state.filters.forEach(item => {\n        identityFiltered = state.identityFiltered.filter(post => post === item);\n      });\n      return {\n        ...state,\n        filteredPosts: [...identityFiltered],\n        loading: false,\n        error: false\n      };\n    case actionTypes.FILTER_POSTS_DATE:\n      let dateFiltered = [...state.posts];\n      state.filters.forEach(item => {\n        dateFiltered = state.dateFiltered.filter(post => post === item);\n      });\n      return {\n        ...state,\n        filteredPosts: [...dateFiltered],\n        loading: false,\n        error: false\n      };\n    case actionTypes.FILTER_RESET:\n      return {\n        ...state,\n        filteredPosts: [],\n        loading: false,\n        error: false,\n        success: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}