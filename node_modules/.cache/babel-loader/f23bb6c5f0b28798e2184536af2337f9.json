{"ast":null,"code":"import _regeneratorRuntime from\"/home/anthony/Desktop/if-you-were-here/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/anthony/Desktop/if-you-were-here/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import*as actionTypes from\"./actionTypes\";export var fetchMessages=function fetchMessages(){return(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var response,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;dispatch(fetchMessagesStart());_context.next=4;return fetch(\"/api/messages\",{method:\"GET\",mode:\"cors\",cache:\"no-cache\",credentials:\"same-origin\",headers:{\"Content-Type\":\"application/json\"}});case 4:response=_context.sent;_context.next=7;return response.json();case 7:data=_context.sent;dispatch(fetchMessagesSuccess(data.data));_context.next=14;break;case 11:_context.prev=11;_context.t0=_context[\"catch\"](0);dispatch(fetchMessagesFail(_context.t0));case 14:case\"end\":return _context.stop();}}},_callee,null,[[0,11]]);}));return function(_x){return _ref.apply(this,arguments);};}());};export var fetchMessagesStart=function fetchMessagesStart(){return{type:actionTypes.FETCH_MESSAGES_START};};export var fetchMessagesSuccess=function fetchMessagesSuccess(messages){var filteredMessages=messages.filter(function(message){return message.approved;});return{type:actionTypes.FETCH_MESSAGES_SUCCESS,messages:filteredMessages};};export var fetchMessagesFail=function fetchMessagesFail(error){return{type:actionTypes.FETCH_MESSAGES_FAIL,error:error};};export var fetchMessagesReset=function fetchMessagesReset(){return{type:actionTypes.RESET_MESSAGE};};","map":{"version":3,"sources":["/home/anthony/Desktop/if-you-were-here/client/src/store/actions/messages.js"],"names":["actionTypes","fetchMessages","dispatch","fetchMessagesStart","fetch","method","mode","cache","credentials","headers","response","json","data","fetchMessagesSuccess","fetchMessagesFail","type","FETCH_MESSAGES_START","messages","filteredMessages","filter","message","approved","FETCH_MESSAGES_SUCCESS","error","FETCH_MESSAGES_FAIL","fetchMessagesReset","RESET_MESSAGE"],"mappings":"qUAAA,MAAO,GAAKA,CAAAA,WAAZ,KAA6B,eAA7B,CAEA,MAAO,IAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CACjC,gGAAO,iBAAOC,QAAP,oJAEHA,QAAQ,CAACC,kBAAkB,EAAnB,CAAR,CAFG,sBAGoBC,CAAAA,KAAK,CAAC,eAAD,CAAkB,CAC5CC,MAAM,CAAE,KADoC,CAE5CC,IAAI,CAAE,MAFsC,CAG5CC,KAAK,CAAE,UAHqC,CAI5CC,WAAW,CAAE,aAJ+B,CAK5CC,OAAO,CAAE,CACP,eAAgB,kBADT,CALmC,CAAlB,CAHzB,QAGGC,QAHH,qCAYgBA,CAAAA,QAAQ,CAACC,IAAT,EAZhB,QAYGC,IAZH,eAcHV,QAAQ,CAACW,oBAAoB,CAACD,IAAI,CAACA,IAAN,CAArB,CAAR,CAdG,iFAgBHV,QAAQ,CAACY,iBAAiB,aAAlB,CAAR,CAhBG,qEAAP,gEAmBD,CApBM,CAsBP,MAAO,IAAMX,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,EAAM,CACtC,MAAO,CACLY,IAAI,CAAEf,WAAW,CAACgB,oBADb,CAAP,CAGD,CAJM,CAMP,MAAO,IAAMH,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAACI,QAAD,CAAc,CAChD,GAAMC,CAAAA,gBAAgB,CAAGD,QAAQ,CAACE,MAAT,CAAgB,SAACC,OAAD,QAAaA,CAAAA,OAAO,CAACC,QAArB,EAAhB,CAAzB,CACA,MAAO,CACLN,IAAI,CAAEf,WAAW,CAACsB,sBADb,CAELL,QAAQ,CAAEC,gBAFL,CAAP,CAID,CANM,CAQP,MAAO,IAAMJ,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACS,KAAD,CAAW,CAC1C,MAAO,CACLR,IAAI,CAAEf,WAAW,CAACwB,mBADb,CAELD,KAAK,CAALA,KAFK,CAAP,CAID,CALM,CAOP,MAAO,IAAME,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,EAAM,CACtC,MAAO,CACLV,IAAI,CAAEf,WAAW,CAAC0B,aADb,CAAP,CAGD,CAJM","sourcesContent":["import * as actionTypes from \"./actionTypes\";\n\nexport const fetchMessages = () => {\n  return async (dispatch) => {\n    try {\n      dispatch(fetchMessagesStart());\n      const response = await fetch(\"/api/messages\", {\n        method: \"GET\",\n        mode: \"cors\",\n        cache: \"no-cache\",\n        credentials: \"same-origin\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      const data = await response.json();\n\n      dispatch(fetchMessagesSuccess(data.data));\n    } catch (err) {\n      dispatch(fetchMessagesFail(err));\n    }\n  };\n};\n\nexport const fetchMessagesStart = () => {\n  return {\n    type: actionTypes.FETCH_MESSAGES_START,\n  };\n};\n\nexport const fetchMessagesSuccess = (messages) => {\n  const filteredMessages = messages.filter((message) => message.approved);\n  return {\n    type: actionTypes.FETCH_MESSAGES_SUCCESS,\n    messages: filteredMessages,\n  };\n};\n\nexport const fetchMessagesFail = (error) => {\n  return {\n    type: actionTypes.FETCH_MESSAGES_FAIL,\n    error,\n  };\n};\n\nexport const fetchMessagesReset = () => {\n  return {\n    type: actionTypes.RESET_MESSAGE,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}