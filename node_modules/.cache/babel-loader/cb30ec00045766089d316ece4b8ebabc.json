{"ast":null,"code":"import * as actionTypes from \"../actions/actionTypes\";\nconst initialState = {\n  posts: [],\n  currentPost: null,\n  filteredPosts: [],\n  filters: {\n    who: null,\n    identity: null\n  },\n  success: false,\n  loading: false,\n  error: null\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SUBMIT_POST_START:\n      return { ...state,\n        loading: true,\n        error: null\n      };\n\n    case actionTypes.SUBMIT_POST_SUCCESS:\n      return { ...state,\n        posts: [action.post, ...state.posts],\n        success: true,\n        loading: true\n      };\n\n    case actionTypes.SUBMIT_POST_FAIL:\n      return { ...state,\n        loading: false,\n        error: action.error\n      };\n\n    case actionTypes.SUBMIT_POST_RESET:\n      return { ...state,\n        loading: false,\n        error: null,\n        success: false\n      };\n\n    case actionTypes.FILTER_POSTS_START:\n      return { ...state,\n        loading: true,\n        error: null\n      };\n\n    case actionTypes.FILTER_POSTS_FAIL:\n      return { ...state,\n        loading: false,\n        error: action.error\n      };\n\n    case actionTypes.FILTER_POSTS_ADD:\n      // const newFilter = { [action.name]: action.filter };\n      // const postsCopy = [...state.posts];\n      // const dupCopy = [...state.filteredPosts];\n      // const filteredAdd = postsCopy.filter(post => {\n      //   const dupIndex = dupCopy.findIndex(dup => dup.id === post.id);\n      //   return post[`${action.name}`] === action.filter && dupIndex === -1;\n      // });\n      return { ...state,\n        filters: { ...state.filters,\n          [action.name]: action.filter\n        }\n      };\n    // filteredPosts: [...state.filteredPosts, ...filteredAdd],\n    // loading: false\n\n    case actionTypes.FILTER_POSTS_REMOVE:\n      const {\n        who,\n        identity\n      } = state.filters;\n      const newFilters = filtersCopy.filter(item => item[`${action.name}`] !== action.filter); // const filteredCopy = [...state.filteredPosts];\n      // const filteredRemove = filteredCopy.filter(post => {\n      //   const whoIndex = newFilters.findIndex(\n      //     filter => filter.who === post.who\n      //   );\n      //   const identityIndex = newFilters.findIndex(\n      //     filter => filter.identity === post.identity\n      //   );\n      //   console.log(\"who index\", whoIndex);\n      //   console.log(\"identity index\", identityIndex);\n      //   return post[`${action.name}`] !== action.filter;\n      // });\n\n      return { ...state,\n        filters: [...newFilters] // filteredPosts: [...filteredRemove],\n        // loading: false\n\n      };\n\n    case actionTypes.FILTER_POSTS:\n      const newFiltered = [];\n      const postsCopy = [...state.posts];\n      const filteredCopy = [...state.filters];\n      const filteredKeys = filtersCopy.forEach(filter => {\n        const [...key] = Object.keys(filter);\n      });\n      return { ...state,\n        filteredPosts: [],\n        loading: false,\n        error: null\n      };\n\n    case actionTypes.FILTER_RESET:\n      return { ...state,\n        filteredPosts: [],\n        loading: false,\n        error: null\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/anthony/Desktop/if-you-were-here/src/store/reducers/posts.js"],"names":["actionTypes","initialState","posts","currentPost","filteredPosts","filters","who","identity","success","loading","error","reducer","state","action","type","SUBMIT_POST_START","SUBMIT_POST_SUCCESS","post","SUBMIT_POST_FAIL","SUBMIT_POST_RESET","FILTER_POSTS_START","FILTER_POSTS_FAIL","FILTER_POSTS_ADD","name","filter","FILTER_POSTS_REMOVE","newFilters","filtersCopy","item","FILTER_POSTS","newFiltered","postsCopy","filteredCopy","filteredKeys","forEach","key","Object","keys","FILTER_RESET"],"mappings":"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","sourcesContent":["import * as actionTypes from \"../actions/actionTypes\";\n\nconst initialState = {\n  posts: [],\n  currentPost: null,\n  filteredPosts: [],\n  filters: { who: null, identity: null },\n  success: false,\n  loading: false,\n  error: null\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SUBMIT_POST_START:\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case actionTypes.SUBMIT_POST_SUCCESS:\n      return {\n        ...state,\n        posts: [action.post, ...state.posts],\n        success: true,\n        loading: true\n      };\n    case actionTypes.SUBMIT_POST_FAIL:\n      return {\n        ...state,\n        loading: false,\n        error: action.error\n      };\n    case actionTypes.SUBMIT_POST_RESET:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n        success: false\n      };\n    case actionTypes.FILTER_POSTS_START:\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case actionTypes.FILTER_POSTS_FAIL:\n      return {\n        ...state,\n        loading: false,\n        error: action.error\n      };\n    case actionTypes.FILTER_POSTS_ADD:\n      // const newFilter = { [action.name]: action.filter };\n      // const postsCopy = [...state.posts];\n      // const dupCopy = [...state.filteredPosts];\n      // const filteredAdd = postsCopy.filter(post => {\n      //   const dupIndex = dupCopy.findIndex(dup => dup.id === post.id);\n      //   return post[`${action.name}`] === action.filter && dupIndex === -1;\n      // });\n      return {\n        ...state,\n        filters: {\n          ...state.filters,\n          [action.name]: action.filter\n        }\n      };\n    // filteredPosts: [...state.filteredPosts, ...filteredAdd],\n    // loading: false\n\n    case actionTypes.FILTER_POSTS_REMOVE:\n      const { who, identity } = state.filters;\n      const newFilters = filtersCopy.filter(\n        item => item[`${action.name}`] !== action.filter\n      );\n      // const filteredCopy = [...state.filteredPosts];\n\n      // const filteredRemove = filteredCopy.filter(post => {\n      //   const whoIndex = newFilters.findIndex(\n      //     filter => filter.who === post.who\n      //   );\n      //   const identityIndex = newFilters.findIndex(\n      //     filter => filter.identity === post.identity\n      //   );\n\n      //   console.log(\"who index\", whoIndex);\n      //   console.log(\"identity index\", identityIndex);\n\n      //   return post[`${action.name}`] !== action.filter;\n      // });\n\n      return {\n        ...state,\n        filters: [...newFilters]\n        // filteredPosts: [...filteredRemove],\n        // loading: false\n      };\n    case actionTypes.FILTER_POSTS:\n      const newFiltered = [];\n      const postsCopy = [...state.posts];\n      const filteredCopy = [...state.filters];\n      const filteredKeys = filtersCopy.forEach(filter => {\n        const [...key] = Object.keys(filter);\n      });\n\n      return {\n        ...state,\n        filteredPosts: [],\n        loading: false,\n        error: null\n      };\n    case actionTypes.FILTER_RESET:\n      return {\n        ...state,\n        filteredPosts: [],\n        loading: false,\n        error: null\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}