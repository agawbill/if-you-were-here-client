{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * Set of utils related to keyboard support.\n *\n * @module utils/keyboard\n */\nimport CKEditorError from './ckeditorerror';\nimport env from './env';\nconst macGlyphsToModifiers = {\n  '⌘': 'ctrl',\n  '⇧': 'shift',\n  '⌥': 'alt'\n};\nconst modifiersToMacGlyphs = {\n  'ctrl': '⌘',\n  'shift': '⇧',\n  'alt': '⌥'\n};\n/**\n * Object with `keyName => keyCode` pairs for a set of known keys.\n *\n * Contains:\n *\n * * `a-z`,\n * * `0-9`,\n * * `f1-f12`,\n * * `arrow(left|up|right|bottom)`,\n * * `backspace`, `delete`, `enter`, `esc`, `tab`,\n * * `ctrl`, `cmd`, `shift`, `alt`.\n */\n\nexport const keyCodes = generateKnownKeyCodes();\n/**\n * Converts a key name or a {@link module:utils/keyboard~KeystrokeInfo keystroke info} into a key code.\n *\n * Note: Key names are matched with {@link module:utils/keyboard~keyCodes} in a case-insensitive way.\n *\n * @param {String|module:utils/keyboard~KeystrokeInfo} Key name (see {@link module:utils/keyboard~keyCodes})\n * or a keystroke data object.\n * @returns {Number} Key or keystroke code.\n */\n\nexport function getCode(key) {\n  let keyCode;\n\n  if (typeof key == 'string') {\n    keyCode = keyCodes[key.toLowerCase()];\n\n    if (!keyCode) {\n      /**\n       * Unknown key name. Only key names contained by the {@link module:utils/keyboard~keyCodes} can be used.\n       *\n       * @errror keyboard-unknown-key\n       * @param {String} key\n       */\n      throw new CKEditorError('keyboard-unknown-key: Unknown key name.', null, {\n        key\n      });\n    }\n  } else {\n    keyCode = key.keyCode + (key.altKey ? keyCodes.alt : 0) + (key.ctrlKey ? keyCodes.ctrl : 0) + (key.shiftKey ? keyCodes.shift : 0);\n  }\n\n  return keyCode;\n}\n/**\n * Parses keystroke and returns a keystroke code that will match the code returned by\n * link {@link module:utils/keyboard.getCode} for a corresponding {@link module:utils/keyboard~KeystrokeInfo keystroke info}.\n *\n * The keystroke can be passed in two formats:\n *\n * * as a single string – e.g. `ctrl + A`,\n * * as an array of {@link module:utils/keyboard~keyCodes known key names} and key codes – e.g.:\n *   * `[ 'ctrl', 32 ]` (ctrl + space),\n *   * `[ 'ctrl', 'a' ]` (ctrl + A).\n *\n * Note: Key names are matched with {@link module:utils/keyboard~keyCodes} in a case-insensitive way.\n *\n * Note: Only keystrokes with a single non-modifier key are supported (e.g. `ctrl+A` is OK, but `ctrl+A+B` is not).\n *\n * @param {String|Array.<Number|String>} keystroke Keystroke definition.\n * @returns {Number} Keystroke code.\n */\n\nexport function parseKeystroke(keystroke) {\n  if (typeof keystroke == 'string') {\n    keystroke = splitKeystrokeText(keystroke);\n  }\n\n  return keystroke.map(key => typeof key == 'string' ? getCode(key) : key).reduce((key, sum) => sum + key, 0);\n}\n/**\n * It translates any keystroke string text like `\"CTRL+A\"` to an\n * environment–specific keystroke, i.e. `\"⌘A\"` on Mac OSX.\n *\n * @param {String} keystroke Keystroke text.\n * @returns {String} Keystroke text specific for the environment.\n */\n\nexport function getEnvKeystrokeText(keystroke) {\n  if (!env.isMac) {\n    return keystroke;\n  }\n\n  return splitKeystrokeText(keystroke) // Replace modifiers (e.g. \"ctrl\") with Mac glyphs (e.g. \"⌘\") first.\n  .map(key => modifiersToMacGlyphs[key.toLowerCase()] || key) // Decide whether to put \"+\" between keys in the keystroke or not.\n  .reduce((value, key) => {\n    if (value.slice(-1) in macGlyphsToModifiers) {\n      return value + key;\n    } else {\n      return value + '+' + key;\n    }\n  });\n}\n\nfunction generateKnownKeyCodes() {\n  const keyCodes = {\n    arrowleft: 37,\n    arrowup: 38,\n    arrowright: 39,\n    arrowdown: 40,\n    backspace: 8,\n    delete: 46,\n    enter: 13,\n    space: 32,\n    esc: 27,\n    tab: 9,\n    // The idea about these numbers is that they do not collide with any real key codes, so we can use them\n    // like bit masks.\n    ctrl: 0x110000,\n    // Has the same code as ctrl, because their behaviour should be unified across the editor.\n    // See http://ckeditor.github.io/editor-recommendations/general-policies#ctrl-vs-cmd\n    cmd: 0x110000,\n    shift: 0x220000,\n    alt: 0x440000\n  }; // a-z\n\n  for (let code = 65; code <= 90; code++) {\n    const letter = String.fromCharCode(code);\n    keyCodes[letter.toLowerCase()] = code;\n  } // 0-9\n\n\n  for (let code = 48; code <= 57; code++) {\n    keyCodes[code - 48] = code;\n  } // F1-F12\n\n\n  for (let code = 112; code <= 123; code++) {\n    keyCodes['f' + (code - 111)] = code;\n  }\n\n  return keyCodes;\n}\n\nfunction splitKeystrokeText(keystroke) {\n  return keystroke.split(/\\s*\\+\\s*/);\n}\n/**\n * Information about a keystroke.\n *\n * @interface module:utils/keyboard~KeystrokeInfo\n */\n\n/**\n * The [key code](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode).\n *\n * @member {Number} module:utils/keyboard~KeystrokeInfo#keyCode\n */\n\n/**\n * Whether the <kbd>Alt</kbd> modifier was pressed.\n *\n * @member {Bolean} module:utils/keyboard~KeystrokeInfo#altKey\n */\n\n/**\n * Whether the <kbd>Ctrl</kbd> or <kbd>Cmd</kbd> modifier was pressed.\n *\n * @member {Bolean} module:utils/keyboard~KeystrokeInfo#ctrlKey\n */\n\n/**\n * Whether the <kbd>Shift</kbd> modifier was pressed.\n *\n * @member {Bolean} module:utils/keyboard~KeystrokeInfo#shiftKey\n */","map":{"version":3,"sources":["/home/anthony/Desktop/if-you-were-here/node_modules/@ckeditor/ckeditor5-utils/src/keyboard.js"],"names":["CKEditorError","env","macGlyphsToModifiers","modifiersToMacGlyphs","keyCodes","generateKnownKeyCodes","getCode","key","keyCode","toLowerCase","altKey","alt","ctrlKey","ctrl","shiftKey","shift","parseKeystroke","keystroke","splitKeystrokeText","map","reduce","sum","getEnvKeystrokeText","isMac","value","slice","arrowleft","arrowup","arrowright","arrowdown","backspace","delete","enter","space","esc","tab","cmd","code","letter","String","fromCharCode","split"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * Set of utils related to keyboard support.\n *\n * @module utils/keyboard\n */\n\nimport CKEditorError from './ckeditorerror';\nimport env from './env';\n\nconst macGlyphsToModifiers = {\n\t'⌘': 'ctrl',\n\t'⇧': 'shift',\n\t'⌥': 'alt'\n};\n\nconst modifiersToMacGlyphs = {\n\t'ctrl': '⌘',\n\t'shift': '⇧',\n\t'alt': '⌥'\n};\n\n/**\n * Object with `keyName => keyCode` pairs for a set of known keys.\n *\n * Contains:\n *\n * * `a-z`,\n * * `0-9`,\n * * `f1-f12`,\n * * `arrow(left|up|right|bottom)`,\n * * `backspace`, `delete`, `enter`, `esc`, `tab`,\n * * `ctrl`, `cmd`, `shift`, `alt`.\n */\nexport const keyCodes = generateKnownKeyCodes();\n\n/**\n * Converts a key name or a {@link module:utils/keyboard~KeystrokeInfo keystroke info} into a key code.\n *\n * Note: Key names are matched with {@link module:utils/keyboard~keyCodes} in a case-insensitive way.\n *\n * @param {String|module:utils/keyboard~KeystrokeInfo} Key name (see {@link module:utils/keyboard~keyCodes})\n * or a keystroke data object.\n * @returns {Number} Key or keystroke code.\n */\nexport function getCode( key ) {\n\tlet keyCode;\n\n\tif ( typeof key == 'string' ) {\n\t\tkeyCode = keyCodes[ key.toLowerCase() ];\n\n\t\tif ( !keyCode ) {\n\t\t\t/**\n\t\t\t * Unknown key name. Only key names contained by the {@link module:utils/keyboard~keyCodes} can be used.\n\t\t\t *\n\t\t\t * @errror keyboard-unknown-key\n\t\t\t * @param {String} key\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'keyboard-unknown-key: Unknown key name.',\n\t\t\t\tnull, { key }\n\t\t\t);\n\t\t}\n\t} else {\n\t\tkeyCode = key.keyCode +\n\t\t\t( key.altKey ? keyCodes.alt : 0 ) +\n\t\t\t( key.ctrlKey ? keyCodes.ctrl : 0 ) +\n\t\t\t( key.shiftKey ? keyCodes.shift : 0 );\n\t}\n\n\treturn keyCode;\n}\n\n/**\n * Parses keystroke and returns a keystroke code that will match the code returned by\n * link {@link module:utils/keyboard.getCode} for a corresponding {@link module:utils/keyboard~KeystrokeInfo keystroke info}.\n *\n * The keystroke can be passed in two formats:\n *\n * * as a single string – e.g. `ctrl + A`,\n * * as an array of {@link module:utils/keyboard~keyCodes known key names} and key codes – e.g.:\n *   * `[ 'ctrl', 32 ]` (ctrl + space),\n *   * `[ 'ctrl', 'a' ]` (ctrl + A).\n *\n * Note: Key names are matched with {@link module:utils/keyboard~keyCodes} in a case-insensitive way.\n *\n * Note: Only keystrokes with a single non-modifier key are supported (e.g. `ctrl+A` is OK, but `ctrl+A+B` is not).\n *\n * @param {String|Array.<Number|String>} keystroke Keystroke definition.\n * @returns {Number} Keystroke code.\n */\nexport function parseKeystroke( keystroke ) {\n\tif ( typeof keystroke == 'string' ) {\n\t\tkeystroke = splitKeystrokeText( keystroke );\n\t}\n\n\treturn keystroke\n\t\t.map( key => ( typeof key == 'string' ) ? getCode( key ) : key )\n\t\t.reduce( ( key, sum ) => sum + key, 0 );\n}\n\n/**\n * It translates any keystroke string text like `\"CTRL+A\"` to an\n * environment–specific keystroke, i.e. `\"⌘A\"` on Mac OSX.\n *\n * @param {String} keystroke Keystroke text.\n * @returns {String} Keystroke text specific for the environment.\n */\nexport function getEnvKeystrokeText( keystroke ) {\n\tif ( !env.isMac ) {\n\t\treturn keystroke;\n\t}\n\n\treturn splitKeystrokeText( keystroke )\n\t\t// Replace modifiers (e.g. \"ctrl\") with Mac glyphs (e.g. \"⌘\") first.\n\t\t.map( key => modifiersToMacGlyphs[ key.toLowerCase() ] || key )\n\n\t\t// Decide whether to put \"+\" between keys in the keystroke or not.\n\t\t.reduce( ( value, key ) => {\n\t\t\tif ( value.slice( -1 ) in macGlyphsToModifiers ) {\n\t\t\t\treturn value + key;\n\t\t\t} else {\n\t\t\t\treturn value + '+' + key;\n\t\t\t}\n\t\t} );\n}\n\nfunction generateKnownKeyCodes() {\n\tconst keyCodes = {\n\t\tarrowleft: 37,\n\t\tarrowup: 38,\n\t\tarrowright: 39,\n\t\tarrowdown: 40,\n\t\tbackspace: 8,\n\t\tdelete: 46,\n\t\tenter: 13,\n\t\tspace: 32,\n\t\tesc: 27,\n\t\ttab: 9,\n\n\t\t// The idea about these numbers is that they do not collide with any real key codes, so we can use them\n\t\t// like bit masks.\n\t\tctrl: 0x110000,\n\t\t// Has the same code as ctrl, because their behaviour should be unified across the editor.\n\t\t// See http://ckeditor.github.io/editor-recommendations/general-policies#ctrl-vs-cmd\n\t\tcmd: 0x110000,\n\t\tshift: 0x220000,\n\t\talt: 0x440000\n\t};\n\n\t// a-z\n\tfor ( let code = 65; code <= 90; code++ ) {\n\t\tconst letter = String.fromCharCode( code );\n\n\t\tkeyCodes[ letter.toLowerCase() ] = code;\n\t}\n\n\t// 0-9\n\tfor ( let code = 48; code <= 57; code++ ) {\n\t\tkeyCodes[ code - 48 ] = code;\n\t}\n\n\t// F1-F12\n\tfor ( let code = 112; code <= 123; code++ ) {\n\t\tkeyCodes[ 'f' + ( code - 111 ) ] = code;\n\t}\n\n\treturn keyCodes;\n}\n\nfunction splitKeystrokeText( keystroke ) {\n\treturn keystroke.split( /\\s*\\+\\s*/ );\n}\n\n/**\n * Information about a keystroke.\n *\n * @interface module:utils/keyboard~KeystrokeInfo\n */\n\n/**\n * The [key code](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode).\n *\n * @member {Number} module:utils/keyboard~KeystrokeInfo#keyCode\n */\n\n/**\n * Whether the <kbd>Alt</kbd> modifier was pressed.\n *\n * @member {Bolean} module:utils/keyboard~KeystrokeInfo#altKey\n */\n\n/**\n * Whether the <kbd>Ctrl</kbd> or <kbd>Cmd</kbd> modifier was pressed.\n *\n * @member {Bolean} module:utils/keyboard~KeystrokeInfo#ctrlKey\n */\n\n/**\n * Whether the <kbd>Shift</kbd> modifier was pressed.\n *\n * @member {Bolean} module:utils/keyboard~KeystrokeInfo#shiftKey\n */\n"]},"metadata":{},"sourceType":"module"}