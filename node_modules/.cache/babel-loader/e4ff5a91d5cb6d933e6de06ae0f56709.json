{"ast":null,"code":"var _jsxFileName = \"/home/anthony/Desktop/if-you-were-here/client/src/components/FullMessage/FullMessage.js\";\nimport React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport parse from \"html-react-parser\";\nimport styles from \"./FullMessage.module.css\";\nimport { fetchMessage, resetMessage } from \"../../store/actions\";\nimport { useParams, withRouter } from \"react-router-dom\";\nimport Spinner from \"../UI/Spinners/FormSpinner/FormSpinner\";\nimport withErrorHandler from \"../../hoc/withErrorHandler\";\nimport useErrorHandler from \"../../hooks/useErrorHandler/useErrorHandler\";\n\nconst FullMessage = props => {\n  const currentMessage = useSelector(state => state.message.currentMessage);\n  const setSuccess = useSelector(state => state.message.setSuccess);\n  const message = currentMessage ? currentMessage : props.history.location.passedMessage;\n  const dispatch = useDispatch();\n  const {\n    id\n  } = useParams();\n  const error = useErrorHandler();\n  console.log(\"this is the error\", error);\n  useEffect(() => {\n    const passedMessage = props.history.location.passedMessage;\n    console.log(\"current messages\", currentMessage);\n    console.log(\"current messages\", message); // if (setSuccess === false) {\n    //   dispatch(resetMessage());\n    //   props.history.push(\"/\");\n    // }\n\n    if (!passedMessage && setSuccess === null) {\n      console.log(\"set success\", setSuccess);\n      console.log(\"inside messages\", currentMessage);\n      console.log(\"it's here\");\n      dispatch(fetchMessage(id));\n    }\n\n    return () => setSuccess === false ? dispatch(resetMessage()) : null;\n  }, []);\n  let messageBody = React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  });\n\n  if (message) {\n    const date = new Date(message.createdAt).toDateString();\n    messageBody = React.createElement(React.Fragment, null, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"To my\", \" \", React.createElement(\"span\", {\n      className: styles.MessageAttribute,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, message.who.name)), \",\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: styles.MessageDate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, date)), React.createElement(\"span\", {\n      className: styles.MessageMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, parse(message.message)), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"From your\", \" \", React.createElement(\"span\", {\n      className: styles.MessageAttribute,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, message.identity.name))));\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, messageBody);\n};\n\nexport default withRouter(FullMessage); // import React, { useEffect } from \"react\";\n// import { useSelector, useDispatch } from \"react-redux\";\n// import parse from \"html-react-parser\";\n// import styles from \"./FullMessage.module.css\";\n// import { fetchMessage, resetMessage } from \"../../store/actions\";\n// import { useParams, withRouter } from \"react-router-dom\";\n// import Spinner from \"../UI/Spinners/FormSpinner/FormSpinner\";\n// import withErrorHandler from \"../../hoc/withErrorHandler\";\n// const FullMessage = (props) => {\n//   const currentMessage = useSelector((state) => state.message.currentMessage);\n//   const setSuccess = useSelector((state) => state.message.setSuccess);\n//   const message = currentMessage\n//     ? currentMessage\n//     : props.history.location.passedMessage;\n//   const dispatch = useDispatch();\n//   const { id } = useParams();\n//   console.log(message);\n//   useEffect(() => {\n//     const passedMessage = props.history.location.passedMessage;\n//     if (setSuccess === false) {\n//       dispatch(resetMessage());\n//       props.history.push(\"/\");\n//     }\n//     if (!passedMessage) {\n//       dispatch(fetchMessage(id));\n//     }\n//     return () => (passedMessage ? null : dispatch(resetMessage()));\n//   }, [props.history]);\n//   let messageBody = <Spinner />;\n//   if (message) {\n//     const date = new Date(message.createdAt).toDateString();\n//     messageBody = (\n//       <>\n//         <p>\n//           <b>\n//             To my{\" \"}\n//             <span className={styles.MessageAttribute}>{message.who.name}</span>\n//           </b>\n//           ,\n//           <br />\n//           <span className={styles.MessageDate}>{date}</span>\n//         </p>\n//         <span className={styles.MessageMessage}>{parse(message.message)}</span>\n//         <p>\n//           <b>\n//             From your{\" \"}\n//             <span className={styles.MessageAttribute}>\n//               {message.identity.name}\n//             </span>\n//           </b>\n//         </p>\n//       </>\n//     );\n//   }\n//   return <div>{messageBody}</div>;\n// };\n// export default withErrorHandler(withRouter(FullMessage));","map":{"version":3,"sources":["/home/anthony/Desktop/if-you-were-here/client/src/components/FullMessage/FullMessage.js"],"names":["React","useEffect","useSelector","useDispatch","parse","styles","fetchMessage","resetMessage","useParams","withRouter","Spinner","withErrorHandler","useErrorHandler","FullMessage","props","currentMessage","state","message","setSuccess","history","location","passedMessage","dispatch","id","error","console","log","messageBody","date","Date","createdAt","toDateString","MessageAttribute","who","name","MessageDate","MessageMessage","identity"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport parse from \"html-react-parser\";\nimport styles from \"./FullMessage.module.css\";\nimport { fetchMessage, resetMessage } from \"../../store/actions\";\nimport { useParams, withRouter } from \"react-router-dom\";\nimport Spinner from \"../UI/Spinners/FormSpinner/FormSpinner\";\nimport withErrorHandler from \"../../hoc/withErrorHandler\";\nimport useErrorHandler from \"../../hooks/useErrorHandler/useErrorHandler\";\n\nconst FullMessage = (props) => {\n  const currentMessage = useSelector((state) => state.message.currentMessage);\n  const setSuccess = useSelector((state) => state.message.setSuccess);\n  const message = currentMessage\n    ? currentMessage\n    : props.history.location.passedMessage;\n  const dispatch = useDispatch();\n  const { id } = useParams();\n  const error = useErrorHandler();\n\n  console.log(\"this is the error\", error);\n\n  useEffect(() => {\n    const passedMessage = props.history.location.passedMessage;\n\n    console.log(\"current messages\", currentMessage);\n    console.log(\"current messages\", message);\n\n    // if (setSuccess === false) {\n    //   dispatch(resetMessage());\n    //   props.history.push(\"/\");\n    // }\n\n    if (!passedMessage && setSuccess === null) {\n      console.log(\"set success\", setSuccess);\n\n      console.log(\"inside messages\", currentMessage);\n\n      console.log(\"it's here\");\n\n      dispatch(fetchMessage(id));\n    }\n    return () => (setSuccess === false ? dispatch(resetMessage()) : null);\n  }, []);\n\n  let messageBody = <Spinner />;\n\n  if (message) {\n    const date = new Date(message.createdAt).toDateString();\n    messageBody = (\n      <>\n        <p>\n          <b>\n            To my{\" \"}\n            <span className={styles.MessageAttribute}>{message.who.name}</span>\n          </b>\n          ,\n          <br />\n          <span className={styles.MessageDate}>{date}</span>\n        </p>\n        <span className={styles.MessageMessage}>{parse(message.message)}</span>\n        <p>\n          <b>\n            From your{\" \"}\n            <span className={styles.MessageAttribute}>\n              {message.identity.name}\n            </span>\n          </b>\n        </p>\n      </>\n    );\n  }\n\n  return <div>{messageBody}</div>;\n};\n\nexport default withRouter(FullMessage);\n\n// import React, { useEffect } from \"react\";\n// import { useSelector, useDispatch } from \"react-redux\";\n// import parse from \"html-react-parser\";\n// import styles from \"./FullMessage.module.css\";\n// import { fetchMessage, resetMessage } from \"../../store/actions\";\n// import { useParams, withRouter } from \"react-router-dom\";\n// import Spinner from \"../UI/Spinners/FormSpinner/FormSpinner\";\n// import withErrorHandler from \"../../hoc/withErrorHandler\";\n\n// const FullMessage = (props) => {\n//   const currentMessage = useSelector((state) => state.message.currentMessage);\n//   const setSuccess = useSelector((state) => state.message.setSuccess);\n//   const message = currentMessage\n//     ? currentMessage\n//     : props.history.location.passedMessage;\n//   const dispatch = useDispatch();\n//   const { id } = useParams();\n\n//   console.log(message);\n\n//   useEffect(() => {\n//     const passedMessage = props.history.location.passedMessage;\n//     if (setSuccess === false) {\n//       dispatch(resetMessage());\n//       props.history.push(\"/\");\n//     }\n\n//     if (!passedMessage) {\n//       dispatch(fetchMessage(id));\n//     }\n\n//     return () => (passedMessage ? null : dispatch(resetMessage()));\n//   }, [props.history]);\n\n//   let messageBody = <Spinner />;\n\n//   if (message) {\n//     const date = new Date(message.createdAt).toDateString();\n//     messageBody = (\n//       <>\n//         <p>\n//           <b>\n//             To my{\" \"}\n//             <span className={styles.MessageAttribute}>{message.who.name}</span>\n//           </b>\n//           ,\n//           <br />\n//           <span className={styles.MessageDate}>{date}</span>\n//         </p>\n//         <span className={styles.MessageMessage}>{parse(message.message)}</span>\n//         <p>\n//           <b>\n//             From your{\" \"}\n//             <span className={styles.MessageAttribute}>\n//               {message.identity.name}\n//             </span>\n//           </b>\n//         </p>\n//       </>\n//     );\n//   }\n\n//   return <div>{messageBody}</div>;\n// };\n\n// export default withErrorHandler(withRouter(FullMessage));\n"]},"metadata":{},"sourceType":"module"}