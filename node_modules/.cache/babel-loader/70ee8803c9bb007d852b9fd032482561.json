{"ast":null,"code":"// import { useEffect, useReducer } from \"react\";\n// import {\n//   fetchMessagesReset,\n//   resetMessage,\n//   getPersonsReset,\n// } from \"../../store/actions/index\";\n// import { useSelector, useDispatch } from \"react-redux\";\n// const initialState = {\n//   error: null,\n//   customerHandler: null,\n//   resetError: null,\n// };\n// const errorReducer = (errorState, action) => {\n//   switch (action.type) {\n//     case \"persons\":\n//       return {\n//         ...errorState,\n//         error: action.error,\n//         customerHandler: action.handler,\n//         resetError: getPersonsReset,\n//       };\n//     case \"submitMessage\":\n//       return {\n//         ...errorState,\n//         error: action.error,\n//         customerHandler: action.handler,\n//         resetError: resetMessage,\n//       };\n//     case \"message\":\n//       return {\n//         ...errorState,\n//         error: action.error,\n//         customerHandler: action.handler,\n//         resetError: resetMessage,\n//       };\n//     case \"messages\":\n//       return {\n//         ...errorState,\n//         error: action.error,\n//         customerHandler: action.handler,\n//         resetError: fetchMessagesReset,\n//       };\n//     default:\n//       return initialState;\n//   }\n// };\n// const useErrorHandler = (error, customerHandler = null) => {\n//   const [errorState, dispatchError] = useReducer(errorReducer, initialState);\n//   const messagesError = useSelector((state) => state.messages.error);\n//   const messageError = useSelector((state) => state.message.error);\n//   const personsError = useSelector((state) => state.persons.error);\n//   const body =\n//     customerHandler !== null ? errorState.customerHandler : errorState.error;\n//   //   console.log(errorState.error);\n//   //   if (messageError) {\n//   //     body = \"bingo bango bongo\";\n//   //   }\n//   //   const [hasError, setHasError] = useState(false);\n//   //   const dispatch = useDispatch();\n//   useEffect(() => {\n//     console.log(error);\n//     if (error === \"persons\") {\n//       dispatchError({\n//         type: \"persons\",\n//         error: personsError,\n//         action: customerHandler,\n//       });\n//     } else if (error === \"messages\") {\n//       dispatchError({\n//         type: \"messages\",\n//         error: messagesError,\n//         action: customerHandler,\n//       });\n//     } else if (error === \"message\") {\n//       dispatchError({\n//         type: \"message\",\n//         error: messageError,\n//         action: customerHandler,\n//       });\n//     } else if (error === \"submitMessage\") {\n//       dispatchError({\n//         type: \"submitMessage\",\n//         error: messageError,\n//         action: customerHandler,\n//       });\n//     }\n//     return () => console.log(\"bingo\");\n//   }, [messageError, messagesError, personsError, customerHandler, error]);\n//   return body;\n// };\n// export default useErrorHandler;","map":{"version":3,"sources":["/home/anthony/Desktop/if-you-were-here/client/src/hooks/useErrorHandler/useErrorHandler.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA","sourcesContent":["// import { useEffect, useReducer } from \"react\";\n// import {\n//   fetchMessagesReset,\n//   resetMessage,\n//   getPersonsReset,\n// } from \"../../store/actions/index\";\n\n// import { useSelector, useDispatch } from \"react-redux\";\n\n// const initialState = {\n//   error: null,\n//   customerHandler: null,\n//   resetError: null,\n// };\n\n// const errorReducer = (errorState, action) => {\n//   switch (action.type) {\n//     case \"persons\":\n//       return {\n//         ...errorState,\n//         error: action.error,\n//         customerHandler: action.handler,\n//         resetError: getPersonsReset,\n//       };\n//     case \"submitMessage\":\n//       return {\n//         ...errorState,\n//         error: action.error,\n//         customerHandler: action.handler,\n//         resetError: resetMessage,\n//       };\n//     case \"message\":\n//       return {\n//         ...errorState,\n//         error: action.error,\n//         customerHandler: action.handler,\n//         resetError: resetMessage,\n//       };\n//     case \"messages\":\n//       return {\n//         ...errorState,\n//         error: action.error,\n//         customerHandler: action.handler,\n//         resetError: fetchMessagesReset,\n//       };\n//     default:\n//       return initialState;\n//   }\n// };\n\n// const useErrorHandler = (error, customerHandler = null) => {\n//   const [errorState, dispatchError] = useReducer(errorReducer, initialState);\n//   const messagesError = useSelector((state) => state.messages.error);\n//   const messageError = useSelector((state) => state.message.error);\n//   const personsError = useSelector((state) => state.persons.error);\n//   const body =\n//     customerHandler !== null ? errorState.customerHandler : errorState.error;\n\n//   //   console.log(errorState.error);\n\n//   //   if (messageError) {\n//   //     body = \"bingo bango bongo\";\n//   //   }\n//   //   const [hasError, setHasError] = useState(false);\n//   //   const dispatch = useDispatch();\n\n//   useEffect(() => {\n//     console.log(error);\n\n//     if (error === \"persons\") {\n//       dispatchError({\n//         type: \"persons\",\n//         error: personsError,\n//         action: customerHandler,\n//       });\n//     } else if (error === \"messages\") {\n//       dispatchError({\n//         type: \"messages\",\n//         error: messagesError,\n//         action: customerHandler,\n//       });\n//     } else if (error === \"message\") {\n//       dispatchError({\n//         type: \"message\",\n//         error: messageError,\n//         action: customerHandler,\n//       });\n//     } else if (error === \"submitMessage\") {\n//       dispatchError({\n//         type: \"submitMessage\",\n//         error: messageError,\n//         action: customerHandler,\n//       });\n//     }\n//     return () => console.log(\"bingo\");\n//   }, [messageError, messagesError, personsError, customerHandler, error]);\n\n//   return body;\n// };\n\n// export default useErrorHandler;\n"]},"metadata":{},"sourceType":"module"}