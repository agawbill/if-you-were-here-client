{"ast":null,"code":"import _slicedToArray from\"/home/anthony/Desktop/if-you-were-here/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import styles from\"./SortOption.module.css\";import{useDispatch,useSelector}from\"react-redux\";import{addSort,removeSort}from\"../../../store/actions\";var SortOption=function SortOption(props){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),selected=_useState2[0],setSelected=_useState2[1];var sort=useSelector(function(state){return state.messages.sort;});var _useSelector=useSelector(function(state){return state.messages.filters;}),who=_useSelector.who,identity=_useSelector.identity;var dispatch=useDispatch();var filter=props.filter,sortHandler=props.sortHandler,sortSelected=props.sortSelected;var selectHandler=function selectHandler(filter){setSelected(function(prevState){return!prevState;});sortHandler(filter);};useEffect(function(){//we need to check to see if the content is filtered-- to determine which array of messages to sort\n//(the filtered ones, or unfiltered)\nvar filtered=who!==null||identity!==null;if(!selected&&sort===filter){dispatch(removeSort(filter,filtered));// if (!selected && sort) {\n//   dispatch(removeSort(filter, filtered));\n}else if(selected){dispatch(addSort(filter,filtered));}},[selected]);useEffect(function(){if(sortSelected!==filter){setSelected(false);}},[sortSelected]);return React.createElement(\"div\",{className:selected?styles.SortOptionSelected:styles.SortOption,onClick:function onClick(){return selectHandler(filter);}},props.filter);};export default SortOption;","map":{"version":3,"sources":["/home/anthony/Desktop/if-you-were-here/client/src/components/FilterOptions/SortOption/SortOption.js"],"names":["React","useState","useEffect","styles","useDispatch","useSelector","addSort","removeSort","SortOption","props","selected","setSelected","sort","state","messages","filters","who","identity","dispatch","filter","sortHandler","sortSelected","selectHandler","prevState","filtered","SortOptionSelected"],"mappings":"oKAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,MAAP,KAAmB,yBAAnB,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CACA,OAASC,OAAT,CAAkBC,UAAlB,KAAoC,wBAApC,CAEA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,KAAD,CAAW,eACIR,QAAQ,CAAC,KAAD,CADZ,wCACrBS,QADqB,eACXC,WADW,eAE5B,GAAMC,CAAAA,IAAI,CAAGP,WAAW,CAAC,SAACQ,KAAD,QAAWA,CAAAA,KAAK,CAACC,QAAN,CAAeF,IAA1B,EAAD,CAAxB,CAF4B,iBAGFP,WAAW,CAAC,SAACQ,KAAD,QAAWA,CAAAA,KAAK,CAACC,QAAN,CAAeC,OAA1B,EAAD,CAHT,CAGpBC,GAHoB,cAGpBA,GAHoB,CAGfC,QAHe,cAGfA,QAHe,CAI5B,GAAMC,CAAAA,QAAQ,CAAGd,WAAW,EAA5B,CAJ4B,GAKpBe,CAAAA,MALoB,CAKkBV,KALlB,CAKpBU,MALoB,CAKZC,WALY,CAKkBX,KALlB,CAKZW,WALY,CAKCC,YALD,CAKkBZ,KALlB,CAKCY,YALD,CAO5B,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACH,MAAD,CAAY,CAChCR,WAAW,CAAC,SAACY,SAAD,QAAe,CAACA,SAAhB,EAAD,CAAX,CACAH,WAAW,CAACD,MAAD,CAAX,CACD,CAHD,CAKAjB,SAAS,CAAC,UAAM,CACd;AACA;AACA,GAAMsB,CAAAA,QAAQ,CAAGR,GAAG,GAAK,IAAR,EAAgBC,QAAQ,GAAK,IAA9C,CACA,GAAI,CAACP,QAAD,EAAaE,IAAI,GAAKO,MAA1B,CAAkC,CAChCD,QAAQ,CAACX,UAAU,CAACY,MAAD,CAASK,QAAT,CAAX,CAAR,CACA;AACA;AACD,CAJD,IAIO,IAAId,QAAJ,CAAc,CACnBQ,QAAQ,CAACZ,OAAO,CAACa,MAAD,CAASK,QAAT,CAAR,CAAR,CACD,CACF,CAXQ,CAWN,CAACd,QAAD,CAXM,CAAT,CAaAR,SAAS,CAAC,UAAM,CACd,GAAImB,YAAY,GAAKF,MAArB,CAA6B,CAC3BR,WAAW,CAAC,KAAD,CAAX,CACD,CACF,CAJQ,CAIN,CAACU,YAAD,CAJM,CAAT,CAMA,MACE,4BACE,SAAS,CAAEX,QAAQ,CAAGP,MAAM,CAACsB,kBAAV,CAA+BtB,MAAM,CAACK,UAD3D,CAEE,OAAO,CAAE,yBAAMc,CAAAA,aAAa,CAACH,MAAD,CAAnB,EAFX,EAIGV,KAAK,CAACU,MAJT,CADF,CAQD,CAvCD,CAyCA,cAAeX,CAAAA,UAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport styles from \"./SortOption.module.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addSort, removeSort } from \"../../../store/actions\";\n\nconst SortOption = (props) => {\n  const [selected, setSelected] = useState(false);\n  const sort = useSelector((state) => state.messages.sort);\n  const { who, identity } = useSelector((state) => state.messages.filters);\n  const dispatch = useDispatch();\n  const { filter, sortHandler, sortSelected } = props;\n\n  const selectHandler = (filter) => {\n    setSelected((prevState) => !prevState);\n    sortHandler(filter);\n  };\n\n  useEffect(() => {\n    //we need to check to see if the content is filtered-- to determine which array of messages to sort\n    //(the filtered ones, or unfiltered)\n    const filtered = who !== null || identity !== null;\n    if (!selected && sort === filter) {\n      dispatch(removeSort(filter, filtered));\n      // if (!selected && sort) {\n      //   dispatch(removeSort(filter, filtered));\n    } else if (selected) {\n      dispatch(addSort(filter, filtered));\n    }\n  }, [selected]);\n\n  useEffect(() => {\n    if (sortSelected !== filter) {\n      setSelected(false);\n    }\n  }, [sortSelected]);\n\n  return (\n    <div\n      className={selected ? styles.SortOptionSelected : styles.SortOption}\n      onClick={() => selectHandler(filter)}\n    >\n      {props.filter}\n    </div>\n  );\n};\n\nexport default SortOption;\n"]},"metadata":{},"sourceType":"module"}