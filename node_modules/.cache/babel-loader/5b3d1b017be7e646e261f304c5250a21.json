{"ast":null,"code":"import React,{useEffect}from\"react\";import{useSelector,useDispatch}from\"react-redux\";import parse from\"html-react-parser\";import styles from\"./FullMessage.module.css\";import{fetchMessage,resetMessage}from\"../../store/actions\";import{useParams,withRouter}from\"react-router-dom\";import Spinner from\"../UI/Spinners/FormSpinner/FormSpinner\";var FullMessage=function FullMessage(props){var currentMessage=useSelector(function(state){return state.message.currentMessage;});var error=useSelector(function(state){return state.message.error;});var message=currentMessage?currentMessage:props.history.location.passedMessage;var dispatch=useDispatch();var _useParams=useParams(),id=_useParams.id;useEffect(function(){var passedMessage=props.history.location.passedMessage;if(!passedMessage){dispatch(fetchMessage(id));}return function(){return dispatch(resetMessage());};},[]);var messageBody=React.createElement(Spinner,null);if(message){var date=new Date(message.createdAt).toDateString();messageBody=React.createElement(React.Fragment,null,React.createElement(\"p\",null,React.createElement(\"b\",null,\"To my\",\" \",React.createElement(\"span\",{className:styles.MessageAttribute},message.who.name)),\",\",React.createElement(\"br\",null),React.createElement(\"span\",{className:styles.MessageDate},date)),React.createElement(\"span\",{className:styles.MessageMessage},parse(message.message)),React.createElement(\"p\",null,React.createElement(\"b\",null,\"From your\",\" \",React.createElement(\"span\",{className:styles.MessageAttribute},message.identity.name))));}if(error){messageBody=React.createElement(\"center\",null,React.createElement(\"span\",{style:{color:\"red\",fontWeight:\"bold\"}},\"Sorry, an error has occurred and IT has been notified:\"),React.createElement(\"span\",{style:{color:\"white\"}},\" \",error));}return React.createElement(\"div\",null,messageBody);};export default withRouter(FullMessage);","map":{"version":3,"sources":["/home/anthony/Desktop/if-you-were-here/client/src/components/FullMessage/FullMessage.js"],"names":["React","useEffect","useSelector","useDispatch","parse","styles","fetchMessage","resetMessage","useParams","withRouter","Spinner","FullMessage","props","currentMessage","state","message","error","history","location","passedMessage","dispatch","id","messageBody","date","Date","createdAt","toDateString","MessageAttribute","who","name","MessageDate","MessageMessage","identity","color","fontWeight"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CACA,MAAOC,CAAAA,KAAP,KAAkB,mBAAlB,CACA,MAAOC,CAAAA,MAAP,KAAmB,0BAAnB,CACA,OAASC,YAAT,CAAuBC,YAAvB,KAA2C,qBAA3C,CACA,OAASC,SAAT,CAAoBC,UAApB,KAAsC,kBAAtC,CACA,MAAOC,CAAAA,OAAP,KAAoB,wCAApB,CAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,CAAW,CAC7B,GAAMC,CAAAA,cAAc,CAAGX,WAAW,CAAC,SAACY,KAAD,QAAWA,CAAAA,KAAK,CAACC,OAAN,CAAcF,cAAzB,EAAD,CAAlC,CACA,GAAMG,CAAAA,KAAK,CAAGd,WAAW,CAAC,SAACY,KAAD,QAAWA,CAAAA,KAAK,CAACC,OAAN,CAAcC,KAAzB,EAAD,CAAzB,CACA,GAAMD,CAAAA,OAAO,CAAGF,cAAc,CAC1BA,cAD0B,CAE1BD,KAAK,CAACK,OAAN,CAAcC,QAAd,CAAuBC,aAF3B,CAGA,GAAMC,CAAAA,QAAQ,CAAGjB,WAAW,EAA5B,CAN6B,eAOdK,SAAS,EAPK,CAOrBa,EAPqB,YAOrBA,EAPqB,CAS7BpB,SAAS,CAAC,UAAM,CACd,GAAMkB,CAAAA,aAAa,CAAGP,KAAK,CAACK,OAAN,CAAcC,QAAd,CAAuBC,aAA7C,CACA,GAAI,CAACA,aAAL,CAAoB,CAClBC,QAAQ,CAACd,YAAY,CAACe,EAAD,CAAb,CAAR,CACD,CACD,MAAO,kBAAMD,CAAAA,QAAQ,CAACb,YAAY,EAAb,CAAd,EAAP,CACD,CANQ,CAMN,EANM,CAAT,CAQA,GAAIe,CAAAA,WAAW,CAAG,oBAAC,OAAD,MAAlB,CAEA,GAAIP,OAAJ,CAAa,CACX,GAAMQ,CAAAA,IAAI,CAAG,GAAIC,CAAAA,IAAJ,CAAST,OAAO,CAACU,SAAjB,EAA4BC,YAA5B,EAAb,CACAJ,WAAW,CACT,wCACE,6BACE,qCACQ,GADR,CAEE,4BAAM,SAAS,CAAEjB,MAAM,CAACsB,gBAAxB,EAA2CZ,OAAO,CAACa,GAAR,CAAYC,IAAvD,CAFF,CADF,KAME,8BANF,CAOE,4BAAM,SAAS,CAAExB,MAAM,CAACyB,WAAxB,EAAsCP,IAAtC,CAPF,CADF,CAUE,4BAAM,SAAS,CAAElB,MAAM,CAAC0B,cAAxB,EAAyC3B,KAAK,CAACW,OAAO,CAACA,OAAT,CAA9C,CAVF,CAWE,6BACE,yCACY,GADZ,CAEE,4BAAM,SAAS,CAAEV,MAAM,CAACsB,gBAAxB,EACGZ,OAAO,CAACiB,QAAR,CAAiBH,IADpB,CAFF,CADF,CAXF,CADF,CAsBD,CAED,GAAIb,KAAJ,CAAW,CACTM,WAAW,CACT,kCACE,4BAAM,KAAK,CAAE,CAAEW,KAAK,CAAE,KAAT,CAAgBC,UAAU,CAAE,MAA5B,CAAb,2DADF,CAIE,4BAAM,KAAK,CAAE,CAAED,KAAK,CAAE,OAAT,CAAb,MAAmCjB,KAAnC,CAJF,CADF,CAQD,CAED,MAAO,gCAAMM,WAAN,CAAP,CACD,CAzDD,CA2DA,cAAeb,CAAAA,UAAU,CAACE,WAAD,CAAzB","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport parse from \"html-react-parser\";\nimport styles from \"./FullMessage.module.css\";\nimport { fetchMessage, resetMessage } from \"../../store/actions\";\nimport { useParams, withRouter } from \"react-router-dom\";\nimport Spinner from \"../UI/Spinners/FormSpinner/FormSpinner\";\n\nconst FullMessage = (props) => {\n  const currentMessage = useSelector((state) => state.message.currentMessage);\n  const error = useSelector((state) => state.message.error);\n  const message = currentMessage\n    ? currentMessage\n    : props.history.location.passedMessage;\n  const dispatch = useDispatch();\n  const { id } = useParams();\n\n  useEffect(() => {\n    const passedMessage = props.history.location.passedMessage;\n    if (!passedMessage) {\n      dispatch(fetchMessage(id));\n    }\n    return () => dispatch(resetMessage());\n  }, []);\n\n  let messageBody = <Spinner />;\n\n  if (message) {\n    const date = new Date(message.createdAt).toDateString();\n    messageBody = (\n      <>\n        <p>\n          <b>\n            To my{\" \"}\n            <span className={styles.MessageAttribute}>{message.who.name}</span>\n          </b>\n          ,\n          <br />\n          <span className={styles.MessageDate}>{date}</span>\n        </p>\n        <span className={styles.MessageMessage}>{parse(message.message)}</span>\n        <p>\n          <b>\n            From your{\" \"}\n            <span className={styles.MessageAttribute}>\n              {message.identity.name}\n            </span>\n          </b>\n        </p>\n      </>\n    );\n  }\n\n  if (error) {\n    messageBody = (\n      <center>\n        <span style={{ color: \"red\", fontWeight: \"bold\" }}>\n          Sorry, an error has occurred and IT has been notified:\n        </span>\n        <span style={{ color: \"white\" }}> {error}</span>\n      </center>\n    );\n  }\n\n  return <div>{messageBody}</div>;\n};\n\nexport default withRouter(FullMessage);\n"]},"metadata":{},"sourceType":"module"}