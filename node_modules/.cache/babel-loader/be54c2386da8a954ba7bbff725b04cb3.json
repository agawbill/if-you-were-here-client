{"ast":null,"code":"import * as actionTypes from \"../actions/actionTypes\";\nconst initialState = {\n  messages: [],\n  currentMessage: null,\n  filteredMessages: [],\n  filters: {\n    who: null,\n    identity: null\n  },\n  sort: null,\n  messageSuccess: null,\n  setSuccess: null,\n  loading: false,\n  error: null\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.FETCH_MESSAGES_START:\n      return { ...state,\n        loading: true,\n        error: null\n      };\n\n    case actionTypes.FETCH_MESSAGES_SUCCESS:\n      return { ...state,\n        messages: [...action.messages],\n        loading: false,\n        error: null\n      };\n\n    case actionTypes.FETCH_MESSAGES_FAIL:\n      return { ...state,\n        loading: false,\n        error: action.error\n      };\n\n    case actionTypes.SUBMIT_MESSAGE_START:\n      return { ...state,\n        loading: true,\n        error: null\n      };\n\n    case actionTypes.SUBMIT_MESSAGE_SUCCESS:\n      return { ...state,\n        messageSuccess: true,\n        loading: true\n      };\n\n    case actionTypes.SUBMIT_MESSAGE_FAIL:\n      return { ...state,\n        loading: false,\n        error: action.error\n      };\n\n    case actionTypes.SUBMIT_MESSAGE_RESET:\n      return { ...state,\n        loading: false,\n        error: null,\n        messageSuccess: null\n      };\n    //filter & sort logic below\n\n    case actionTypes.FILTER_MESSAGES_START:\n      return { ...state,\n        loading: true,\n        error: null\n      };\n\n    case actionTypes.FILTER_MESSAGES_FAIL:\n      return { ...state,\n        loading: false,\n        error: action.error\n      };\n\n    case actionTypes.FILTER_MESSAGES_ADD:\n      return { ...state,\n        filters: { ...state.filters,\n          [action.name]: action.filter\n        }\n      };\n\n    case actionTypes.FILTER_MESSAGES_REMOVE:\n      return { ...state,\n        filters: { ...state.filters,\n          [action.name]: null\n        }\n      };\n\n    case actionTypes.FILTER_MESSAGES:\n      const {\n        who,\n        identity\n      } = state.filters;\n      const messagesCopy = [...state.messages];\n      const newFilteredMessages = who && identity ? messagesCopy.filter(message => message.who.name === who && message.identity.name === identity) : messagesCopy.filter(message => message.who.name === who || message.identity.name === identity);\n      return { ...state,\n        filteredMessages: [...newFilteredMessages],\n        loading: false,\n        error: null\n      };\n\n    case actionTypes.FILTER_RESET:\n      return { ...state,\n        filteredMessages: [],\n        loading: false,\n        error: null\n      };\n\n    case actionTypes.SORT_MESSAGES_START:\n      return { ...state,\n        loading: true,\n        error: null\n      };\n\n    case actionTypes.SORT_MESSAGES_FAIL:\n      return { ...state,\n        loading: false,\n        error: action.error\n      };\n\n    case actionTypes.SORT_MESSAGES_ADD:\n      return { ...state,\n        sort: action.filter\n      };\n\n    case actionTypes.SORT_MESSAGES_REMOVE:\n      return { ...state,\n        sort: false\n      };\n\n    case actionTypes.SORT_MESSAGES:\n      const filteredCopy = action.filtered ? [...state.filteredMessages] : [...state.messages];\n      const sortedMessages = state.sort === \"Oldest\" ? filteredCopy.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt)) : filteredCopy.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n      return { ...state,\n        filteredMessages: [...sortedMessages],\n        loading: false,\n        error: null\n      };\n\n    case actionTypes.SORT_RESET:\n      return { ...state,\n        sort: null,\n        loading: false,\n        error: null\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/anthony/Desktop/if-you-were-here/client/src/store/reducers/messages.js"],"names":["actionTypes","initialState","messages","currentMessage","filteredMessages","filters","who","identity","sort","messageSuccess","setSuccess","loading","error","reducer","state","action","type","FETCH_MESSAGES_START","FETCH_MESSAGES_SUCCESS","FETCH_MESSAGES_FAIL","SUBMIT_MESSAGE_START","SUBMIT_MESSAGE_SUCCESS","SUBMIT_MESSAGE_FAIL","SUBMIT_MESSAGE_RESET","FILTER_MESSAGES_START","FILTER_MESSAGES_FAIL","FILTER_MESSAGES_ADD","name","filter","FILTER_MESSAGES_REMOVE","FILTER_MESSAGES","messagesCopy","newFilteredMessages","message","FILTER_RESET","SORT_MESSAGES_START","SORT_MESSAGES_FAIL","SORT_MESSAGES_ADD","SORT_MESSAGES_REMOVE","SORT_MESSAGES","filteredCopy","filtered","sortedMessages","a","b","Date","createdAt","SORT_RESET"],"mappings":"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","sourcesContent":["import * as actionTypes from \"../actions/actionTypes\";\n\nconst initialState = {\n  messages: [],\n  currentMessage: null,\n  filteredMessages: [],\n  filters: { who: null, identity: null },\n  sort: null,\n  messageSuccess: null,\n  setSuccess: null,\n  loading: false,\n  error: null,\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.FETCH_MESSAGES_START:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n    case actionTypes.FETCH_MESSAGES_SUCCESS:\n      return {\n        ...state,\n        messages: [...action.messages],\n        loading: false,\n        error: null,\n      };\n    case actionTypes.FETCH_MESSAGES_FAIL:\n      return {\n        ...state,\n        loading: false,\n        error: action.error,\n      };\n    case actionTypes.SUBMIT_MESSAGE_START:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n    case actionTypes.SUBMIT_MESSAGE_SUCCESS:\n      return {\n        ...state,\n        messageSuccess: true,\n        loading: true,\n      };\n    case actionTypes.SUBMIT_MESSAGE_FAIL:\n      return {\n        ...state,\n        loading: false,\n        error: action.error,\n      };\n    case actionTypes.SUBMIT_MESSAGE_RESET:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n        messageSuccess: null,\n      };\n\n    //filter & sort logic below\n    case actionTypes.FILTER_MESSAGES_START:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n    case actionTypes.FILTER_MESSAGES_FAIL:\n      return {\n        ...state,\n        loading: false,\n        error: action.error,\n      };\n    case actionTypes.FILTER_MESSAGES_ADD:\n      return {\n        ...state,\n        filters: {\n          ...state.filters,\n          [action.name]: action.filter,\n        },\n      };\n    case actionTypes.FILTER_MESSAGES_REMOVE:\n      return {\n        ...state,\n        filters: {\n          ...state.filters,\n          [action.name]: null,\n        },\n      };\n    case actionTypes.FILTER_MESSAGES:\n      const { who, identity } = state.filters;\n      const messagesCopy = [...state.messages];\n      const newFilteredMessages =\n        who && identity\n          ? messagesCopy.filter(\n              (message) =>\n                message.who.name === who && message.identity.name === identity\n            )\n          : messagesCopy.filter(\n              (message) =>\n                message.who.name === who || message.identity.name === identity\n            );\n      return {\n        ...state,\n        filteredMessages: [...newFilteredMessages],\n        loading: false,\n        error: null,\n      };\n    case actionTypes.FILTER_RESET:\n      return {\n        ...state,\n        filteredMessages: [],\n        loading: false,\n        error: null,\n      };\n    case actionTypes.SORT_MESSAGES_START:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n    case actionTypes.SORT_MESSAGES_FAIL:\n      return {\n        ...state,\n        loading: false,\n        error: action.error,\n      };\n    case actionTypes.SORT_MESSAGES_ADD:\n      return {\n        ...state,\n        sort: action.filter,\n      };\n    case actionTypes.SORT_MESSAGES_REMOVE:\n      return {\n        ...state,\n        sort: false,\n      };\n    case actionTypes.SORT_MESSAGES:\n      const filteredCopy = action.filtered\n        ? [...state.filteredMessages]\n        : [...state.messages];\n      const sortedMessages =\n        state.sort === \"Oldest\"\n          ? filteredCopy.sort(\n              (a, b) => new Date(a.createdAt) - new Date(b.createdAt)\n            )\n          : filteredCopy.sort(\n              (a, b) => new Date(b.createdAt) - new Date(a.createdAt)\n            );\n      return {\n        ...state,\n        filteredMessages: [...sortedMessages],\n        loading: false,\n        error: null,\n      };\n    case actionTypes.SORT_RESET:\n      return {\n        ...state,\n        sort: null,\n        loading: false,\n        error: null,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}