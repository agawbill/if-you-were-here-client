{"ast":null,"code":"import * as actionTypes from \"./actionTypes\";\nexport const fetchMessages = (postId, count) => {\n  return async dispatch => {\n    try {\n      dispatch(fetchMessagesStart());\n      const response = await fetch(`/api/messages?count=${count}&id=${postId}`, {\n        method: \"GET\",\n        mode: \"cors\",\n        cache: \"no-cache\",\n        credentials: \"same-origin\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const {\n        messages,\n        count: messageCount\n      } = await response.json();\n      dispatch(fetchMessagesSuccess(messages, messageCount));\n    } catch (err) {\n      dispatch(fetchMessagesFail(err));\n    }\n  };\n};\nexport const fetchMessagesStart = () => {\n  return {\n    type: actionTypes.FETCH_MESSAGES_START\n  };\n};\nexport const fetchMessagesSuccess = (messages, count) => {\n  return {\n    type: actionTypes.FETCH_MESSAGES_SUCCESS,\n    messages,\n    count\n  };\n};\nexport const fetchMessagesFail = messages => {\n  return {\n    type: actionTypes.FETCH_MESSAGES_SUCCESS,\n    messages\n  };\n};\nexport const fetchMoreMessages = (postId, count) => {\n  return async dispatch => {\n    try {\n      dispatch(fetchMessagesStart());\n      const response = await fetch(`/api/messages?count=${count}&id=${postId}`, {\n        method: \"GET\",\n        mode: \"cors\",\n        cache: \"no-cache\",\n        credentials: \"same-origin\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const {\n        messages,\n        count: messageCount\n      } = await response.json();\n      dispatch(fetchMessagesSuccess(messages, messageCount));\n    } catch (err) {\n      dispatch(fetchMessagesFail(err));\n    }\n  };\n};\nexport const fetchMoreMessagesStart = () => {\n  return {\n    type: actionTypes.FETCH_MESSAGES_START\n  };\n};\nexport const fetchMoreMessagesSuccess = (messages, count) => {\n  return {\n    type: actionTypes.FETCH_MESSAGES_SUCCESS,\n    messages,\n    count\n  };\n};\nexport const fetchMoreMessagesFail = messages => {\n  return {\n    type: actionTypes.FETCH_MESSAGES_SUCCESS,\n    messages\n  };\n};","map":{"version":3,"sources":["/home/anthony/Desktop/if-you-were-here/client/src/store/actions/messages.js"],"names":["actionTypes","fetchMessages","postId","count","dispatch","fetchMessagesStart","response","fetch","method","mode","cache","credentials","headers","messages","messageCount","json","fetchMessagesSuccess","err","fetchMessagesFail","type","FETCH_MESSAGES_START","FETCH_MESSAGES_SUCCESS","fetchMoreMessages","fetchMoreMessagesStart","fetchMoreMessagesSuccess","fetchMoreMessagesFail"],"mappings":"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","sourcesContent":["import * as actionTypes from \"./actionTypes\";\n\nexport const fetchMessages = (postId, count) => {\n  return async (dispatch) => {\n    try {\n      dispatch(fetchMessagesStart());\n      const response = await fetch(\n        `/api/messages?count=${count}&id=${postId}`,\n        {\n          method: \"GET\",\n          mode: \"cors\",\n          cache: \"no-cache\",\n          credentials: \"same-origin\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n      const { messages, count: messageCount } = await response.json();\n      dispatch(fetchMessagesSuccess(messages, messageCount));\n    } catch (err) {\n      dispatch(fetchMessagesFail(err));\n    }\n  };\n};\n\nexport const fetchMessagesStart = () => {\n  return {\n    type: actionTypes.FETCH_MESSAGES_START,\n  };\n};\n\nexport const fetchMessagesSuccess = (messages, count) => {\n  return {\n    type: actionTypes.FETCH_MESSAGES_SUCCESS,\n    messages,\n    count,\n  };\n};\n\nexport const fetchMessagesFail = (messages) => {\n  return {\n    type: actionTypes.FETCH_MESSAGES_SUCCESS,\n    messages,\n  };\n};\nexport const fetchMoreMessages = (postId, count) => {\n  return async (dispatch) => {\n    try {\n      dispatch(fetchMessagesStart());\n      const response = await fetch(\n        `/api/messages?count=${count}&id=${postId}`,\n        {\n          method: \"GET\",\n          mode: \"cors\",\n          cache: \"no-cache\",\n          credentials: \"same-origin\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n      const { messages, count: messageCount } = await response.json();\n      dispatch(fetchMessagesSuccess(messages, messageCount));\n    } catch (err) {\n      dispatch(fetchMessagesFail(err));\n    }\n  };\n};\n\nexport const fetchMoreMessagesStart = () => {\n  return {\n    type: actionTypes.FETCH_MESSAGES_START,\n  };\n};\n\nexport const fetchMoreMessagesSuccess = (messages, count) => {\n  return {\n    type: actionTypes.FETCH_MESSAGES_SUCCESS,\n    messages,\n    count,\n  };\n};\n\nexport const fetchMoreMessagesFail = (messages) => {\n  return {\n    type: actionTypes.FETCH_MESSAGES_SUCCESS,\n    messages,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}