{"ast":null,"code":"// import Immutable from 'immutable'; // eslint-disable-line no-unused-vars\nimport invariant from 'invariant';\nimport React from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport { convertToRaw } from 'draft-js';\nimport encodeBlock from './encodeBlock';\nimport blockEntities from './blockEntities';\nimport blockInlineStyles from './blockInlineStyles';\nimport accumulateFunction from './util/accumulateFunction';\nimport blockTypeObjectFunction from './util/blockTypeObjectFunction';\nimport getBlockTags from './util/getBlockTags';\nimport getNestedBlockTags from './util/getNestedBlockTags';\nimport defaultBlockHTML from './default/defaultBlockHTML';\n\nvar defaultEntityToHTML = function defaultEntityToHTML(entity, originalText) {\n  return originalText;\n};\n\nvar convertToHTML = function convertToHTML(_ref) {\n  var _ref$styleToHTML = _ref.styleToHTML,\n      styleToHTML = _ref$styleToHTML === void 0 ? {} : _ref$styleToHTML,\n      _ref$blockToHTML = _ref.blockToHTML,\n      blockToHTML = _ref$blockToHTML === void 0 ? {} : _ref$blockToHTML,\n      _ref$entityToHTML = _ref.entityToHTML,\n      entityToHTML = _ref$entityToHTML === void 0 ? defaultEntityToHTML : _ref$entityToHTML;\n  return function (contentState) {\n    invariant(contentState !== null && contentState !== undefined, 'Expected contentState to be non-null');\n    var getBlockHTML;\n\n    if (blockToHTML.__isMiddleware === true) {\n      getBlockHTML = blockToHTML(blockTypeObjectFunction(defaultBlockHTML));\n    } else {\n      getBlockHTML = accumulateFunction(blockTypeObjectFunction(blockToHTML), blockTypeObjectFunction(defaultBlockHTML));\n    }\n\n    var rawState = convertToRaw(contentState);\n    var listStack = [];\n    var result = rawState.blocks.map(function (block) {\n      var type = block.type,\n          depth = block.depth;\n      var closeNestTags = '';\n      var openNestTags = '';\n      var blockHTMLResult = getBlockHTML(block);\n\n      if (!blockHTMLResult) {\n        throw new Error(\"convertToHTML: missing HTML definition for block with type \".concat(block.type));\n      }\n\n      if (!blockHTMLResult.nest) {\n        // this block can't be nested, so reset all nesting if necessary\n        closeNestTags = listStack.reduceRight(function (string, nestedBlock) {\n          return string + getNestedBlockTags(getBlockHTML(nestedBlock)).nestEnd;\n        }, '');\n        listStack = [];\n      } else {\n        while (depth + 1 !== listStack.length || type !== listStack[depth].type) {\n          if (depth + 1 === listStack.length) {\n            // depth is right but doesn't match type\n            var blockToClose = listStack[depth];\n            closeNestTags += getNestedBlockTags(getBlockHTML(blockToClose)).nestEnd;\n            openNestTags += getNestedBlockTags(getBlockHTML(block)).nestStart;\n            listStack[depth] = block;\n          } else if (depth + 1 < listStack.length) {\n            var _blockToClose = listStack[listStack.length - 1];\n            closeNestTags += getNestedBlockTags(getBlockHTML(_blockToClose)).nestEnd;\n            listStack = listStack.slice(0, -1);\n          } else {\n            openNestTags += getNestedBlockTags(getBlockHTML(block)).nestStart;\n            listStack.push(block);\n          }\n        }\n      }\n\n      var innerHTML = blockInlineStyles(blockEntities(encodeBlock(block), rawState.entityMap, entityToHTML), styleToHTML);\n      var blockHTML = getBlockTags(getBlockHTML(block));\n      var html;\n\n      if (typeof blockHTML === 'string') {\n        html = blockHTML;\n      } else {\n        html = blockHTML.start + innerHTML + blockHTML.end;\n      }\n\n      if (innerHTML.length === 0 && Object.prototype.hasOwnProperty.call(blockHTML, 'empty')) {\n        if (React.isValidElement(blockHTML.empty)) {\n          html = ReactDOMServer.renderToStaticMarkup(blockHTML.empty);\n        } else {\n          html = blockHTML.empty;\n        }\n      }\n\n      return closeNestTags + openNestTags + html;\n    }).join('');\n    result = listStack.reduce(function (res, nestBlock) {\n      return res + getNestedBlockTags(getBlockHTML(nestBlock)).nestEnd;\n    }, result);\n    return result;\n  };\n};\n\nexport default (function () {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  if (args.length === 1 && Object.prototype.hasOwnProperty.call(args[0], '_map') && args[0].getBlockMap != null) {\n    // skip higher-order function and use defaults\n    return convertToHTML({}).apply(void 0, args);\n  }\n\n  return convertToHTML.apply(void 0, args);\n});","map":{"version":3,"sources":["/home/anthony/Desktop/if-you-were-here/node_modules/draft-convert/esm/convertToHTML.js"],"names":["invariant","React","ReactDOMServer","convertToRaw","encodeBlock","blockEntities","blockInlineStyles","accumulateFunction","blockTypeObjectFunction","getBlockTags","getNestedBlockTags","defaultBlockHTML","defaultEntityToHTML","entity","originalText","convertToHTML","_ref","_ref$styleToHTML","styleToHTML","_ref$blockToHTML","blockToHTML","_ref$entityToHTML","entityToHTML","contentState","undefined","getBlockHTML","__isMiddleware","rawState","listStack","result","blocks","map","block","type","depth","closeNestTags","openNestTags","blockHTMLResult","Error","concat","nest","reduceRight","string","nestedBlock","nestEnd","length","blockToClose","nestStart","_blockToClose","slice","push","innerHTML","entityMap","blockHTML","html","start","end","Object","prototype","hasOwnProperty","call","isValidElement","empty","renderToStaticMarkup","join","reduce","res","nestBlock","_len","arguments","args","Array","_key","getBlockMap","apply"],"mappings":"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","sourcesContent":["// import Immutable from 'immutable'; // eslint-disable-line no-unused-vars\nimport invariant from 'invariant';\nimport React from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport { convertToRaw } from 'draft-js';\nimport encodeBlock from './encodeBlock';\nimport blockEntities from './blockEntities';\nimport blockInlineStyles from './blockInlineStyles';\nimport accumulateFunction from './util/accumulateFunction';\nimport blockTypeObjectFunction from './util/blockTypeObjectFunction';\nimport getBlockTags from './util/getBlockTags';\nimport getNestedBlockTags from './util/getNestedBlockTags';\nimport defaultBlockHTML from './default/defaultBlockHTML';\n\nvar defaultEntityToHTML = function defaultEntityToHTML(entity, originalText) {\n  return originalText;\n};\n\nvar convertToHTML = function convertToHTML(_ref) {\n  var _ref$styleToHTML = _ref.styleToHTML,\n      styleToHTML = _ref$styleToHTML === void 0 ? {} : _ref$styleToHTML,\n      _ref$blockToHTML = _ref.blockToHTML,\n      blockToHTML = _ref$blockToHTML === void 0 ? {} : _ref$blockToHTML,\n      _ref$entityToHTML = _ref.entityToHTML,\n      entityToHTML = _ref$entityToHTML === void 0 ? defaultEntityToHTML : _ref$entityToHTML;\n  return function (contentState) {\n    invariant(contentState !== null && contentState !== undefined, 'Expected contentState to be non-null');\n    var getBlockHTML;\n\n    if (blockToHTML.__isMiddleware === true) {\n      getBlockHTML = blockToHTML(blockTypeObjectFunction(defaultBlockHTML));\n    } else {\n      getBlockHTML = accumulateFunction(blockTypeObjectFunction(blockToHTML), blockTypeObjectFunction(defaultBlockHTML));\n    }\n\n    var rawState = convertToRaw(contentState);\n    var listStack = [];\n    var result = rawState.blocks.map(function (block) {\n      var type = block.type,\n          depth = block.depth;\n      var closeNestTags = '';\n      var openNestTags = '';\n      var blockHTMLResult = getBlockHTML(block);\n\n      if (!blockHTMLResult) {\n        throw new Error(\"convertToHTML: missing HTML definition for block with type \".concat(block.type));\n      }\n\n      if (!blockHTMLResult.nest) {\n        // this block can't be nested, so reset all nesting if necessary\n        closeNestTags = listStack.reduceRight(function (string, nestedBlock) {\n          return string + getNestedBlockTags(getBlockHTML(nestedBlock)).nestEnd;\n        }, '');\n        listStack = [];\n      } else {\n        while (depth + 1 !== listStack.length || type !== listStack[depth].type) {\n          if (depth + 1 === listStack.length) {\n            // depth is right but doesn't match type\n            var blockToClose = listStack[depth];\n            closeNestTags += getNestedBlockTags(getBlockHTML(blockToClose)).nestEnd;\n            openNestTags += getNestedBlockTags(getBlockHTML(block)).nestStart;\n            listStack[depth] = block;\n          } else if (depth + 1 < listStack.length) {\n            var _blockToClose = listStack[listStack.length - 1];\n            closeNestTags += getNestedBlockTags(getBlockHTML(_blockToClose)).nestEnd;\n            listStack = listStack.slice(0, -1);\n          } else {\n            openNestTags += getNestedBlockTags(getBlockHTML(block)).nestStart;\n            listStack.push(block);\n          }\n        }\n      }\n\n      var innerHTML = blockInlineStyles(blockEntities(encodeBlock(block), rawState.entityMap, entityToHTML), styleToHTML);\n      var blockHTML = getBlockTags(getBlockHTML(block));\n      var html;\n\n      if (typeof blockHTML === 'string') {\n        html = blockHTML;\n      } else {\n        html = blockHTML.start + innerHTML + blockHTML.end;\n      }\n\n      if (innerHTML.length === 0 && Object.prototype.hasOwnProperty.call(blockHTML, 'empty')) {\n        if (React.isValidElement(blockHTML.empty)) {\n          html = ReactDOMServer.renderToStaticMarkup(blockHTML.empty);\n        } else {\n          html = blockHTML.empty;\n        }\n      }\n\n      return closeNestTags + openNestTags + html;\n    }).join('');\n    result = listStack.reduce(function (res, nestBlock) {\n      return res + getNestedBlockTags(getBlockHTML(nestBlock)).nestEnd;\n    }, result);\n    return result;\n  };\n};\n\nexport default (function () {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  if (args.length === 1 && Object.prototype.hasOwnProperty.call(args[0], '_map') && args[0].getBlockMap != null) {\n    // skip higher-order function and use defaults\n    return convertToHTML({}).apply(void 0, args);\n  }\n\n  return convertToHTML.apply(void 0, args);\n});"]},"metadata":{},"sourceType":"module"}