{"ast":null,"code":"var _jsxFileName = \"/home/anthony/Desktop/if-you-were-here/src/components/FullPost/FullPost.js\";\nimport React, { useEffect, useRef } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport parse from \"html-react-parser\";\nimport styles from \"./FullPost.module.css\";\nimport { setPost, resetPost } from \"../../store/actions\";\nimport { useParams, withRouter } from \"react-router-dom\";\nimport Spinner from \"../UI/Spinners/FormSpinner/FormSpinner\";\n\nconst FullPost = props => {\n  const post = useSelector(state => state.currentPost);\n  const setSuccess = useSelector(state => state.setSuccess);\n  const dispatch = useDispatch();\n  const {\n    id\n  } = useParams();\n  const testRef = useRef(\"hi\");\n  useEffect(() => {\n    const resetHandler = () => {\n      dispatch(resetPost());\n      testRef.current = [styles.FullPostContainer];\n    };\n\n    if (setSuccess === false) {\n      resetHandler();\n      props.history.push(\"/\");\n    }\n\n    testRef.current = [styles.FullPostContainer, styles.FullPostContainerOpen].join(\" \");\n    dispatch(setPost(id));\n    return () => resetHandler();\n  }, [dispatch, props.history, id, setSuccess]);\n  let postBody = React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  });\n\n  if (post) {\n    postBody = React.createElement(React.Fragment, null, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"To my\", \" \", React.createElement(\"span\", {\n      className: styles.PostAttribute,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, parse(post.who))), \",\"), React.createElement(\"span\", {\n      className: styles.PostMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, parse(post.message)), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"From your\", \" \", React.createElement(\"span\", {\n      className: styles.PostAttribute,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, parse(post.identity)))));\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, postBody);\n};\n\nexport default withRouter(FullPost);","map":{"version":3,"sources":["/home/anthony/Desktop/if-you-were-here/src/components/FullPost/FullPost.js"],"names":["React","useEffect","useRef","useSelector","useDispatch","parse","styles","setPost","resetPost","useParams","withRouter","Spinner","FullPost","props","post","state","currentPost","setSuccess","dispatch","id","testRef","resetHandler","current","FullPostContainer","history","push","FullPostContainerOpen","join","postBody","PostAttribute","who","PostMessage","message","identity"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,SAASC,OAAT,EAAkBC,SAAlB,QAAmC,qBAAnC;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,kBAAtC;AACA,OAAOC,OAAP,MAAoB,wCAApB;;AAEA,MAAMC,QAAQ,GAAGC,KAAK,IAAI;AACxB,QAAMC,IAAI,GAAGX,WAAW,CAACY,KAAK,IAAIA,KAAK,CAACC,WAAhB,CAAxB;AACA,QAAMC,UAAU,GAAGd,WAAW,CAACY,KAAK,IAAIA,KAAK,CAACE,UAAhB,CAA9B;AACA,QAAMC,QAAQ,GAAGd,WAAW,EAA5B;AACA,QAAM;AAAEe,IAAAA;AAAF,MAASV,SAAS,EAAxB;AACA,QAAMW,OAAO,GAAGlB,MAAM,CAAC,IAAD,CAAtB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMoB,YAAY,GAAG,MAAM;AACzBH,MAAAA,QAAQ,CAACV,SAAS,EAAV,CAAR;AACAY,MAAAA,OAAO,CAACE,OAAR,GAAkB,CAAChB,MAAM,CAACiB,iBAAR,CAAlB;AACD,KAHD;;AAKA,QAAIN,UAAU,KAAK,KAAnB,EAA0B;AACxBI,MAAAA,YAAY;AACZR,MAAAA,KAAK,CAACW,OAAN,CAAcC,IAAd,CAAmB,GAAnB;AACD;;AAEDL,IAAAA,OAAO,CAACE,OAAR,GAAkB,CAChBhB,MAAM,CAACiB,iBADS,EAEhBjB,MAAM,CAACoB,qBAFS,EAGhBC,IAHgB,CAGX,GAHW,CAAlB;AAIAT,IAAAA,QAAQ,CAACX,OAAO,CAACY,EAAD,CAAR,CAAR;AAEA,WAAO,MAAME,YAAY,EAAzB;AACD,GAlBQ,EAkBN,CAACH,QAAD,EAAWL,KAAK,CAACW,OAAjB,EAA0BL,EAA1B,EAA8BF,UAA9B,CAlBM,CAAT;AAoBA,MAAIW,QAAQ,GAAG,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAf;;AAEA,MAAId,IAAJ,EAAU;AACRc,IAAAA,QAAQ,GACN,0CACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACQ,GADR,EAEE;AAAM,MAAA,SAAS,EAAEtB,MAAM,CAACuB,aAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAwCxB,KAAK,CAACS,IAAI,CAACgB,GAAN,CAA7C,CAFF,CADF,MADF,EAQE;AAAM,MAAA,SAAS,EAAExB,MAAM,CAACyB,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAsC1B,KAAK,CAACS,IAAI,CAACkB,OAAN,CAA3C,CARF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACY,GADZ,EAEE;AAAM,MAAA,SAAS,EAAE1B,MAAM,CAACuB,aAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAwCxB,KAAK,CAACS,IAAI,CAACmB,QAAN,CAA7C,CAFF,CADF,CATF,CADF;AAkBD;;AAED,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAML,QAAN,CAAP;AACD,CAnDD;;AAqDA,eAAelB,UAAU,CAACE,QAAD,CAAzB","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport parse from \"html-react-parser\";\nimport styles from \"./FullPost.module.css\";\nimport { setPost, resetPost } from \"../../store/actions\";\nimport { useParams, withRouter } from \"react-router-dom\";\nimport Spinner from \"../UI/Spinners/FormSpinner/FormSpinner\";\n\nconst FullPost = props => {\n  const post = useSelector(state => state.currentPost);\n  const setSuccess = useSelector(state => state.setSuccess);\n  const dispatch = useDispatch();\n  const { id } = useParams();\n  const testRef = useRef(\"hi\");\n\n  useEffect(() => {\n    const resetHandler = () => {\n      dispatch(resetPost());\n      testRef.current = [styles.FullPostContainer];\n    };\n\n    if (setSuccess === false) {\n      resetHandler();\n      props.history.push(\"/\");\n    }\n\n    testRef.current = [\n      styles.FullPostContainer,\n      styles.FullPostContainerOpen\n    ].join(\" \");\n    dispatch(setPost(id));\n\n    return () => resetHandler();\n  }, [dispatch, props.history, id, setSuccess]);\n\n  let postBody = <Spinner />;\n\n  if (post) {\n    postBody = (\n      <>\n        <p>\n          <b>\n            To my{\" \"}\n            <span className={styles.PostAttribute}>{parse(post.who)}</span>\n          </b>\n          ,\n        </p>\n        <span className={styles.PostMessage}>{parse(post.message)}</span>\n        <p>\n          <b>\n            From your{\" \"}\n            <span className={styles.PostAttribute}>{parse(post.identity)}</span>\n          </b>\n        </p>\n      </>\n    );\n  }\n\n  return <div>{postBody}</div>;\n};\n\nexport default withRouter(FullPost);\n"]},"metadata":{},"sourceType":"module"}