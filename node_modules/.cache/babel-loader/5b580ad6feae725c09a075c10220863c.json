{"ast":null,"code":"import _regeneratorRuntime from\"/home/anthony/Desktop/if-you-were-here/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/anthony/Desktop/if-you-were-here/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import*as actionTypes from\"./actionTypes\";export var submitPost=function submitPost(post){return(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:try{dispatch(submitPostStart());// const response = await fetch(\"\", {\n//   method: \"POST\",\n//   mode: \"cors\",\n//   cache: \"no-cache\",\n//   credentials: \"same-origin\",\n//   headers: {\n//     \"Content-Type\": \"application/json\"\n//     // 'Content-Type': 'application/x-www-form-urlencoded',\n//   },\n//   body: JSON.stringify(post)\n// });\n// const data = await response.json();\ndata=post;dispatch(submitPostSuccess(data));}catch(err){dispatch(submitPostFail(err));}case 1:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}());};export var submitPostStart=function submitPostStart(){return{type:actionTypes.SUBMIT_POST_START};};export var submitPostSuccess=function submitPostSuccess(post){return{type:actionTypes.SUBMIT_POST_SUCCESS,post:post};};export var submitPostFail=function submitPostFail(error){return{type:actionTypes.SUBMIT_POST_FAIL,error:error};};export var submitPostReset=function submitPostReset(){return{type:actionTypes.SUBMIT_POST_RESET};};export var setPost=function setPost(postId){return{type:actionTypes.FIND_POST,postId:postId};};export var resetPost=function resetPost(){return{type:actionTypes.RESET_POST};};","map":{"version":3,"sources":["/home/anthony/Desktop/if-you-were-here/client/src/store/actions/posts.js"],"names":["actionTypes","submitPost","post","dispatch","submitPostStart","data","submitPostSuccess","err","submitPostFail","type","SUBMIT_POST_START","SUBMIT_POST_SUCCESS","error","SUBMIT_POST_FAIL","submitPostReset","SUBMIT_POST_RESET","setPost","postId","FIND_POST","resetPost","RESET_POST"],"mappings":"qUAAA,MAAO,GAAKA,CAAAA,WAAZ,KAA6B,eAA7B,CAEA,MAAO,IAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAAAC,IAAI,CAAI,CAChC,gGAAO,iBAAMC,QAAN,2HACL,GAAI,CACFA,QAAQ,CAACC,eAAe,EAAhB,CAAR,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACMC,IAdJ,CAcWH,IAdX,CAeFC,QAAQ,CAACG,iBAAiB,CAACD,IAAD,CAAlB,CAAR,CACD,CAAC,MAAOE,GAAP,CAAY,CACZJ,QAAQ,CAACK,cAAc,CAACD,GAAD,CAAf,CAAR,CACD,CAnBI,sDAAP,gEAqBD,CAtBM,CAwBP,MAAO,IAAMH,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAM,CACnC,MAAO,CACLK,IAAI,CAAET,WAAW,CAACU,iBADb,CAAP,CAGD,CAJM,CAMP,MAAO,IAAMJ,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAAAJ,IAAI,CAAI,CACvC,MAAO,CACLO,IAAI,CAAET,WAAW,CAACW,mBADb,CAELT,IAAI,CAAJA,IAFK,CAAP,CAID,CALM,CAOP,MAAO,IAAMM,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAAAI,KAAK,CAAI,CACrC,MAAO,CACLH,IAAI,CAAET,WAAW,CAACa,gBADb,CAELD,KAAK,CAALA,KAFK,CAAP,CAID,CALM,CAOP,MAAO,IAAME,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAM,CACnC,MAAO,CACLL,IAAI,CAAET,WAAW,CAACe,iBADb,CAAP,CAGD,CAJM,CAMP,MAAO,IAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAAAC,MAAM,CAAI,CAC/B,MAAO,CACLR,IAAI,CAAET,WAAW,CAACkB,SADb,CAELD,MAAM,CAANA,MAFK,CAAP,CAID,CALM,CAOP,MAAO,IAAME,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CAC7B,MAAO,CACLV,IAAI,CAAET,WAAW,CAACoB,UADb,CAAP,CAGD,CAJM","sourcesContent":["import * as actionTypes from \"./actionTypes\";\n\nexport const submitPost = post => {\n  return async dispatch => {\n    try {\n      dispatch(submitPostStart());\n      // const response = await fetch(\"\", {\n      //   method: \"POST\",\n      //   mode: \"cors\",\n      //   cache: \"no-cache\",\n      //   credentials: \"same-origin\",\n      //   headers: {\n      //     \"Content-Type\": \"application/json\"\n      //     // 'Content-Type': 'application/x-www-form-urlencoded',\n      //   },\n      //   body: JSON.stringify(post)\n      // });\n      // const data = await response.json();\n      const data = post;\n      dispatch(submitPostSuccess(data));\n    } catch (err) {\n      dispatch(submitPostFail(err));\n    }\n  };\n};\n\nexport const submitPostStart = () => {\n  return {\n    type: actionTypes.SUBMIT_POST_START\n  };\n};\n\nexport const submitPostSuccess = post => {\n  return {\n    type: actionTypes.SUBMIT_POST_SUCCESS,\n    post\n  };\n};\n\nexport const submitPostFail = error => {\n  return {\n    type: actionTypes.SUBMIT_POST_FAIL,\n    error\n  };\n};\n\nexport const submitPostReset = () => {\n  return {\n    type: actionTypes.SUBMIT_POST_RESET\n  };\n};\n\nexport const setPost = postId => {\n  return {\n    type: actionTypes.FIND_POST,\n    postId\n  };\n};\n\nexport const resetPost = () => {\n  return {\n    type: actionTypes.RESET_POST\n  };\n};\n"]},"metadata":{},"sourceType":"module"}