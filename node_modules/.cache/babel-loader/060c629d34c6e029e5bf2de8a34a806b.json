{"ast":null,"code":"var _jsxFileName = \"/home/anthony/Desktop/if-you-were-here/src/components/FilterOptions/SortOption/SortOption.js\";\nimport React, { useState, useEffect } from \"react\";\nimport styles from \"./SortOption.module.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addSort, removeSort } from \"../../../store/actions\";\n\nconst SortOption = props => {\n  const [selected, setSelected] = useState(false);\n  const sort = useSelector(state => state.sort);\n  const {\n    who,\n    identity\n  } = useSelector(state => state.filters);\n  const dispatch = useDispatch();\n  const {\n    filter,\n    sortHandler,\n    sortSelected\n  } = props;\n  console.log(\"who is it\", who);\n  console.log(\"identity is it\", identity);\n\n  const selectHandler = filter => {\n    if (sortSelected && filter !== sortSelected) {\n      return;\n    }\n\n    setSelected(prevState => !prevState);\n    sortHandler(filter);\n  };\n\n  useEffect(() => {\n    //we need to check to see if the content is filtered-- to determine which array of posts to sort\n    //(the filtered ones, or unfiltered)\n    const filtered = who !== null || identity !== null;\n\n    if (!selected && sort) {\n      dispatch(removeSort(filter, filtered));\n    } else if (selected) {\n      dispatch(addSort(filter, filtered));\n    }\n  }, [selected]);\n  return React.createElement(\"div\", {\n    className: selected ? styles.SortOptionSelected : styles.SortOption,\n    onClick: () => selectHandler(filter),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, props.filter);\n};\n\nexport default SortOption;","map":{"version":3,"sources":["/home/anthony/Desktop/if-you-were-here/src/components/FilterOptions/SortOption/SortOption.js"],"names":["React","useState","useEffect","styles","useDispatch","useSelector","addSort","removeSort","SortOption","props","selected","setSelected","sort","state","who","identity","filters","dispatch","filter","sortHandler","sortSelected","console","log","selectHandler","prevState","filtered","SortOptionSelected"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,wBAApC;;AAEA,MAAMC,UAAU,GAAGC,KAAK,IAAI;AAC1B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAMW,IAAI,GAAGP,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACD,IAAhB,CAAxB;AACA,QAAM;AAAEE,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAoBV,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACG,OAAhB,CAArC;AACA,QAAMC,QAAQ,GAAGb,WAAW,EAA5B;AACA,QAAM;AAAEc,IAAAA,MAAF;AAAUC,IAAAA,WAAV;AAAuBC,IAAAA;AAAvB,MAAwCX,KAA9C;AAEAY,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBR,GAAzB;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BP,QAA9B;;AAEA,QAAMQ,aAAa,GAAGL,MAAM,IAAI;AAC9B,QAAIE,YAAY,IAAIF,MAAM,KAAKE,YAA/B,EAA6C;AAC3C;AACD;;AACDT,IAAAA,WAAW,CAACa,SAAS,IAAI,CAACA,SAAf,CAAX;AACAL,IAAAA,WAAW,CAACD,MAAD,CAAX;AACD,GAND;;AAQAhB,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA,UAAMuB,QAAQ,GAAGX,GAAG,KAAK,IAAR,IAAgBC,QAAQ,KAAK,IAA9C;;AACA,QAAI,CAACL,QAAD,IAAaE,IAAjB,EAAuB;AACrBK,MAAAA,QAAQ,CAACV,UAAU,CAACW,MAAD,EAASO,QAAT,CAAX,CAAR;AACD,KAFD,MAEO,IAAIf,QAAJ,EAAc;AACnBO,MAAAA,QAAQ,CAACX,OAAO,CAACY,MAAD,EAASO,QAAT,CAAR,CAAR;AACD;AACF,GATQ,EASN,CAACf,QAAD,CATM,CAAT;AAWA,SACE;AACE,IAAA,SAAS,EAAEA,QAAQ,GAAGP,MAAM,CAACuB,kBAAV,GAA+BvB,MAAM,CAACK,UAD3D;AAEE,IAAA,OAAO,EAAE,MAAMe,aAAa,CAACL,MAAD,CAF9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGT,KAAK,CAACS,MAJT,CADF;AAQD,CArCD;;AAuCA,eAAeV,UAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport styles from \"./SortOption.module.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addSort, removeSort } from \"../../../store/actions\";\n\nconst SortOption = props => {\n  const [selected, setSelected] = useState(false);\n  const sort = useSelector(state => state.sort);\n  const { who, identity } = useSelector(state => state.filters);\n  const dispatch = useDispatch();\n  const { filter, sortHandler, sortSelected } = props;\n\n  console.log(\"who is it\", who);\n  console.log(\"identity is it\", identity);\n\n  const selectHandler = filter => {\n    if (sortSelected && filter !== sortSelected) {\n      return;\n    }\n    setSelected(prevState => !prevState);\n    sortHandler(filter);\n  };\n\n  useEffect(() => {\n    //we need to check to see if the content is filtered-- to determine which array of posts to sort\n    //(the filtered ones, or unfiltered)\n    const filtered = who !== null || identity !== null;\n    if (!selected && sort) {\n      dispatch(removeSort(filter, filtered));\n    } else if (selected) {\n      dispatch(addSort(filter, filtered));\n    }\n  }, [selected]);\n\n  return (\n    <div\n      className={selected ? styles.SortOptionSelected : styles.SortOption}\n      onClick={() => selectHandler(filter)}\n    >\n      {props.filter}\n    </div>\n  );\n};\n\nexport default SortOption;\n"]},"metadata":{},"sourceType":"module"}