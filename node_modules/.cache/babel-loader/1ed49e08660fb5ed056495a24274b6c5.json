{"ast":null,"code":"var _jsxFileName = \"/home/anthony/Desktop/if-you-were-here/client/src/components/Identity/Identity.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Button from \"../UI/Buttons/FormButton/FormButton\";\nimport styles from \"./Identity.module.css\";\nimport Form from \"react-bootstrap/Form\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport Spinner from \"../../components/UI/Spinners/FormSpinner/FormSpinner\";\n\nconst Identity = props => {\n  const [identityAnswer, setIdentityAnswer] = useState({\n    identityId: null,\n    identityName: null\n  });\n  const persons = useSelector(state => state.persons.persons);\n  const personsError = useSelector(state => state.persons.error);\n  useEffect(() => setIdentityAnswer(props.identityValue), [props.identityValue]);\n  const identityFilters = persons.map(person => React.createElement(Form.Check, {\n    inline: true,\n    type: \"radio\",\n    value: person._id,\n    label: person.name,\n    name: \"formHorizontalRadios\",\n    onChange: () => {\n      const {\n        _id: identityId,\n        name: identityName\n      } = person;\n      setIdentityAnswer({\n        identityId,\n        identityName\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }));\n  let identityBody = React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  });\n\n  if (persons) {\n    identityBody = React.createElement(React.Fragment, null, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"I am a ...\"), React.createElement(\"div\", {\n      className: styles.IdentityAnswer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, identityAnswer.identityName), React.createElement(\"div\", {\n      className: styles.IdentityContent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"fieldset\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(Form.Group, {\n      as: Row,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: styles.RadioContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(Col, {\n      sm: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, identityFilters))))), React.createElement(Button, {\n      type: \"next\",\n      switchHandler: props.switchHandler,\n      name: \"identity\",\n      validated: identityAnswer.identityName !== null,\n      formValue: identityAnswer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    })));\n  }\n\n  if (personsError) {\n    identityBody = React.createElement(React.Fragment, null, React.createElement(\"span\", {\n      style: {\n        color: \"red\",\n        fontWeight: \"bold\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"Sorry, an error has occurred and IT has been notified:\"), \" \", personsError);\n  }\n\n  return identityBody;\n};\n\nexport default Identity;","map":{"version":3,"sources":["/home/anthony/Desktop/if-you-were-here/client/src/components/Identity/Identity.js"],"names":["React","useState","useEffect","useSelector","Button","styles","Form","Col","Row","Spinner","Identity","props","identityAnswer","setIdentityAnswer","identityId","identityName","persons","state","personsError","error","identityValue","identityFilters","map","person","_id","name","identityBody","IdentityAnswer","IdentityContent","RadioContainer","switchHandler","color","fontWeight"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Button from \"../UI/Buttons/FormButton/FormButton\";\nimport styles from \"./Identity.module.css\";\nimport Form from \"react-bootstrap/Form\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport Spinner from \"../../components/UI/Spinners/FormSpinner/FormSpinner\";\n\nconst Identity = (props) => {\n  const [identityAnswer, setIdentityAnswer] = useState({\n    identityId: null,\n    identityName: null,\n  });\n  const persons = useSelector((state) => state.persons.persons);\n  const personsError = useSelector((state) => state.persons.error);\n\n  useEffect(() => setIdentityAnswer(props.identityValue), [\n    props.identityValue,\n  ]);\n\n  const identityFilters = persons.map((person) => (\n    <Form.Check\n      inline\n      type=\"radio\"\n      value={person._id}\n      label={person.name}\n      name=\"formHorizontalRadios\"\n      onChange={() => {\n        const { _id: identityId, name: identityName } = person;\n        setIdentityAnswer({ identityId, identityName });\n      }}\n    />\n  ));\n\n  let identityBody = <Spinner />;\n\n  if (persons) {\n    identityBody = (\n      <>\n        <h3>I am a ...</h3>\n        <div className={styles.IdentityAnswer}>\n          {identityAnswer.identityName}\n        </div>\n        <div className={styles.IdentityContent}>\n          <Form>\n            <fieldset>\n              <Form.Group as={Row}>\n                <div className={styles.RadioContainer}>\n                  <Col sm={12}>{identityFilters}</Col>\n                </div>\n              </Form.Group>\n            </fieldset>\n          </Form>\n          <Button\n            type=\"next\"\n            switchHandler={props.switchHandler}\n            name=\"identity\"\n            validated={identityAnswer.identityName !== null}\n            formValue={identityAnswer}\n          />\n        </div>\n      </>\n    );\n  }\n\n  if (personsError) {\n    identityBody = (\n      <>\n        <span style={{ color: \"red\", fontWeight: \"bold\" }}>\n          Sorry, an error has occurred and IT has been notified:\n        </span>{\" \"}\n        {personsError}\n      </>\n    );\n  }\n\n  return identityBody;\n};\n\nexport default Identity;\n"]},"metadata":{},"sourceType":"module"}