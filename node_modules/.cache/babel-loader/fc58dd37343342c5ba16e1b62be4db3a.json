{"ast":null,"code":"var _jsxFileName = \"/home/anthony/Desktop/if-you-were-here/src/components/Message/Message.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Button from \"../UI/Buttons/Button/Button\";\nimport styles from \"./Message.module.css\";\nimport Form from \"react-bootstrap/Form\";\nimport Editor from \"react-medium-editor\";\nimport \"medium-editor/dist/css/medium-editor.css\";\nimport \"medium-editor/dist/css/themes/default.css\"; // import { Editor } from \"@tinymce/tinymce-react\";\n\nconst Message = props => {\n  const [messageAnswer, setMessageAnswer] = useState(\"\");\n  console.log(messageAnswer); // const handleEditorChange = (content, editor) => {\n  //   setMessageAnswer(content);\n  //   console.log(\"Content was updated:\", content);\n  // };\n\n  const handleChange = (text, medium) => {\n    setMessageAnswer(text);\n  };\n\n  useEffect(() => setMessageAnswer(props.messageValue), [props.messageValue]);\n  return React.createElement(React.Fragment, null, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \"My message ...\"), React.createElement(\"div\", {\n    className: styles.MessageContent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(Editor, {\n    tag: \"textarea\",\n    text: messageAnswer,\n    onChange: handleChange,\n    options: {\n      toolbar: {\n        buttons: [\"bold\", \"italic\", \"underline\"]\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }), React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(Form.Group, {\n    controlId: \"MessageContent\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(Form.Control, {\n    onChange: event => setMessageAnswer(event.target.value),\n    as: \"textarea\",\n    rows: \"10\",\n    className: styles.MessageContent,\n    value: messageAnswer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }))), React.createElement(Button, {\n    type: \"prev\",\n    switchHandler: props.switchHandler,\n    name: \"message\",\n    formValue: messageAnswer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }), React.createElement(Button, {\n    type: \"next\",\n    switchHandler: props.switchHandler,\n    name: \"message\",\n    validated: messageAnswer !== \"\" && messageAnswer.trim().indexOf(\" \") !== -1,\n    formValue: messageAnswer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  })));\n};\n\nexport default Message;","map":{"version":3,"sources":["/home/anthony/Desktop/if-you-were-here/src/components/Message/Message.js"],"names":["React","useState","useEffect","Button","styles","Form","Editor","Message","props","messageAnswer","setMessageAnswer","console","log","handleChange","text","medium","messageValue","MessageContent","toolbar","buttons","event","target","value","switchHandler","trim","indexOf"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAO,0CAAP;AACA,OAAO,2CAAP,C,CAEA;;AAEA,MAAMC,OAAO,GAAGC,KAAK,IAAI;AACvB,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCT,QAAQ,CAAC,EAAD,CAAlD;AACAU,EAAAA,OAAO,CAACC,GAAR,CAAYH,aAAZ,EAFuB,CAIvB;AACA;AACA;AACA;;AACA,QAAMI,YAAY,GAAG,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACrCL,IAAAA,gBAAgB,CAACI,IAAD,CAAhB;AACD,GAFD;;AAIAZ,EAAAA,SAAS,CAAC,MAAMQ,gBAAgB,CAACF,KAAK,CAACQ,YAAP,CAAvB,EAA6C,CAACR,KAAK,CAACQ,YAAP,CAA7C,CAAT;AAEA,SACE,0CACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAEE;AAAK,IAAA,SAAS,EAAEZ,MAAM,CAACa,cAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AACE,IAAA,GAAG,EAAC,UADN;AAEE,IAAA,IAAI,EAAER,aAFR;AAGE,IAAA,QAAQ,EAAEI,YAHZ;AAIE,IAAA,OAAO,EAAE;AAAEK,MAAAA,OAAO,EAAE;AAAEC,QAAAA,OAAO,EAAE,CAAC,MAAD,EAAS,QAAT,EAAmB,WAAnB;AAAX;AAAX,KAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EA0BE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD,CAAM,KAAN;AAAY,IAAA,SAAS,EAAC,gBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD,CAAM,OAAN;AACE,IAAA,QAAQ,EAAEC,KAAK,IAAIV,gBAAgB,CAACU,KAAK,CAACC,MAAN,CAAaC,KAAd,CADrC;AAEE,IAAA,EAAE,EAAC,UAFL;AAGE,IAAA,IAAI,EAAC,IAHP;AAIE,IAAA,SAAS,EAAElB,MAAM,CAACa,cAJpB;AAKE,IAAA,KAAK,EAAER,aALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CA1BF,EAqCE,oBAAC,MAAD;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,aAAa,EAAED,KAAK,CAACe,aAFvB;AAGE,IAAA,IAAI,EAAC,SAHP;AAIE,IAAA,SAAS,EAAEd,aAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArCF,EA2CE,oBAAC,MAAD;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,aAAa,EAAED,KAAK,CAACe,aAFvB;AAGE,IAAA,IAAI,EAAC,SAHP;AAIE,IAAA,SAAS,EACPd,aAAa,KAAK,EAAlB,IAAwBA,aAAa,CAACe,IAAd,GAAqBC,OAArB,CAA6B,GAA7B,MAAsC,CAAC,CALnE;AAOE,IAAA,SAAS,EAAEhB,aAPb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA3CF,CAFF,CADF;AA0DD,CAxED;;AA0EA,eAAeF,OAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Button from \"../UI/Buttons/Button/Button\";\nimport styles from \"./Message.module.css\";\nimport Form from \"react-bootstrap/Form\";\nimport Editor from \"react-medium-editor\";\nimport \"medium-editor/dist/css/medium-editor.css\";\nimport \"medium-editor/dist/css/themes/default.css\";\n\n// import { Editor } from \"@tinymce/tinymce-react\";\n\nconst Message = props => {\n  const [messageAnswer, setMessageAnswer] = useState(\"\");\n  console.log(messageAnswer);\n\n  // const handleEditorChange = (content, editor) => {\n  //   setMessageAnswer(content);\n  //   console.log(\"Content was updated:\", content);\n  // };\n  const handleChange = (text, medium) => {\n    setMessageAnswer(text);\n  };\n\n  useEffect(() => setMessageAnswer(props.messageValue), [props.messageValue]);\n\n  return (\n    <>\n      <h3>My message ...</h3>\n      <div className={styles.MessageContent}>\n        <Editor\n          tag=\"textarea\"\n          text={messageAnswer}\n          onChange={handleChange}\n          options={{ toolbar: { buttons: [\"bold\", \"italic\", \"underline\"] } }}\n        />\n\n        {/* <Editor\n          apiKey=\"ulzlzwd1vwer6c373nxfqmeq3tejpex1ximmhkpuw91l8dlb\"\n          tagName={styles.MessageContent}\n          value={messageAnswer}\n          init={{\n            height: 500,\n            menubar: false,\n            plugins: [\n              \"advlist autolink lists link image charmap print preview anchor\",\n              \"searchreplace visualblocks code fullscreen\",\n              \"insertdatetime media table paste code help wordcount\"\n            ],\n            toolbar:\n              \"undo redo | bold italic backcolor | \\\n             bullist numlist outdent indent |\"\n          }}\n          onEditorChange={handleEditorChange}\n        /> */}\n        <Form>\n          <Form.Group controlId=\"MessageContent\">\n            <Form.Control\n              onChange={event => setMessageAnswer(event.target.value)}\n              as=\"textarea\"\n              rows=\"10\"\n              className={styles.MessageContent}\n              value={messageAnswer}\n            />\n          </Form.Group>\n        </Form>\n        <Button\n          type=\"prev\"\n          switchHandler={props.switchHandler}\n          name=\"message\"\n          formValue={messageAnswer}\n        />\n        <Button\n          type=\"next\"\n          switchHandler={props.switchHandler}\n          name=\"message\"\n          validated={\n            messageAnswer !== \"\" && messageAnswer.trim().indexOf(\" \") !== -1\n          }\n          formValue={messageAnswer}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default Message;\n"]},"metadata":{},"sourceType":"module"}