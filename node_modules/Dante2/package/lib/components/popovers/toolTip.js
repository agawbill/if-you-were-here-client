"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DanteTooltipConfig = exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _color = _interopRequireDefault(require("./color"));

var _draftJs = require("draft-js");

var _selection = require("../../utils/selection.js");

var _index = require("../../model/index.js");

var _icons = _interopRequireDefault(require("../icons.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var DanteTooltip =
/*#__PURE__*/
function (_React$Component) {
  _inherits(DanteTooltip, _React$Component);

  function DanteTooltip(props) {
    var _this;

    _classCallCheck(this, DanteTooltip);

    _this = _possibleConstructorReturn(this, (DanteTooltip.__proto__ || Object.getPrototypeOf(DanteTooltip)).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "_clickInlineHandler", function (ev, style) {
      ev.preventDefault();

      _this.props.onChange(_draftJs.RichUtils.toggleInlineStyle(_this.props.editorState, style));

      _this.callRelocate();
    });

    _defineProperty(_assertThisInitialized(_this), "display", function (b) {
      if (b) {
        return _this.show();
      } else {
        return _this.hide();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "show", function () {
      return _this.setState({
        show: true
      });
    });

    _defineProperty(_assertThisInitialized(_this), "hide", function () {
      return _this.setState({
        link_mode: false,
        show: false,
        menu_style: {}
      });
    });

    _defineProperty(_assertThisInitialized(_this), "setPosition", function (coords) {
      return _this.setState({
        position: coords
      });
    });

    _defineProperty(_assertThisInitialized(_this), "isDescendant", function (parent, child) {
      var node = child.parentNode;

      while (node !== null) {
        if (node === parent) {
          return true;
        }

        node = node.parentNode;
      }

      return false;
    });

    _defineProperty(_assertThisInitialized(_this), "relocate", function () {
      var currentBlock = (0, _index.getCurrentBlock)(_this.props.editorState);
      var blockType = currentBlock.getType(); // display tooltip only for unstyled

      if (_this.props.configTooltip.selectionElements.indexOf(blockType) < 0) {
        _this.hide();

        return;
      }

      if (_this.state.link_mode) {
        return;
      }

      if (!_this.state.show) {
        return;
      }

      var el = _this.refs.dante_menu;
      var padd = el.offsetWidth / 2;
      var nativeSelection = (0, _selection.getSelection)(window);

      if (!nativeSelection.rangeCount) {
        return;
      }

      var selectionBoundary = (0, _selection.getSelectionRect)(nativeSelection);

      var parent = _reactDom.default.findDOMNode(_this.props.editor); // hide if selected node is not in editor


      if (!_this.isDescendant(parent, nativeSelection.anchorNode)) {
        _this.hide();

        return;
      }

      var relativeParent = (0, _selection.getRelativeParent)(_this.refs.dante_menu.parentElement);
      var toolbarHeight = _this.refs.dante_menu.clientHeight; //const toolbarWidth = this.refs.dante_menu.clientWidth;

      var relativeRect = (relativeParent || document.body).getBoundingClientRect();
      var selectionRect = (0, _draftJs.getVisibleSelectionRect)(window);
      if (!selectionRect || !relativeRect || !selectionBoundary) return;
      var top = selectionRect.top - relativeRect.top - toolbarHeight; //let left = selectionBoundary.left + selectionBoundary.width / 2 - padd

      var left = selectionRect.left - relativeRect.left + selectionRect.width / 2 - padd; // - (toolbarWidth / 2 ) + 10
      //let left = (selectionRect.left - relativeRect.left) + (selectionRect.width / 2)

      if (!top || !left) {
        return;
      } // console.log "SET SHOW FOR TOOLTIP INSERT MENU"


      return _this.setState({
        show: true,
        position: {
          left: left,
          top: top
        }
      });
    });

    _defineProperty(_assertThisInitialized(_this), "_clickBlockHandler", function (ev, style) {
      ev.preventDefault();

      _this.props.onChange(_draftJs.RichUtils.toggleBlockType(_this.props.editorState, style));

      return setTimeout(function () {
        return _this.relocate();
      }, 0);
    });

    _defineProperty(_assertThisInitialized(_this), "_clickBlockInlineStyle", function (ev, style) {
      var k = Object.keys(style)[0];

      _this.props.onChange(_this.props.styles[k].toggle(_this.props.editorState, style[k])); //this.props.onChange(RichUtils.toggleInlineStyle(this.props.editorState, style))


      return setTimeout(function () {
        return _this.relocate();
      }, 0);
    });

    _defineProperty(_assertThisInitialized(_this), "displayLinkMode", function () {
      if (_this.state.link_mode) {
        return "dante-menu--linkmode";
      } else {
        return "";
      }
    });

    _defineProperty(_assertThisInitialized(_this), "displayActiveMenu", function () {
      if (_this.state.show) {
        return "dante-menu--active";
      } else {
        return "";
      }
    });

    _defineProperty(_assertThisInitialized(_this), "_enableLinkMode", function (ev) {
      ev.preventDefault();
      return _this.setState({
        link_mode: true,
        menu_style: {
          minWidth: '200px'
        }
      }, _this.callRelocate);
    });

    _defineProperty(_assertThisInitialized(_this), "_disableLinkMode", function (ev) {
      ev.preventDefault();
      return _this.setState({
        link_mode: false,
        url: "",
        menu_style: {}
      }, _this.callRelocate);
    });

    _defineProperty(_assertThisInitialized(_this), "callRelocate", function () {
      setTimeout(function () {
        return _this.relocate();
      }, 0);
    });

    _defineProperty(_assertThisInitialized(_this), "hideMenu", function () {
      return _this.hide();
    });

    _defineProperty(_assertThisInitialized(_this), "handleInputEnter", function (e) {
      if (e.which === 13) {
        return _this.confirmLink(e);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "confirmLink", function (e) {
      e.preventDefault();
      var editorState = _this.props.editorState;
      var urlValue = e.currentTarget.value;
      var selection = editorState.getSelection();
      var opts = {
        url: urlValue,
        showPopLinkOver: _this.props.showPopLinkOver,
        hidePopLinkOver: _this.props.hidePopLinkOver
      };

      var entityKey = _draftJs.Entity.create('LINK', 'MUTABLE', opts); //contentState.createEntity('LINK', 'MUTABLE', opts)


      if (selection.isCollapsed()) {
        console.log("COLLAPSED SKIPPING LINK");
        return;
      }

      _this.props.onChange(_draftJs.RichUtils.toggleLink(editorState, selection, entityKey));

      return _this._disableLinkMode(e);
    });

    _defineProperty(_assertThisInitialized(_this), "getPosition", function () {
      var pos = _this.state.position;
      return pos;
    });

    _defineProperty(_assertThisInitialized(_this), "inlineItems", function () {
      return _this.props.widget_options.block_types.filter(function (o) {
        return o.type === "inline";
      });
    });

    _defineProperty(_assertThisInitialized(_this), "blockItems", function () {
      return _this.props.widget_options.block_types.filter(function (o) {
        return o.type === "block";
      });
    });

    _defineProperty(_assertThisInitialized(_this), "getDefaultValue", function () {
      if (_this.refs.dante_menu_input) {
        _this.refs.dante_menu_input.value = "";
      }

      var currentBlock = (0, _index.getCurrentBlock)(_this.props.editorState);

      var selection = _this.props.editor.state.editorState.getSelection();

      var contentState = _this.props.editorState.getCurrentContent();

      var selectedEntity = null;
      var defaultUrl = null;
      return currentBlock.findEntityRanges(function (character) {
        var entityKey = character.getEntity();
        selectedEntity = entityKey;
        return entityKey !== null && contentState.getEntity(entityKey).getType() === 'LINK';
      }, function (start, end) {
        var selStart = selection.getAnchorOffset();
        var selEnd = selection.getFocusOffset();

        if (selection.getIsBackward()) {
          selStart = selection.getFocusOffset();
          selEnd = selection.getAnchorOffset();
        }

        if (start === selStart && end === selEnd) {
          defaultUrl = contentState.getEntity(selectedEntity).getData().url;
          return _this.refs.dante_menu_input.value = defaultUrl;
        }
      });
    });

    _defineProperty(_assertThisInitialized(_this), "linkBlock", function () {
      return _this.props.widget_options.block_types.find(function (o) {
        return o.type === "link";
      });
    });

    _defineProperty(_assertThisInitialized(_this), "render", function () {
      return _react.default.createElement("div", {
        id: "dante-menu",
        ref: "dante_menu",
        className: "dante-menu ".concat(_this.displayActiveMenu(), " ").concat(_this.displayLinkMode()),
        style: _this.getPosition()
      }, _this.linkBlock() ? _react.default.createElement("div", {
        className: "dante-menu-linkinput"
      }, _react.default.createElement("input", {
        className: "dante-menu-input",
        ref: "dante_menu_input",
        placeholder: _this.linkBlock().placeholder,
        onKeyPress: _this.handleInputEnter //defaultValue={ this.getDefaultValue() }

      }), _react.default.createElement("div", {
        className: "dante-menu-button",
        onMouseDown: _this._disableLinkMode
      }, _react.default.createElement("span", {
        className: 'dante-icon'
      }, _icons.default['close']()))) : null, _react.default.createElement("ul", {
        className: "dante-menu-buttons",
        style: _this.state.menu_style
      }, _this.props.widget_options.block_types.map(function (item, i) {
        switch (item.type) {
          case "block":
            return _react.default.createElement(DanteTooltipItem, {
              key: i,
              item: item,
              styles: _this.props.style,
              handleClick: _this._clickBlockHandler,
              editorState: _this.props.editorState,
              type: "block",
              currentStyle: _this.props.editorState.getCurrentInlineStyle
            });
            break;

          case "inline":
            return _react.default.createElement(DanteTooltipItem, {
              key: i,
              item: item,
              type: "inline",
              editorState: _this.props.editorState,
              handleClick: _this._clickInlineHandler
            });
            break;

          case "color":
            return _react.default.createElement(_color.default, {
              key: i,
              styles: _this.props.styles,
              editorState: _this.props.editorState,
              enableLinkMode: _this._enableLinkMode,
              value: '#000',
              style_type: "color",
              handleClick: _this._clickBlockInlineStyle,
              show: _this.state.show
            });
            break;

          case "separator":
            return _react.default.createElement(DanteMenuDivider, {
              key: i
            });
            break;

          case "link":
            return _react.default.createElement(DanteTooltipLink, {
              key: i,
              editorState: _this.props.editorState,
              enableLinkMode: _this._enableLinkMode
            });
            break;

          default:
            break;
        }
      })));
    });

    _this.state = {
      link_mode: false,
      show: false,
      position: {},
      menu_style: {}
    };
    return _this;
  }

  return DanteTooltip;
}(_react.default.Component);

var DanteMenuDivider = function DanteMenuDivider() {
  return _react.default.createElement("li", {
    className: "dante-menu-divider"
  });
};

var DanteTooltipItem =
/*#__PURE__*/
function (_React$Component2) {
  _inherits(DanteTooltipItem, _React$Component2);

  function DanteTooltipItem() {
    var _ref;

    var _this2;

    _classCallCheck(this, DanteTooltipItem);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this2 = _possibleConstructorReturn(this, (_ref = DanteTooltipItem.__proto__ || Object.getPrototypeOf(DanteTooltipItem)).call.apply(_ref, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this2), "handleClick", function (ev) {
      return _this2.props.handleClick(ev, _this2.props.item.style);
    });

    _defineProperty(_assertThisInitialized(_this2), "activeClass", function () {
      if (_this2.isActive()) {
        return "active";
      } else {
        return "";
      }
    });

    _defineProperty(_assertThisInitialized(_this2), "isActive", function () {
      if (_this2.props.type === "block") {
        return _this2.activeClassBlock();
      } else {
        return _this2.activeClassInline();
      }
    });

    _defineProperty(_assertThisInitialized(_this2), "activeClassInline", function () {
      if (!_this2.props.editorState || !_this2.props.editorState.getCurrentContent().hasText()) {
        return;
      }

      return _this2.props.editorState.getCurrentInlineStyle().has(_this2.props.item.style);
    });

    _defineProperty(_assertThisInitialized(_this2), "activeClassBlock", function () {
      if (!_this2.props.editorState || !_this2.props.editorState.getCurrentContent().hasText()) {
        return;
      }

      var selection = _this2.props.editorState.getSelection();

      var blockKey = _this2.props.editorState.getCurrentContent().getBlockForKey(selection.getStartKey());

      if (!blockKey) return;
      var blockType = blockKey.getType();
      return _this2.props.item.style === blockType;
    });

    return _this2;
  }

  _createClass(DanteTooltipItem, [{
    key: "render",
    value: function render() {
      return _react.default.createElement("li", {
        className: "dante-menu-button ".concat(this.activeClass()),
        onMouseDown: this.handleClick
      }, _react.default.createElement("span", {
        className: 'dante-icon'
      }, this.props.item.icon()));
    }
  }]);

  return DanteTooltipItem;
}(_react.default.Component);

var DanteTooltipLink =
/*#__PURE__*/
function (_React$Component3) {
  _inherits(DanteTooltipLink, _React$Component3);

  function DanteTooltipLink() {
    var _ref2;

    var _this3;

    _classCallCheck(this, DanteTooltipLink);

    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    _this3 = _possibleConstructorReturn(this, (_ref2 = DanteTooltipLink.__proto__ || Object.getPrototypeOf(DanteTooltipLink)).call.apply(_ref2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this3), "promptForLink", function (ev) {
      var selection = _this3.props.editorState.getSelection();

      if (!selection.isCollapsed()) {
        return _this3.props.enableLinkMode(ev);
      }
    });

    _this3.promptForLink = _this3.promptForLink.bind(_assertThisInitialized(_this3));
    return _this3;
  }

  _createClass(DanteTooltipLink, [{
    key: "render",
    value: function render() {
      return _react.default.createElement("li", {
        className: "dante-menu-button",
        onMouseDown: this.promptForLink
      }, _react.default.createElement("span", {
        className: 'dante-icon'
      }, _icons.default['link']()));
    }
  }]);

  return DanteTooltipLink;
}(_react.default.Component);

var _default = DanteTooltip;
exports.default = _default;

var DanteTooltipConfig = function DanteTooltipConfig() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var config = {
    ref: 'insert_tooltip',
    component: DanteTooltip,
    displayOnSelection: true,
    selectionElements: ["unstyled", "blockquote", "ordered-list", "unordered-list", "unordered-list-item", "ordered-list-item", "code-block", 'header-one', 'header-two', 'header-three', 'header-four', 'footer', 'column', 'jumbo'],
    widget_options: {
      placeholder: "type a url",
      block_types: [{
        label: 'p',
        style: 'unstyled',
        icon: _icons.default.bold
      }, {
        label: 'h2',
        style: 'header-one',
        type: "block",
        icon: _icons.default.h1
      }, {
        label: 'h3',
        style: 'header-two',
        type: "block",
        icon: _icons.default.h2
      }, {
        label: 'h4',
        style: 'header-three',
        type: "block",
        icon: _icons.default.h3
      }, {
        type: "separator"
      }, {
        label: 'color',
        type: "color"
      }, {
        type: "link"
      }, {
        label: 'blockquote',
        style: 'blockquote',
        type: "block",
        icon: _icons.default.blockquote
      }, {
        type: "separator"
      }, {
        label: 'insertunorderedlist',
        style: 'unordered-list-item',
        type: "block",
        icon: _icons.default.insertunorderedlist
      }, {
        label: 'insertorderedlist',
        style: 'ordered-list-item',
        type: "block",
        icon: _icons.default.insertunorderedlist
      }, {
        type: "separator"
      }, {
        label: 'code',
        style: 'code-block',
        type: "block",
        icon: _icons.default.code
      }, {
        label: 'bold',
        style: 'BOLD',
        type: "inline",
        icon: _icons.default.bold
      }, {
        label: 'italic',
        style: 'ITALIC',
        type: "inline",
        icon: _icons.default.italic
      }]
    }
  };
  return Object.assign(config, options);
};

exports.DanteTooltipConfig = DanteTooltipConfig;