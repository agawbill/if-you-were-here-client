function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

import React, { Component } from 'react';

if (window.location.protocol !== 'https:' && window.location.hostname !== 'localhost') {
  console.warn('getUserMedia() must be run from a secure origin: https or localhost.\nChanging protocol to https.');
}

if (!navigator.mediaDevices && !navigator.getUserMedia) {
  console.warn("Your browser doesn't support navigator.mediaDevices.getUserMedia and navigator.getUserMedia.");
}

navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia; // stop hack
// from http://stackoverflow.com/questions/11642926/stop-close-webcam-which-is-opened-by-navigator-getusermedia

var MediaStream = window.MediaStream || window.webkitMediaStream;
;

if (typeof MediaStream !== 'undefined' && !('stop' in MediaStream.prototype)) {
  MediaStream.prototype.stop = function () {
    this.getAudioTracks().forEach(function (track) {
      track.stop();
    });
    this.getVideoTracks().forEach(function (track) {
      track.stop();
    });
  };
}

var ReactMediaRecorder =
/*#__PURE__*/
function (_Component) {
  _inherits(ReactMediaRecorder, _Component);

  function ReactMediaRecorder(props) {
    var _this;

    _classCallCheck(this, ReactMediaRecorder);

    _this = _possibleConstructorReturn(this, (ReactMediaRecorder.__proto__ || Object.getPrototypeOf(ReactMediaRecorder)).call(this, props));
    _this.state = {
      asked: false,
      permission: false,
      available: false,
      recording: false,
      paused: false
    };
    _this.stream = null;
    _this.mediaRecorder = null;
    _this.mediaChunk = [];
    _this.start = _this.start.bind(_assertThisInitialized(_this));
    _this.stop = _this.stop.bind(_assertThisInitialized(_this));
    _this.pause = _this.pause.bind(_assertThisInitialized(_this));
    _this.resume = _this.resume.bind(_assertThisInitialized(_this));
    _this.initMediaRecorder = _this.initMediaRecorder.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(ReactMediaRecorder, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      var width = this.props.width;
      var height = this.props.height;
      var constraints = this.props.constraints;

      var handleSuccess = function handleSuccess(stream, cb) {
        _this2.stream = stream;
        _this2.mediaChunk = [];

        _this2.setState({
          permission: true,
          asked: true,
          recording: false
        });

        _this2.props.onGranted();

        _this2.initMediaRecorder();

        cb();
      };

      var handleFailed = function handleFailed(err) {
        _this2.setState({
          asked: false
        });

        _this2.props.onDenied(err);
      };

      this.askPermission = function (cb) {
        if (navigator.mediaDevices) {
          navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {
            return handleSuccess(stream, cb);
          }).catch(handleFailed);
        } else if (navigator.getUserMedia) {
          navigator.getUserMedia(constraints, handleSuccess, handleFailed);
        } else {
          var errMessage = "Browser doesn't support UserMedia API. Please try with another browser.";
          console.warn(errMessage);

          _this2.props.onError(new Error(errMessage));
        }
      };
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.mediaRecorder = null;
      this.mediaChunk = [];

      if (this.stream) {
        this.stream.stop();
        this.stream = null;
      }
    }
  }, {
    key: "initMediaRecorder",
    value: function initMediaRecorder() {
      var _this3 = this;

      try {
        var options = {};
        var types = ['video/webm;codecs=vp8', 'video/webm', ''];
        if (this.props.mimeType) types.unshift(this.props.mimeType);

        for (var i = 0; i < types.length; i++) {
          var type = types[i];

          if (MediaRecorder.isTypeSupported(type)) {
            options.mimeType = type;
            break;
          }

          console.warn("".concat(type, " is not supported on your browser."));
        }

        var mediaRecorder = new MediaRecorder(this.stream, options);

        mediaRecorder.ondataavailable = function (ev) {
          if (ev.data && ev.data.size > 0) {
            _this3.mediaChunk.push(ev.data);
          }
        };

        this.mediaRecorder = mediaRecorder;
        this.setState({
          available: true
        });
      } catch (err) {
        console.log(err);
        console.error('Failed to initialize MediaRecorder.', err);
        this.setState({
          available: false
        });
      }
    }
  }, {
    key: "start",
    value: function start() {
      var _this4 = this;

      this.askPermission(function () {
        if (!_this4.state.available) return;
        _this4.mediaChunk = [];

        _this4.mediaRecorder.start(_this4.props.timeSlice);

        _this4.setState({
          recording: true
        });

        _this4.props.onStart(_this4.stream);
      });
    }
  }, {
    key: "pause",
    value: function pause() {
      if (!this.state.recording) return;
      if (this.mediaRecorder.state === "inactive") return;
      this.mediaRecorder.stop();
      this.setState({
        paused: true
      });
      this.props.onPause();
    }
  }, {
    key: "resume",
    value: function resume() {
      if (!this.state.recording) return;
      this.initMediaRecorder();
      this.mediaRecorder.start(this.props.timeSlice);
      this.setState({
        paused: false
      });
      this.props.onResume(this.stream);
    }
  }, {
    key: "stop",
    value: function stop() {
      if (!this.state.available) return;
      if (this.mediaRecorder.state === "inactive") return;
      this.mediaRecorder.stop();
      this.setState({
        recording: false
      });
      var blob = new Blob(this.mediaChunk, {
        type: 'video/webm'
      });
      this.props.onStop(blob);
    }
  }, {
    key: "render",
    value: function render() {
      var asked = this.state.asked;
      var permission = this.state.permission;
      var recording = this.state.recording;
      var available = this.state.available;
      return React.createElement("div", {
        className: this.props.className
      }, this.props.render({
        start: this.start,
        stop: this.stop,
        pause: this.pause,
        resume: this.resume
      }));
    }
  }]);

  return ReactMediaRecorder;
}(Component);

ReactMediaRecorder.defaultProps = {
  constraints: {
    audio: true,
    video: true
  },
  className: '',
  timeSlice: 0,
  mimeType: '',
  render: function render() {},
  onGranted: function onGranted() {},
  onDenied: function onDenied() {},
  onStart: function onStart() {},
  onStop: function onStop() {},
  onPause: function onPause() {},
  onResume: function onResume() {},
  onError: function onError() {}
};
export default ReactMediaRecorder;